
drone_nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080018b4  080018b4  000028b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018cc  080018cc  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080018cc  080018cc  000028cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018d4  080018d4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018d4  080018d4  000028d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018d8  080018d8  000028d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080018dc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080018e8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080018e8  00003114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100ae  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fca  00000000  00000000  000130ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  000150b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a56  00000000  00000000  00015be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f95  00000000  00000000  0001663e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b59  00000000  00000000  000375d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd1a6  00000000  00000000  0004812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001152d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb8  00000000  00000000  00115318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000783f  00000000  00000000  00116fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0011e80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800189c 	.word	0x0800189c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800189c 	.word	0x0800189c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b510      	push	{r4, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000534:	2214      	movs	r2, #20
 8000536:	2100      	movs	r1, #0
 8000538:	a808      	add	r0, sp, #32
 800053a:	f001 f982 	bl	8001842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053e:	2214      	movs	r2, #20
 8000540:	2100      	movs	r1, #0
 8000542:	a802      	add	r0, sp, #8
 8000544:	f001 f97d 	bl	8001842 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <SystemClock_Config+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	9200      	str	r2, [sp, #0]
 800054e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000550:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000554:	6419      	str	r1, [r3, #64]	@ 0x40
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000558:	491c      	ldr	r1, [pc, #112]	@ (80005cc <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000562:	9201      	str	r2, [sp, #4]
 8000564:	680b      	ldr	r3, [r1, #0]
 8000566:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800056a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056e:	600b      	str	r3, [r1, #0]
 8000570:	680b      	ldr	r3, [r1, #0]
 8000572:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2101      	movs	r1, #1
 800057c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800057e:	f44f 70a8 	mov.w	r0, #336	@ 0x150
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000586:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000588:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058c:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	e9cd 420d 	strd	r4, r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000596:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059a:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f000 fcc2 	bl	8000f24 <HAL_RCC_OscConfig>
 80005a0:	b108      	cbz	r0, 80005a6 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b6:	4621      	mov	r1, r4
 80005b8:	a802      	add	r0, sp, #8
 80005ba:	f000 fbb1 	bl	8000d20 <HAL_RCC_ClockConfig>
 80005be:	b108      	cbz	r0, 80005c4 <SystemClock_Config+0x94>
 80005c0:	b672      	cpsid	i
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <SystemClock_Config+0x92>
}
 80005c4:	b014      	add	sp, #80	@ 0x50
 80005c6:	bd10      	pop	{r4, pc}
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <UpdatePWM>:
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_D9);
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <UpdatePWM+0x24>)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM_D6);
 80005d2:	4909      	ldr	r1, [pc, #36]	@ (80005f8 <UpdatePWM+0x28>)
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_D9);
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <UpdatePWM+0x2c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM_D6);
 80005dc:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <UpdatePWM+0x30>)
 80005de:	6809      	ldr	r1, [r1, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	63d9      	str	r1, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_D5);
 80005e4:	4907      	ldr	r1, [pc, #28]	@ (8000604 <UpdatePWM+0x34>)
 80005e6:	6809      	ldr	r1, [r1, #0]
 80005e8:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_D3);
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <UpdatePWM+0x38>)
 80005ec:	6812      	ldr	r2, [r2, #0]
 80005ee:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000080 	.word	0x20000080
 80005f8:	20000030 	.word	0x20000030
 80005fc:	20000034 	.word	0x20000034
 8000600:	200000c8 	.word	0x200000c8
 8000604:	2000002c 	.word	0x2000002c
 8000608:	20000028 	.word	0x20000028

0800060c <main>:
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 8000610:	f000 fa2a 	bl	8000a68 <HAL_Init>
  SystemClock_Config();
 8000614:	f7ff ff8c 	bl	8000530 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	2214      	movs	r2, #20
 800061a:	2100      	movs	r1, #0
 800061c:	a807      	add	r0, sp, #28
 800061e:	f001 f910 	bl	8001842 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2400      	movs	r4, #0
 8000624:	4b6e      	ldr	r3, [pc, #440]	@ (80007e0 <main+0x1d4>)
 8000626:	9401      	str	r4, [sp, #4]
 8000628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800062a:	486e      	ldr	r0, [pc, #440]	@ (80007e4 <main+0x1d8>)
  huart2.Init.BaudRate = 115200;
 800062c:	4d6e      	ldr	r5, [pc, #440]	@ (80007e8 <main+0x1dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	f042 0204 	orr.w	r2, r2, #4
 8000632:	631a      	str	r2, [r3, #48]	@ 0x30
 8000634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000636:	f002 0204 	and.w	r2, r2, #4
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	9402      	str	r4, [sp, #8]
 8000640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000642:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000646:	631a      	str	r2, [r3, #48]	@ 0x30
 8000648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800064a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800064e:	9202      	str	r2, [sp, #8]
 8000650:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	9403      	str	r4, [sp, #12]
 8000654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000656:	f042 0201 	orr.w	r2, r2, #1
 800065a:	631a      	str	r2, [r3, #48]	@ 0x30
 800065c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800065e:	f002 0201 	and.w	r2, r2, #1
 8000662:	9203      	str	r2, [sp, #12]
 8000664:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	9404      	str	r4, [sp, #16]
 8000668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800066a:	f042 0202 	orr.w	r2, r2, #2
 800066e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000676:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	f000 fb49 	bl	8000d14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000682:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000686:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068a:	4858      	ldr	r0, [pc, #352]	@ (80007ec <main+0x1e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000690:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f000 fa6c 	bl	8000b70 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	2120      	movs	r1, #32
 800069c:	e9cd 1307 	strd	r1, r3, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a0:	4850      	ldr	r0, [pc, #320]	@ (80007e4 <main+0x1d8>)
 80006a2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f000 fa62 	bl	8000b70 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80006ac:	4850      	ldr	r0, [pc, #320]	@ (80007f0 <main+0x1e4>)
  huart2.Init.BaudRate = 115200;
 80006ae:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80006b2:	e9c0 5300 	strd	r5, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b6:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006bc:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c0:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c4:	f001 f88e 	bl	80017e4 <HAL_UART_Init>
 80006c8:	4604      	mov	r4, r0
 80006ca:	b108      	cbz	r0, 80006d0 <main+0xc4>
 80006cc:	b672      	cpsid	i
  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0xc2>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d0:	221c      	movs	r2, #28
  htim2.Instance = TIM2;
 80006d2:	4d48      	ldr	r5, [pc, #288]	@ (80007f4 <main+0x1e8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	e9cd 0005 	strd	r0, r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d8:	4601      	mov	r1, r0
 80006da:	eb0d 0002 	add.w	r0, sp, r2
 80006de:	f001 f8b0 	bl	8001842 <memset>
  htim2.Instance = TIM2;
 80006e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  htim2.Init.Prescaler = 0;
 80006e6:	e9c5 3400 	strd	r3, r4, [r5]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006ea:	4628      	mov	r0, r5
  htim2.Init.Period = 4294967295;
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006f8:	f000 feb6 	bl	8001468 <HAL_TIM_PWM_Init>
 80006fc:	b108      	cbz	r0, 8000702 <main+0xf6>
 80006fe:	b672      	cpsid	i
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0xf4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000706:	a905      	add	r1, sp, #20
 8000708:	4628      	mov	r0, r5
 800070a:	f000 ffcf 	bl	80016ac <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	b108      	cbz	r0, 8000714 <main+0x108>
 8000710:	b672      	cpsid	i
  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0x106>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000714:	2760      	movs	r7, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8000716:	e9cd 7007 	strd	r7, r0, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071a:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071c:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800071e:	2204      	movs	r2, #4
 8000720:	a907      	add	r1, sp, #28
 8000722:	4628      	mov	r0, r5
 8000724:	f000 fefc 	bl	8001520 <HAL_TIM_PWM_ConfigChannel>
 8000728:	b108      	cbz	r0, 800072e <main+0x122>
 800072a:	b672      	cpsid	i
  while (1)
 800072c:	e7fe      	b.n	800072c <main+0x120>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800072e:	2208      	movs	r2, #8
 8000730:	a907      	add	r1, sp, #28
 8000732:	4628      	mov	r0, r5
 8000734:	f000 fef4 	bl	8001520 <HAL_TIM_PWM_ConfigChannel>
 8000738:	4606      	mov	r6, r0
 800073a:	b108      	cbz	r0, 8000740 <main+0x134>
 800073c:	b672      	cpsid	i
  while (1)
 800073e:	e7fe      	b.n	800073e <main+0x132>
  HAL_TIM_MspPostInit(&htim2);
 8000740:	4628      	mov	r0, r5
 8000742:	f000 f8a3 	bl	800088c <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	221c      	movs	r2, #28
 8000748:	4631      	mov	r1, r6
 800074a:	eb0d 0002 	add.w	r0, sp, r2
  htim3.Instance = TIM3;
 800074e:	4c2a      	ldr	r4, [pc, #168]	@ (80007f8 <main+0x1ec>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	e9cd 6605 	strd	r6, r6, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000754:	f001 f875 	bl	8001842 <memset>
  htim3.Instance = TIM3;
 8000758:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <main+0x1f0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	60a6      	str	r6, [r4, #8]
  htim3.Init.Prescaler = 0;
 800075c:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000760:	4620      	mov	r0, r4
  htim3.Init.Period = 65535;
 8000762:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	e9c4 3603 	strd	r3, r6, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800076c:	f000 fe7c 	bl	8001468 <HAL_TIM_PWM_Init>
 8000770:	b108      	cbz	r0, 8000776 <main+0x16a>
 8000772:	b672      	cpsid	i
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0x168>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800077a:	a905      	add	r1, sp, #20
 800077c:	4620      	mov	r0, r4
 800077e:	f000 ff95 	bl	80016ac <HAL_TIMEx_MasterConfigSynchronization>
 8000782:	4602      	mov	r2, r0
 8000784:	b108      	cbz	r0, 800078a <main+0x17e>
 8000786:	b672      	cpsid	i
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x17c>
  sConfigOC.Pulse = 0;
 800078a:	e9cd 7007 	strd	r7, r0, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078e:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000790:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	a907      	add	r1, sp, #28
 8000794:	4620      	mov	r0, r4
 8000796:	f000 fec3 	bl	8001520 <HAL_TIM_PWM_ConfigChannel>
 800079a:	b108      	cbz	r0, 80007a0 <main+0x194>
 800079c:	b672      	cpsid	i
  while (1)
 800079e:	e7fe      	b.n	800079e <main+0x192>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a0:	2204      	movs	r2, #4
 80007a2:	a907      	add	r1, sp, #28
 80007a4:	4620      	mov	r0, r4
 80007a6:	f000 febb 	bl	8001520 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4606      	mov	r6, r0
 80007ac:	b108      	cbz	r0, 80007b2 <main+0x1a6>
 80007ae:	b672      	cpsid	i
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x1a4>
  HAL_TIM_MspPostInit(&htim3);
 80007b2:	4620      	mov	r0, r4
 80007b4:	f000 f86a 	bl	800088c <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007b8:	2104      	movs	r1, #4
 80007ba:	4628      	mov	r0, r5
 80007bc:	f000 ff74 	bl	80016a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80007c0:	2108      	movs	r1, #8
 80007c2:	4628      	mov	r0, r5
 80007c4:	f000 ff70 	bl	80016a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007c8:	4631      	mov	r1, r6
 80007ca:	4620      	mov	r0, r4
 80007cc:	f000 ff6c 	bl	80016a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80007d0:	2104      	movs	r1, #4
 80007d2:	4620      	mov	r0, r4
 80007d4:	f000 ff68 	bl	80016a8 <HAL_TIM_PWM_Start>
    UpdatePWM();
 80007d8:	f7ff fefa 	bl	80005d0 <UpdatePWM>
  while (1)
 80007dc:	e7fc      	b.n	80007d8 <main+0x1cc>
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40004400 	.word	0x40004400
 80007ec:	40020800 	.word	0x40020800
 80007f0:	20000038 	.word	0x20000038
 80007f4:	200000c8 	.word	0x200000c8
 80007f8:	20000080 	.word	0x20000080
 80007fc:	40000400 	.word	0x40000400

08000800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <HAL_MspInit+0x38>)
 8000804:	2100      	movs	r1, #0
 8000806:	9100      	str	r1, [sp, #0]
 8000808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800080a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800080e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000812:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000816:	9200      	str	r2, [sp, #0]
 8000818:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	9101      	str	r1, [sp, #4]
 800081c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800081e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000822:	641a      	str	r2, [r3, #64]	@ 0x40
 8000824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800082e:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000830:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000832:	f000 b945 	b.w	8000ac0 <HAL_NVIC_SetPriorityGrouping>
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_TIM_PWM_MspInit>:
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 800083c:	6803      	ldr	r3, [r0, #0]
 800083e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 8000842:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8000844:	d10d      	bne.n	8000862 <HAL_TIM_PWM_MspInit+0x26>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <HAL_TIM_PWM_MspInit+0x48>)
 800084c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084e:	f042 0201 	orr.w	r2, r2, #1
 8000852:	641a      	str	r2, [r3, #64]	@ 0x40
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	9b00      	ldr	r3, [sp, #0]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800085e:	b002      	add	sp, #8
 8000860:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM3)
 8000862:	4a09      	ldr	r2, [pc, #36]	@ (8000888 <HAL_TIM_PWM_MspInit+0x4c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d1fa      	bne.n	800085e <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	9301      	str	r3, [sp, #4]
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <HAL_TIM_PWM_MspInit+0x48>)
 800086e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000870:	f042 0202 	orr.w	r2, r2, #2
 8000874:	641a      	str	r2, [r3, #64]	@ 0x40
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	9b01      	ldr	r3, [sp, #4]
}
 8000880:	e7ed      	b.n	800085e <HAL_TIM_PWM_MspInit+0x22>
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40000400 	.word	0x40000400

0800088c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800088c:	b530      	push	{r4, r5, lr}
 800088e:	4604      	mov	r4, r0
 8000890:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	2214      	movs	r2, #20
 8000894:	2100      	movs	r1, #0
 8000896:	a803      	add	r0, sp, #12
 8000898:	f000 ffd3 	bl	8001842 <memset>
  if(htim->Instance==TIM2)
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008a2:	d118      	bne.n	80008d6 <HAL_TIM_MspPostInit+0x4a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <HAL_TIM_MspPostInit+0x9c>)
 80008aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008ac:	f042 0202 	orr.w	r2, r2, #2
 80008b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80008b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	9b00      	ldr	r3, [sp, #0]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 80008c0:	2302      	movs	r3, #2
 80008c2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008c6:	2301      	movs	r3, #1
 80008c8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	4818      	ldr	r0, [pc, #96]	@ (800092c <HAL_TIM_MspPostInit+0xa0>)
 80008cc:	a903      	add	r1, sp, #12
 80008ce:	f000 f94f 	bl	8000b70 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008d2:	b009      	add	sp, #36	@ 0x24
 80008d4:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM3)
 80008d6:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <HAL_TIM_MspPostInit+0xa4>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d1fa      	bne.n	80008d2 <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_TIM_MspPostInit+0x9c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	4815      	ldr	r0, [pc, #84]	@ (8000934 <HAL_TIM_MspPostInit+0xa8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	2500      	movs	r5, #0
 80008e2:	9501      	str	r5, [sp, #4]
 80008e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008e6:	f042 0204 	orr.w	r2, r2, #4
 80008ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80008ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008ee:	f002 0204 	and.w	r2, r2, #4
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	9502      	str	r5, [sp, #8]
 80008f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008fa:	f042 0202 	orr.w	r2, r2, #2
 80008fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800090c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f000 f92b 	bl	8000b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800091a:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	e9cd 5505 	strd	r5, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000924:	9407      	str	r4, [sp, #28]
 8000926:	e7d0      	b.n	80008ca <HAL_TIM_MspPostInit+0x3e>
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400
 8000930:	40000400 	.word	0x40000400
 8000934:	40020800 	.word	0x40020800

08000938 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b510      	push	{r4, lr}
 800093a:	4604      	mov	r4, r0
 800093c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	2214      	movs	r2, #20
 8000940:	2100      	movs	r1, #0
 8000942:	a803      	add	r0, sp, #12
 8000944:	f000 ff7d 	bl	8001842 <memset>
  if(huart->Instance==USART2)
 8000948:	6822      	ldr	r2, [r4, #0]
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_UART_MspInit+0x64>)
 800094c:	429a      	cmp	r2, r3
 800094e:	d122      	bne.n	8000996 <HAL_UART_MspInit+0x5e>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000950:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8000954:	2100      	movs	r1, #0
 8000956:	9101      	str	r1, [sp, #4]
 8000958:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	4811      	ldr	r0, [pc, #68]	@ (80009a0 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800095c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000960:	641a      	str	r2, [r3, #64]	@ 0x40
 8000962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000964:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000968:	9201      	str	r2, [sp, #4]
 800096a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	9102      	str	r1, [sp, #8]
 800096e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000970:	f042 0201 	orr.w	r2, r2, #1
 8000974:	631a      	str	r2, [r3, #48]	@ 0x30
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	220c      	movs	r2, #12
 8000982:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000984:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098a:	2307      	movs	r3, #7
 800098c:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	a903      	add	r1, sp, #12
 8000992:	f000 f8ed 	bl	8000b70 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000996:	b008      	add	sp, #32
 8000998:	bd10      	pop	{r4, pc}
 800099a:	bf00      	nop
 800099c:	40004400 	.word	0x40004400
 80009a0:	40020000 	.word	0x40020000

080009a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler>

080009a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler>

080009a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler>

080009aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler>

080009ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler>

080009ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 b872 	b.w	8000a9c <HAL_IncTick>

080009b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4a03      	ldr	r2, [pc, #12]	@ (80009c8 <SystemInit+0x10>)
 80009ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80009be:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009d0:	f7ff fff2 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	@ (8000a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f000 ff2b 	bl	8001854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fe05 	bl	800060c <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a10:	080018dc 	.word	0x080018dc
  ldr r2, =_sbss
 8000a14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a18:	20000114 	.word	0x20000114

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_InitTick+0x3c>)
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <HAL_InitTick+0x40>)
{
 8000a30:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a32:	6810      	ldr	r0, [r2, #0]
 8000a34:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a38:	f000 f886 	bl	8000b48 <HAL_SYSTICK_Config>
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	b958      	cbnz	r0, 8000a58 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	2d0f      	cmp	r5, #15
 8000a42:	d809      	bhi.n	8000a58 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	4602      	mov	r2, r0
 8000a46:	4629      	mov	r1, r5
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f84a 	bl	8000ae4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a50:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <HAL_InitTick+0x44>)
 8000a52:	4620      	mov	r0, r4
 8000a54:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a58:	2001      	movs	r0, #1
 8000a5a:	e7fc      	b.n	8000a56 <HAL_InitTick+0x36>
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008

08000a68 <HAL_Init>:
{
 8000a68:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <HAL_Init+0x30>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a72:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a7a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a82:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 f81b 	bl	8000ac0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff ffc8 	bl	8000a20 <HAL_InitTick>
  HAL_MspInit();
 8000a90:	f7ff feb6 	bl	8000800 <HAL_MspInit>
}
 8000a94:	2000      	movs	r0, #0
 8000a96:	bd08      	pop	{r3, pc}
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a9c:	4a03      	ldr	r2, [pc, #12]	@ (8000aac <HAL_IncTick+0x10>)
 8000a9e:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <HAL_IncTick+0x14>)
 8000aa0:	6811      	ldr	r1, [r2, #0]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	440b      	add	r3, r1
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000110 	.word	0x20000110
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ab4:	4b01      	ldr	r3, [pc, #4]	@ (8000abc <HAL_GetTick+0x8>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000110 	.word	0x20000110

08000ac0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4907      	ldr	r1, [pc, #28]	@ (8000ae0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ac2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000adc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae6:	b530      	push	{r4, r5, lr}
 8000ae8:	68dc      	ldr	r4, [r3, #12]
 8000aea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aee:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	bf28      	it	cs
 8000af8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b00:	bf8c      	ite	hi
 8000b02:	3c03      	subhi	r4, #3
 8000b04:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b06:	fa05 f303 	lsl.w	r3, r5, r3
 8000b0a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0e:	40a5      	lsls	r5, r4
 8000b10:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000b16:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	bfac      	ite	ge
 8000b1e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	4a08      	ldrlt	r2, [pc, #32]	@ (8000b44 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	bfb8      	it	lt
 8000b2a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	bfaa      	itet	ge
 8000b32:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b3c:	bd30      	pop	{r4, r5, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	e000ed14 	.word	0xe000ed14

08000b48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	3801      	subs	r0, #1
 8000b4a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b4e:	d20b      	bcs.n	8000b68 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	21f0      	movs	r1, #240	@ 0xf0
 8000b5a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b60:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b62:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b64:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b66:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b68:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b74:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8000d10 <HAL_GPIO_Init+0x1a0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b78:	4a63      	ldr	r2, [pc, #396]	@ (8000d08 <HAL_GPIO_Init+0x198>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b7a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000b7e:	2401      	movs	r4, #1
 8000b80:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b82:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8000b86:	43ac      	bics	r4, r5
 8000b88:	f040 80ab 	bne.w	8000ce2 <HAL_GPIO_Init+0x172>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b8c:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b8e:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b90:	f005 0403 	and.w	r4, r5, #3
 8000b94:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b98:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9c:	1e67      	subs	r7, r4, #1
 8000b9e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba0:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ba4:	d834      	bhi.n	8000c10 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000ba6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba8:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bac:	68cf      	ldr	r7, [r1, #12]
 8000bae:	fa07 f708 	lsl.w	r7, r7, r8
 8000bb2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000bb6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bb8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bba:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbe:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000bc2:	409f      	lsls	r7, r3
 8000bc4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000bc8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000bca:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bcc:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd0:	688f      	ldr	r7, [r1, #8]
 8000bd2:	fa07 f708 	lsl.w	r7, r7, r8
 8000bd6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bda:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000bdc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bde:	d119      	bne.n	8000c14 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000be0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000be4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000be8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000bec:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bf0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000bf4:	f04f 0e0f 	mov.w	lr, #15
 8000bf8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000bfc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c00:	690f      	ldr	r7, [r1, #16]
 8000c02:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c06:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000c0a:	f8ca 7020 	str.w	r7, [sl, #32]
 8000c0e:	e001      	b.n	8000c14 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c10:	2c03      	cmp	r4, #3
 8000c12:	d1da      	bne.n	8000bca <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000c14:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c16:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c1a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c1e:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c20:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000c24:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c26:	d05c      	beq.n	8000ce2 <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	2400      	movs	r4, #0
 8000c2a:	9401      	str	r4, [sp, #4]
 8000c2c:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000c30:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000c34:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8000c38:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000c3c:	f023 0703 	bic.w	r7, r3, #3
 8000c40:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000c44:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000c48:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8000c4c:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c4e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c54:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c58:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c5c:	240f      	movs	r4, #15
 8000c5e:	fa04 f40c 	lsl.w	r4, r4, ip
 8000c62:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c66:	4c29      	ldr	r4, [pc, #164]	@ (8000d0c <HAL_GPIO_Init+0x19c>)
 8000c68:	42a0      	cmp	r0, r4
 8000c6a:	d041      	beq.n	8000cf0 <HAL_GPIO_Init+0x180>
 8000c6c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000c70:	42a0      	cmp	r0, r4
 8000c72:	d03f      	beq.n	8000cf4 <HAL_GPIO_Init+0x184>
 8000c74:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000c78:	42a0      	cmp	r0, r4
 8000c7a:	d03d      	beq.n	8000cf8 <HAL_GPIO_Init+0x188>
 8000c7c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000c80:	42a0      	cmp	r0, r4
 8000c82:	d03b      	beq.n	8000cfc <HAL_GPIO_Init+0x18c>
 8000c84:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000c88:	42a0      	cmp	r0, r4
 8000c8a:	d039      	beq.n	8000d00 <HAL_GPIO_Init+0x190>
 8000c8c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000c90:	42a0      	cmp	r0, r4
 8000c92:	d037      	beq.n	8000d04 <HAL_GPIO_Init+0x194>
 8000c94:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000c98:	42a0      	cmp	r0, r4
 8000c9a:	bf14      	ite	ne
 8000c9c:	2407      	movne	r4, #7
 8000c9e:	2406      	moveq	r4, #6
 8000ca0:	fa04 f40c 	lsl.w	r4, r4, ip
 8000ca4:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ca8:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8000caa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cac:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cae:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000cb2:	bf0c      	ite	eq
 8000cb4:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000cb6:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8000cb8:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000cba:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cbc:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	bf0c      	ite	eq
 8000cc2:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000cc4:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8000cc6:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000cc8:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cca:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000cce:	bf0c      	ite	eq
 8000cd0:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000cd2:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8000cd4:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cd6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cd8:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000cda:	bf54      	ite	pl
 8000cdc:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000cde:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8000ce0:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	f47f af49 	bne.w	8000b7c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000cea:	b003      	add	sp, #12
 8000cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf0:	2400      	movs	r4, #0
 8000cf2:	e7d5      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
 8000cf4:	2401      	movs	r4, #1
 8000cf6:	e7d3      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
 8000cf8:	2402      	movs	r4, #2
 8000cfa:	e7d1      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
 8000cfc:	2403      	movs	r4, #3
 8000cfe:	e7cf      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
 8000d00:	2404      	movs	r4, #4
 8000d02:	e7cd      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
 8000d04:	2405      	movs	r4, #5
 8000d06:	e7cb      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
 8000d08:	40013c00 	.word	0x40013c00
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d14:	b10a      	cbz	r2, 8000d1a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d16:	6181      	str	r1, [r0, #24]
  }
}
 8000d18:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d1a:	0409      	lsls	r1, r1, #16
 8000d1c:	e7fb      	b.n	8000d16 <HAL_GPIO_WritePin+0x2>
	...

08000d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d24:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d26:	4604      	mov	r4, r0
 8000d28:	b910      	cbnz	r0, 8000d30 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8000d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d30:	4b43      	ldr	r3, [pc, #268]	@ (8000e40 <HAL_RCC_ClockConfig+0x120>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	f002 020f 	and.w	r2, r2, #15
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	d328      	bcc.n	8000d8e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d3c:	6821      	ldr	r1, [r4, #0]
 8000d3e:	078f      	lsls	r7, r1, #30
 8000d40:	d42d      	bmi.n	8000d9e <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d42:	07c8      	lsls	r0, r1, #31
 8000d44:	d440      	bmi.n	8000dc8 <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d46:	4b3e      	ldr	r3, [pc, #248]	@ (8000e40 <HAL_RCC_ClockConfig+0x120>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	f002 020f 	and.w	r2, r2, #15
 8000d4e:	42aa      	cmp	r2, r5
 8000d50:	d865      	bhi.n	8000e1e <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d52:	6822      	ldr	r2, [r4, #0]
 8000d54:	0751      	lsls	r1, r2, #29
 8000d56:	d46b      	bmi.n	8000e30 <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d58:	0713      	lsls	r3, r2, #28
 8000d5a:	d507      	bpl.n	8000d6c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d5c:	4a39      	ldr	r2, [pc, #228]	@ (8000e44 <HAL_RCC_ClockConfig+0x124>)
 8000d5e:	6921      	ldr	r1, [r4, #16]
 8000d60:	6893      	ldr	r3, [r2, #8]
 8000d62:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000d66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d6a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d6c:	f000 f892 	bl	8000e94 <HAL_RCC_GetSysClockFreq>
 8000d70:	4b34      	ldr	r3, [pc, #208]	@ (8000e44 <HAL_RCC_ClockConfig+0x124>)
 8000d72:	4a35      	ldr	r2, [pc, #212]	@ (8000e48 <HAL_RCC_ClockConfig+0x128>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	40d8      	lsrs	r0, r3
 8000d7e:	4b33      	ldr	r3, [pc, #204]	@ (8000e4c <HAL_RCC_ClockConfig+0x12c>)
 8000d80:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000d82:	4b33      	ldr	r3, [pc, #204]	@ (8000e50 <HAL_RCC_ClockConfig+0x130>)
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	f7ff fe4b 	bl	8000a20 <HAL_InitTick>
  return HAL_OK;
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	e7ce      	b.n	8000d2c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d8e:	b2ca      	uxtb	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 030f 	and.w	r3, r3, #15
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d1c6      	bne.n	8000d2a <HAL_RCC_ClockConfig+0xa>
 8000d9c:	e7ce      	b.n	8000d3c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d9e:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <HAL_RCC_ClockConfig+0x124>)
 8000da0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000da4:	bf1e      	ittt	ne
 8000da6:	689a      	ldrne	r2, [r3, #8]
 8000da8:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8000dac:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dae:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000db0:	bf42      	ittt	mi
 8000db2:	689a      	ldrmi	r2, [r3, #8]
 8000db4:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8000db8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	68a0      	ldr	r0, [r4, #8]
 8000dbe:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	e7bc      	b.n	8000d42 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dc8:	6862      	ldr	r2, [r4, #4]
 8000dca:	4b1e      	ldr	r3, [pc, #120]	@ (8000e44 <HAL_RCC_ClockConfig+0x124>)
 8000dcc:	2a01      	cmp	r2, #1
 8000dce:	d11c      	bne.n	8000e0a <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd6:	d0a8      	beq.n	8000d2a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dd8:	4e1a      	ldr	r6, [pc, #104]	@ (8000e44 <HAL_RCC_ClockConfig+0x124>)
 8000dda:	68b3      	ldr	r3, [r6, #8]
 8000ddc:	f023 0303 	bic.w	r3, r3, #3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000de4:	f7ff fe66 	bl	8000ab4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de8:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8000dec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dee:	68b3      	ldr	r3, [r6, #8]
 8000df0:	6862      	ldr	r2, [r4, #4]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000dfa:	d0a4      	beq.n	8000d46 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dfc:	f7ff fe5a 	bl	8000ab4 <HAL_GetTick>
 8000e00:	1bc0      	subs	r0, r0, r7
 8000e02:	4540      	cmp	r0, r8
 8000e04:	d9f3      	bls.n	8000dee <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000e06:	2003      	movs	r0, #3
 8000e08:	e790      	b.n	8000d2c <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e0a:	1e91      	subs	r1, r2, #2
 8000e0c:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e0e:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e10:	d802      	bhi.n	8000e18 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e12:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000e16:	e7de      	b.n	8000dd6 <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e18:	f013 0f02 	tst.w	r3, #2
 8000e1c:	e7db      	b.n	8000dd6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e1e:	b2ea      	uxtb	r2, r5
 8000e20:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	f47f af7e 	bne.w	8000d2a <HAL_RCC_ClockConfig+0xa>
 8000e2e:	e790      	b.n	8000d52 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e30:	4904      	ldr	r1, [pc, #16]	@ (8000e44 <HAL_RCC_ClockConfig+0x124>)
 8000e32:	68e0      	ldr	r0, [r4, #12]
 8000e34:	688b      	ldr	r3, [r1, #8]
 8000e36:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000e3a:	4303      	orrs	r3, r0
 8000e3c:	608b      	str	r3, [r1, #8]
 8000e3e:	e78b      	b.n	8000d58 <HAL_RCC_ClockConfig+0x38>
 8000e40:	40023c00 	.word	0x40023c00
 8000e44:	40023800 	.word	0x40023800
 8000e48:	080018bc 	.word	0x080018bc
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008

08000e54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000e5e:	5cd3      	ldrb	r3, [r2, r3]
 8000e60:	4a03      	ldr	r2, [pc, #12]	@ (8000e70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e62:	6810      	ldr	r0, [r2, #0]
}
 8000e64:	40d8      	lsrs	r0, r3
 8000e66:	4770      	bx	lr
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	080018b4 	.word	0x080018b4
 8000e70:	20000000 	.word	0x20000000

08000e74 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e76:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e7e:	5cd3      	ldrb	r3, [r2, r3]
 8000e80:	4a03      	ldr	r2, [pc, #12]	@ (8000e90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e82:	6810      	ldr	r0, [r2, #0]
}
 8000e84:	40d8      	lsrs	r0, r3
 8000e86:	4770      	bx	lr
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	080018b4 	.word	0x080018b4
 8000e90:	20000000 	.word	0x20000000

08000e94 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e94:	4920      	ldr	r1, [pc, #128]	@ (8000f18 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000e96:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e98:	688b      	ldr	r3, [r1, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d007      	beq.n	8000eb2 <HAL_RCC_GetSysClockFreq+0x1e>
 8000ea2:	2b0c      	cmp	r3, #12
 8000ea4:	d020      	beq.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ea6:	481d      	ldr	r0, [pc, #116]	@ (8000f1c <HAL_RCC_GetSysClockFreq+0x88>)
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf18      	it	ne
 8000eae:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000eb0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eb2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000eb4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eb6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000eb8:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ebc:	bf14      	ite	ne
 8000ebe:	4817      	ldrne	r0, [pc, #92]	@ (8000f1c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ec0:	4817      	ldreq	r0, [pc, #92]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ec2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ece:	fba1 0100 	umull	r0, r1, r1, r0
 8000ed2:	f7ff f997 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_RCC_GetSysClockFreq+0x84>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ede:	3301      	adds	r3, #1
 8000ee0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllr;
 8000ee2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000ee6:	e7e3      	b.n	8000eb0 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ee8:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000eea:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eec:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000eee:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ef2:	bf14      	ite	ne
 8000ef4:	4809      	ldrne	r0, [pc, #36]	@ (8000f1c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ef6:	480a      	ldreq	r0, [pc, #40]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ef8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000efc:	bf18      	it	ne
 8000efe:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f00:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f04:	fba1 0100 	umull	r0, r1, r1, r0
 8000f08:	f7ff f97c 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000f0c:	4b02      	ldr	r3, [pc, #8]	@ (8000f18 <HAL_RCC_GetSysClockFreq+0x84>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000f14:	e7e5      	b.n	8000ee2 <HAL_RCC_GetSysClockFreq+0x4e>
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	007a1200 	.word	0x007a1200
 8000f20:	00f42400 	.word	0x00f42400

08000f24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f28:	4604      	mov	r4, r0
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d031      	beq.n	8000f92 <HAL_RCC_OscConfig+0x6e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2e:	6803      	ldr	r3, [r0, #0]
 8000f30:	07df      	lsls	r7, r3, #31
 8000f32:	d410      	bmi.n	8000f56 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	079e      	lsls	r6, r3, #30
 8000f38:	d467      	bmi.n	800100a <HAL_RCC_OscConfig+0xe6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	0719      	lsls	r1, r3, #28
 8000f3e:	f100 80b2 	bmi.w	80010a6 <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	075a      	lsls	r2, r3, #29
 8000f46:	f100 80d2 	bmi.w	80010ee <HAL_RCC_OscConfig+0x1ca>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f4a:	69a3      	ldr	r3, [r4, #24]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f040 8139 	bne.w	80011c4 <HAL_RCC_OscConfig+0x2a0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000f52:	2000      	movs	r0, #0
 8000f54:	e034      	b.n	8000fc0 <HAL_RCC_OscConfig+0x9c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000f56:	4b98      	ldr	r3, [pc, #608]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	f002 020c 	and.w	r2, r2, #12
 8000f5e:	2a04      	cmp	r2, #4
 8000f60:	d010      	beq.n	8000f84 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	f002 020c 	and.w	r2, r2, #12
        || \
 8000f68:	2a08      	cmp	r2, #8
 8000f6a:	d102      	bne.n	8000f72 <HAL_RCC_OscConfig+0x4e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	025d      	lsls	r5, r3, #9
 8000f70:	d408      	bmi.n	8000f84 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f72:	4b91      	ldr	r3, [pc, #580]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	f002 020c 	and.w	r2, r2, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000f7a:	2a0c      	cmp	r2, #12
 8000f7c:	d10b      	bne.n	8000f96 <HAL_RCC_OscConfig+0x72>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	0251      	lsls	r1, r2, #9
 8000f82:	d508      	bpl.n	8000f96 <HAL_RCC_OscConfig+0x72>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	4b8c      	ldr	r3, [pc, #560]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	039a      	lsls	r2, r3, #14
 8000f8a:	d5d3      	bpl.n	8000f34 <HAL_RCC_OscConfig+0x10>
 8000f8c:	6863      	ldr	r3, [r4, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1d0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000f92:	2001      	movs	r0, #1
 8000f94:	e014      	b.n	8000fc0 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f96:	6862      	ldr	r2, [r4, #4]
 8000f98:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8000f9c:	d113      	bne.n	8000fc6 <HAL_RCC_OscConfig+0xa2>
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000fa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fd85 	bl	8000ab4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	4e83      	ldr	r6, [pc, #524]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8000fac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	6833      	ldr	r3, [r6, #0]
 8000fb0:	039b      	lsls	r3, r3, #14
 8000fb2:	d4bf      	bmi.n	8000f34 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fd7e 	bl	8000ab4 <HAL_GetTick>
 8000fb8:	1b40      	subs	r0, r0, r5
 8000fba:	2864      	cmp	r0, #100	@ 0x64
 8000fbc:	d9f7      	bls.n	8000fae <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000fbe:	2003      	movs	r0, #3
}
 8000fc0:	b002      	add	sp, #8
 8000fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc6:	4d7c      	ldr	r5, [pc, #496]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 8000fc8:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8000fcc:	682b      	ldr	r3, [r5, #0]
 8000fce:	d107      	bne.n	8000fe0 <HAL_RCC_OscConfig+0xbc>
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fd4:	602b      	str	r3, [r5, #0]
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fdc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fde:	e7e2      	b.n	8000fa6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe4:	602b      	str	r3, [r5, #0]
 8000fe6:	682b      	ldr	r3, [r5, #0]
 8000fe8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fec:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fee:	2a00      	cmp	r2, #0
 8000ff0:	d1d9      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fd5f 	bl	8000ab4 <HAL_GetTick>
 8000ff6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	039f      	lsls	r7, r3, #14
 8000ffc:	d59a      	bpl.n	8000f34 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fd59 	bl	8000ab4 <HAL_GetTick>
 8001002:	1b80      	subs	r0, r0, r6
 8001004:	2864      	cmp	r0, #100	@ 0x64
 8001006:	d9f7      	bls.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8001008:	e7d9      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800100a:	4b6b      	ldr	r3, [pc, #428]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	f012 0f0c 	tst.w	r2, #12
 8001012:	d010      	beq.n	8001036 <HAL_RCC_OscConfig+0x112>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	f002 020c 	and.w	r2, r2, #12
        || \
 800101a:	2a08      	cmp	r2, #8
 800101c:	d102      	bne.n	8001024 <HAL_RCC_OscConfig+0x100>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	025e      	lsls	r6, r3, #9
 8001022:	d508      	bpl.n	8001036 <HAL_RCC_OscConfig+0x112>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001024:	4a64      	ldr	r2, [pc, #400]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 8001026:	6893      	ldr	r3, [r2, #8]
 8001028:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800102c:	2b0c      	cmp	r3, #12
 800102e:	d111      	bne.n	8001054 <HAL_RCC_OscConfig+0x130>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001030:	6853      	ldr	r3, [r2, #4]
 8001032:	025d      	lsls	r5, r3, #9
 8001034:	d40e      	bmi.n	8001054 <HAL_RCC_OscConfig+0x130>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001036:	4a60      	ldr	r2, [pc, #384]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 8001038:	6813      	ldr	r3, [r2, #0]
 800103a:	0799      	lsls	r1, r3, #30
 800103c:	d502      	bpl.n	8001044 <HAL_RCC_OscConfig+0x120>
 800103e:	68e3      	ldr	r3, [r4, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d1a6      	bne.n	8000f92 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001044:	6813      	ldr	r3, [r2, #0]
 8001046:	6921      	ldr	r1, [r4, #16]
 8001048:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800104c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001050:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	e772      	b.n	8000f3a <HAL_RCC_OscConfig+0x16>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001054:	68e2      	ldr	r2, [r4, #12]
 8001056:	4b59      	ldr	r3, [pc, #356]	@ (80011bc <HAL_RCC_OscConfig+0x298>)
 8001058:	b1b2      	cbz	r2, 8001088 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_ENABLE();
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800105e:	f7ff fd29 	bl	8000ab4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001062:	4d55      	ldr	r5, [pc, #340]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8001064:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	079b      	lsls	r3, r3, #30
 800106a:	d507      	bpl.n	800107c <HAL_RCC_OscConfig+0x158>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	6922      	ldr	r2, [r4, #16]
 8001070:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001074:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001078:	602b      	str	r3, [r5, #0]
 800107a:	e75e      	b.n	8000f3a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fd1a 	bl	8000ab4 <HAL_GetTick>
 8001080:	1b80      	subs	r0, r0, r6
 8001082:	2802      	cmp	r0, #2
 8001084:	d9ef      	bls.n	8001066 <HAL_RCC_OscConfig+0x142>
 8001086:	e79a      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001088:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800108a:	f7ff fd13 	bl	8000ab4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	4e4a      	ldr	r6, [pc, #296]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8001090:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001092:	6833      	ldr	r3, [r6, #0]
 8001094:	079f      	lsls	r7, r3, #30
 8001096:	f57f af50 	bpl.w	8000f3a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109a:	f7ff fd0b 	bl	8000ab4 <HAL_GetTick>
 800109e:	1b40      	subs	r0, r0, r5
 80010a0:	2802      	cmp	r0, #2
 80010a2:	d9f6      	bls.n	8001092 <HAL_RCC_OscConfig+0x16e>
 80010a4:	e78b      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010a6:	6962      	ldr	r2, [r4, #20]
 80010a8:	4b44      	ldr	r3, [pc, #272]	@ (80011bc <HAL_RCC_OscConfig+0x298>)
 80010aa:	b182      	cbz	r2, 80010ce <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 80010ac:	2201      	movs	r2, #1
 80010ae:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80010b2:	f7ff fcff 	bl	8000ab4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	4e40      	ldr	r6, [pc, #256]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 80010b8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80010bc:	079b      	lsls	r3, r3, #30
 80010be:	f53f af40 	bmi.w	8000f42 <HAL_RCC_OscConfig+0x1e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c2:	f7ff fcf7 	bl	8000ab4 <HAL_GetTick>
 80010c6:	1b40      	subs	r0, r0, r5
 80010c8:	2802      	cmp	r0, #2
 80010ca:	d9f6      	bls.n	80010ba <HAL_RCC_OscConfig+0x196>
 80010cc:	e777      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80010ce:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80010d2:	f7ff fcef 	bl	8000ab4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d6:	4e38      	ldr	r6, [pc, #224]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 80010d8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010da:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80010dc:	079f      	lsls	r7, r3, #30
 80010de:	f57f af30 	bpl.w	8000f42 <HAL_RCC_OscConfig+0x1e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fce7 	bl	8000ab4 <HAL_GetTick>
 80010e6:	1b40      	subs	r0, r0, r5
 80010e8:	2802      	cmp	r0, #2
 80010ea:	d9f6      	bls.n	80010da <HAL_RCC_OscConfig+0x1b6>
 80010ec:	e767      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ee:	4b32      	ldr	r3, [pc, #200]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 80010f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010f2:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 80010f6:	d128      	bne.n	800114a <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800110c:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110e:	4d2c      	ldr	r5, [pc, #176]	@ (80011c0 <HAL_RCC_OscConfig+0x29c>)
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	05d8      	lsls	r0, r3, #23
 8001114:	d51b      	bpl.n	800114e <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001116:	68a3      	ldr	r3, [r4, #8]
 8001118:	4d27      	ldr	r5, [pc, #156]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 800111a:	2b01      	cmp	r3, #1
 800111c:	d127      	bne.n	800116e <HAL_RCC_OscConfig+0x24a>
 800111e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001126:	f7ff fcc5 	bl	8000ab4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112a:	4e23      	ldr	r6, [pc, #140]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 800112c:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001132:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001134:	079a      	lsls	r2, r3, #30
 8001136:	d539      	bpl.n	80011ac <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8001138:	2f00      	cmp	r7, #0
 800113a:	f43f af06 	beq.w	8000f4a <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 800113e:	4a1e      	ldr	r2, [pc, #120]	@ (80011b8 <HAL_RCC_OscConfig+0x294>)
 8001140:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001142:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
 8001148:	e6ff      	b.n	8000f4a <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2700      	movs	r7, #0
 800114c:	e7df      	b.n	800110e <HAL_RCC_OscConfig+0x1ea>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001156:	f7ff fcad 	bl	8000ab4 <HAL_GetTick>
 800115a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	05d9      	lsls	r1, r3, #23
 8001160:	d4d9      	bmi.n	8001116 <HAL_RCC_OscConfig+0x1f2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001162:	f7ff fca7 	bl	8000ab4 <HAL_GetTick>
 8001166:	1b80      	subs	r0, r0, r6
 8001168:	2802      	cmp	r0, #2
 800116a:	d9f7      	bls.n	800115c <HAL_RCC_OscConfig+0x238>
 800116c:	e727      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116e:	2b05      	cmp	r3, #5
 8001170:	d104      	bne.n	800117c <HAL_RCC_OscConfig+0x258>
 8001172:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	672b      	str	r3, [r5, #112]	@ 0x70
 800117a:	e7d0      	b.n	800111e <HAL_RCC_OscConfig+0x1fa>
 800117c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	672a      	str	r2, [r5, #112]	@ 0x70
 8001184:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001186:	f022 0204 	bic.w	r2, r2, #4
 800118a:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1ca      	bne.n	8001126 <HAL_RCC_OscConfig+0x202>
      tickstart = HAL_GetTick();
 8001190:	f7ff fc90 	bl	8000ab4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001194:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001198:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800119c:	079b      	lsls	r3, r3, #30
 800119e:	d5cb      	bpl.n	8001138 <HAL_RCC_OscConfig+0x214>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a0:	f7ff fc88 	bl	8000ab4 <HAL_GetTick>
 80011a4:	1b80      	subs	r0, r0, r6
 80011a6:	4540      	cmp	r0, r8
 80011a8:	d9f7      	bls.n	800119a <HAL_RCC_OscConfig+0x276>
 80011aa:	e708      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff fc82 	bl	8000ab4 <HAL_GetTick>
 80011b0:	1b40      	subs	r0, r0, r5
 80011b2:	4540      	cmp	r0, r8
 80011b4:	d9bd      	bls.n	8001132 <HAL_RCC_OscConfig+0x20e>
 80011b6:	e702      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
 80011b8:	40023800 	.word	0x40023800
 80011bc:	42470000 	.word	0x42470000
 80011c0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011c4:	4d3c      	ldr	r5, [pc, #240]	@ (80012b8 <HAL_RCC_OscConfig+0x394>)
 80011c6:	68aa      	ldr	r2, [r5, #8]
 80011c8:	f002 020c 	and.w	r2, r2, #12
 80011cc:	2a08      	cmp	r2, #8
 80011ce:	d041      	beq.n	8001254 <HAL_RCC_OscConfig+0x330>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	4b3a      	ldr	r3, [pc, #232]	@ (80012bc <HAL_RCC_OscConfig+0x398>)
 80011d4:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80011d8:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011da:	d12e      	bne.n	800123a <HAL_RCC_OscConfig+0x316>
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc6a 	bl	8000ab4 <HAL_GetTick>
 80011e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011e2:	682b      	ldr	r3, [r5, #0]
 80011e4:	0199      	lsls	r1, r3, #6
 80011e6:	d422      	bmi.n	800122e <HAL_RCC_OscConfig+0x30a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011e8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80011f0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80011f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011fa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80011fc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001200:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001202:	0852      	lsrs	r2, r2, #1
 8001204:	3a01      	subs	r2, #1
 8001206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800120a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800120c:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <HAL_RCC_OscConfig+0x398>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120e:	4d2a      	ldr	r5, [pc, #168]	@ (80012b8 <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_ENABLE();
 8001210:	2201      	movs	r2, #1
 8001212:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001214:	f7ff fc4e 	bl	8000ab4 <HAL_GetTick>
 8001218:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121a:	682b      	ldr	r3, [r5, #0]
 800121c:	019a      	lsls	r2, r3, #6
 800121e:	f53f ae98 	bmi.w	8000f52 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001222:	f7ff fc47 	bl	8000ab4 <HAL_GetTick>
 8001226:	1b00      	subs	r0, r0, r4
 8001228:	2802      	cmp	r0, #2
 800122a:	d9f6      	bls.n	800121a <HAL_RCC_OscConfig+0x2f6>
 800122c:	e6c7      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122e:	f7ff fc41 	bl	8000ab4 <HAL_GetTick>
 8001232:	1b80      	subs	r0, r0, r6
 8001234:	2802      	cmp	r0, #2
 8001236:	d9d4      	bls.n	80011e2 <HAL_RCC_OscConfig+0x2be>
 8001238:	e6c1      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 800123a:	f7ff fc3b 	bl	8000ab4 <HAL_GetTick>
 800123e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	019b      	lsls	r3, r3, #6
 8001244:	f57f ae85 	bpl.w	8000f52 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001248:	f7ff fc34 	bl	8000ab4 <HAL_GetTick>
 800124c:	1b00      	subs	r0, r0, r4
 800124e:	2802      	cmp	r0, #2
 8001250:	d9f6      	bls.n	8001240 <HAL_RCC_OscConfig+0x31c>
 8001252:	e6b4      	b.n	8000fbe <HAL_RCC_OscConfig+0x9a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001254:	2b01      	cmp	r3, #1
 8001256:	f43f ae9c 	beq.w	8000f92 <HAL_RCC_OscConfig+0x6e>
        pll_config = RCC->PLLCFGR;
 800125a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800125c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800125e:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001262:	4291      	cmp	r1, r2
 8001264:	f47f ae95 	bne.w	8000f92 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001268:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800126a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126e:	428a      	cmp	r2, r1
 8001270:	f47f ae8f 	bne.w	8000f92 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001274:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001276:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800127a:	401a      	ands	r2, r3
 800127c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001280:	f47f ae87 	bne.w	8000f92 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001284:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001286:	0852      	lsrs	r2, r2, #1
 8001288:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800128c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800128e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001292:	f47f ae7e 	bne.w	8000f92 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001296:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001298:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800129c:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80012a0:	f47f ae77 	bne.w	8000f92 <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80012a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80012a6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012aa:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80012ae:	bf14      	ite	ne
 80012b0:	2001      	movne	r0, #1
 80012b2:	2000      	moveq	r0, #0
 80012b4:	e684      	b.n	8000fc0 <HAL_RCC_OscConfig+0x9c>
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	42470000 	.word	0x42470000

080012c0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012c0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012c2:	6a02      	ldr	r2, [r0, #32]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
{
 80012c8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012ca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80012ce:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80012d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80012d2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80012d6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80012d8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80012da:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80012de:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80012e0:	4d0c      	ldr	r5, [pc, #48]	@ (8001314 <TIM_OC1_SetConfig+0x54>)
 80012e2:	42a8      	cmp	r0, r5
 80012e4:	d003      	beq.n	80012ee <TIM_OC1_SetConfig+0x2e>
 80012e6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80012ea:	42a8      	cmp	r0, r5
 80012ec:	d10b      	bne.n	8001306 <TIM_OC1_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80012ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80012f0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80012f4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80012f6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80012fa:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80012fe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001300:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001304:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001306:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001308:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800130a:	684a      	ldr	r2, [r1, #4]
 800130c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800130e:	6203      	str	r3, [r0, #32]
}
 8001310:	bd70      	pop	{r4, r5, r6, pc}
 8001312:	bf00      	nop
 8001314:	40010000 	.word	0x40010000

08001318 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001318:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800131a:	6a02      	ldr	r2, [r0, #32]
 800131c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8001320:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001322:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001324:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001326:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001328:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800132a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800132e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001330:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001332:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001336:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800133a:	4d0d      	ldr	r5, [pc, #52]	@ (8001370 <TIM_OC3_SetConfig+0x58>)
 800133c:	42a8      	cmp	r0, r5
 800133e:	d003      	beq.n	8001348 <TIM_OC3_SetConfig+0x30>
 8001340:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001344:	42a8      	cmp	r0, r5
 8001346:	d10d      	bne.n	8001364 <TIM_OC3_SetConfig+0x4c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001348:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800134a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800134e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001352:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001356:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800135a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800135c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001360:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001364:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001366:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001368:	684a      	ldr	r2, [r1, #4]
 800136a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800136c:	6203      	str	r3, [r0, #32]
}
 800136e:	bd70      	pop	{r4, r5, r6, pc}
 8001370:	40010000 	.word	0x40010000

08001374 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001374:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001376:	6a02      	ldr	r2, [r0, #32]
 8001378:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 800137c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800137e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001380:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001382:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001384:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001386:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800138a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800138e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001390:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001394:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001398:	4d08      	ldr	r5, [pc, #32]	@ (80013bc <TIM_OC4_SetConfig+0x48>)
 800139a:	42a8      	cmp	r0, r5
 800139c:	d003      	beq.n	80013a6 <TIM_OC4_SetConfig+0x32>
 800139e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80013a2:	42a8      	cmp	r0, r5
 80013a4:	d104      	bne.n	80013b0 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80013a6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80013a8:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80013ac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80013b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80013b4:	684a      	ldr	r2, [r1, #4]
 80013b6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013b8:	6203      	str	r3, [r0, #32]
}
 80013ba:	bd30      	pop	{r4, r5, pc}
 80013bc:	40010000 	.word	0x40010000

080013c0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013c0:	4a27      	ldr	r2, [pc, #156]	@ (8001460 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 80013c2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013c4:	4290      	cmp	r0, r2
 80013c6:	d012      	beq.n	80013ee <TIM_Base_SetConfig+0x2e>
 80013c8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80013cc:	d00f      	beq.n	80013ee <TIM_Base_SetConfig+0x2e>
 80013ce:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80013d2:	4290      	cmp	r0, r2
 80013d4:	d00b      	beq.n	80013ee <TIM_Base_SetConfig+0x2e>
 80013d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013da:	4290      	cmp	r0, r2
 80013dc:	d007      	beq.n	80013ee <TIM_Base_SetConfig+0x2e>
 80013de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013e2:	4290      	cmp	r0, r2
 80013e4:	d003      	beq.n	80013ee <TIM_Base_SetConfig+0x2e>
 80013e6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80013ea:	4290      	cmp	r0, r2
 80013ec:	d108      	bne.n	8001400 <TIM_Base_SetConfig+0x40>
    tmpcr1 |= Structure->CounterMode;
 80013ee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80013f4:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013f6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80013f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013fc:	4313      	orrs	r3, r2
 80013fe:	e016      	b.n	800142e <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001400:	4a18      	ldr	r2, [pc, #96]	@ (8001464 <TIM_Base_SetConfig+0xa4>)
 8001402:	4290      	cmp	r0, r2
 8001404:	d0f7      	beq.n	80013f6 <TIM_Base_SetConfig+0x36>
 8001406:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800140a:	4290      	cmp	r0, r2
 800140c:	d0f3      	beq.n	80013f6 <TIM_Base_SetConfig+0x36>
 800140e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001412:	4290      	cmp	r0, r2
 8001414:	d0ef      	beq.n	80013f6 <TIM_Base_SetConfig+0x36>
 8001416:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800141a:	4290      	cmp	r0, r2
 800141c:	d0eb      	beq.n	80013f6 <TIM_Base_SetConfig+0x36>
 800141e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001422:	4290      	cmp	r0, r2
 8001424:	d0e7      	beq.n	80013f6 <TIM_Base_SetConfig+0x36>
 8001426:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800142a:	4290      	cmp	r0, r2
 800142c:	d0e3      	beq.n	80013f6 <TIM_Base_SetConfig+0x36>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800142e:	694a      	ldr	r2, [r1, #20]
 8001430:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001434:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001436:	688a      	ldr	r2, [r1, #8]
 8001438:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800143a:	680a      	ldr	r2, [r1, #0]
 800143c:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800143e:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <TIM_Base_SetConfig+0xa0>)
 8001440:	4290      	cmp	r0, r2
 8001442:	d003      	beq.n	800144c <TIM_Base_SetConfig+0x8c>
 8001444:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001448:	4290      	cmp	r0, r2
 800144a:	d101      	bne.n	8001450 <TIM_Base_SetConfig+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
 800144c:	690a      	ldr	r2, [r1, #16]
 800144e:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001450:	6802      	ldr	r2, [r0, #0]
 8001452:	f042 0204 	orr.w	r2, r2, #4
 8001456:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8001458:	2201      	movs	r2, #1
 800145a:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 800145c:	6003      	str	r3, [r0, #0]
}
 800145e:	4770      	bx	lr
 8001460:	40010000 	.word	0x40010000
 8001464:	40014000 	.word	0x40014000

08001468 <HAL_TIM_PWM_Init>:
{
 8001468:	b510      	push	{r4, lr}
  if (htim == NULL)
 800146a:	4604      	mov	r4, r0
 800146c:	b330      	cbz	r0, 80014bc <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800146e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001472:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001476:	b91b      	cbnz	r3, 8001480 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001478:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800147c:	f7ff f9de 	bl	800083c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001480:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001482:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001484:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001488:	1d21      	adds	r1, r4, #4
 800148a:	f7ff ff99 	bl	80013c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800148e:	2301      	movs	r3, #1
 8001490:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8001494:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001496:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800149a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800149e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80014a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80014b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80014b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80014ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014bc:	2001      	movs	r0, #1
 80014be:	e7fc      	b.n	80014ba <HAL_TIM_PWM_Init+0x52>

080014c0 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80014c0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014c2:	6a02      	ldr	r2, [r0, #32]
 80014c4:	f022 0210 	bic.w	r2, r2, #16
{
 80014c8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014ca:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80014cc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80014ce:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80014d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80014d2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80014d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80014da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80014dc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80014e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80014e4:	4d0d      	ldr	r5, [pc, #52]	@ (800151c <TIM_OC2_SetConfig+0x5c>)
 80014e6:	42a8      	cmp	r0, r5
 80014e8:	d003      	beq.n	80014f2 <TIM_OC2_SetConfig+0x32>
 80014ea:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80014ee:	42a8      	cmp	r0, r5
 80014f0:	d10d      	bne.n	800150e <TIM_OC2_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80014f2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80014f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80014f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80014fc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001500:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001504:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800150a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800150e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001510:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001512:	684a      	ldr	r2, [r1, #4]
 8001514:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001516:	6203      	str	r3, [r0, #32]
}
 8001518:	bd70      	pop	{r4, r5, r6, pc}
 800151a:	bf00      	nop
 800151c:	40010000 	.word	0x40010000

08001520 <HAL_TIM_PWM_ConfigChannel>:
{
 8001520:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001522:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001526:	2b01      	cmp	r3, #1
{
 8001528:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800152a:	d04f      	beq.n	80015cc <HAL_TIM_PWM_ConfigChannel+0xac>
 800152c:	2001      	movs	r0, #1
  switch (Channel)
 800152e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001530:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8001534:	d03a      	beq.n	80015ac <HAL_TIM_PWM_ConfigChannel+0x8c>
 8001536:	d806      	bhi.n	8001546 <HAL_TIM_PWM_ConfigChannel+0x26>
 8001538:	b1ba      	cbz	r2, 800156a <HAL_TIM_PWM_ConfigChannel+0x4a>
 800153a:	2a04      	cmp	r2, #4
 800153c:	d026      	beq.n	800158c <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 800153e:	2300      	movs	r3, #0
 8001540:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001544:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001546:	2a0c      	cmp	r2, #12
 8001548:	d1f9      	bne.n	800153e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800154a:	6820      	ldr	r0, [r4, #0]
 800154c:	f7ff ff12 	bl	8001374 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001550:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001552:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001554:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001558:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800155a:	69c3      	ldr	r3, [r0, #28]
 800155c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001560:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001562:	69c3      	ldr	r3, [r0, #28]
 8001564:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001568:	e02e      	b.n	80015c8 <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800156a:	6820      	ldr	r0, [r4, #0]
 800156c:	f7ff fea8 	bl	80012c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001570:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001572:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800157a:	6983      	ldr	r3, [r0, #24]
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001582:	6983      	ldr	r3, [r0, #24]
 8001584:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001586:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2000      	movs	r0, #0
 800158a:	e7d8      	b.n	800153e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800158c:	6820      	ldr	r0, [r4, #0]
 800158e:	f7ff ff97 	bl	80014c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001592:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001594:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001596:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800159a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800159c:	6983      	ldr	r3, [r0, #24]
 800159e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015a2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015a4:	6983      	ldr	r3, [r0, #24]
 80015a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015aa:	e7ec      	b.n	8001586 <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015ac:	6820      	ldr	r0, [r4, #0]
 80015ae:	f7ff feb3 	bl	8001318 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015b2:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015b4:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015bc:	69c3      	ldr	r3, [r0, #28]
 80015be:	f023 0304 	bic.w	r3, r3, #4
 80015c2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015c4:	69c3      	ldr	r3, [r0, #28]
 80015c6:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80015c8:	61c3      	str	r3, [r0, #28]
      break;
 80015ca:	e7dd      	b.n	8001588 <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 80015cc:	2002      	movs	r0, #2
 80015ce:	e7b9      	b.n	8001544 <HAL_TIM_PWM_ConfigChannel+0x24>

080015d0 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80015d0:	6a03      	ldr	r3, [r0, #32]
{
 80015d2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80015d4:	f001 011f 	and.w	r1, r1, #31
 80015d8:	2401      	movs	r4, #1
 80015da:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80015dc:	ea23 0304 	bic.w	r3, r3, r4
 80015e0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80015e2:	6a03      	ldr	r3, [r0, #32]
 80015e4:	408a      	lsls	r2, r1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	6202      	str	r2, [r0, #32]
}
 80015ea:	bd10      	pop	{r4, pc}

080015ec <HAL_TIM_OC_Start>:
{
 80015ec:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80015ee:	b929      	cbnz	r1, 80015fc <HAL_TIM_OC_Start+0x10>
 80015f0:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d01f      	beq.n	8001638 <HAL_TIM_OC_Start+0x4c>
    return HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
 80015fa:	e035      	b.n	8001668 <HAL_TIM_OC_Start+0x7c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80015fc:	2904      	cmp	r1, #4
 80015fe:	d107      	bne.n	8001610 <HAL_TIM_OC_Start+0x24>
 8001600:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8001604:	2b01      	cmp	r3, #1
 8001606:	d1f7      	bne.n	80015f8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001608:	2302      	movs	r3, #2
 800160a:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 800160e:	e016      	b.n	800163e <HAL_TIM_OC_Start+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001610:	2908      	cmp	r1, #8
 8001612:	bf0c      	ite	eq
 8001614:	f890 3040 	ldrbeq.w	r3, [r0, #64]	@ 0x40
 8001618:	f890 3041 	ldrbne.w	r3, [r0, #65]	@ 0x41
 800161c:	3b01      	subs	r3, #1
 800161e:	bf18      	it	ne
 8001620:	2301      	movne	r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1e8      	bne.n	80015f8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001626:	2908      	cmp	r1, #8
 8001628:	f04f 0302 	mov.w	r3, #2
 800162c:	bf0c      	ite	eq
 800162e:	f880 3040 	strbeq.w	r3, [r0, #64]	@ 0x40
 8001632:	f880 3041 	strbne.w	r3, [r0, #65]	@ 0x41
 8001636:	e002      	b.n	800163e <HAL_TIM_OC_Start+0x52>
 8001638:	2302      	movs	r3, #2
 800163a:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800163e:	6800      	ldr	r0, [r0, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	f7ff ffc5 	bl	80015d0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <HAL_TIM_OC_Start+0xb4>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d003      	beq.n	8001654 <HAL_TIM_OC_Start+0x68>
 800164c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001650:	4298      	cmp	r0, r3
 8001652:	d10a      	bne.n	800166a <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8001654:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800165a:	6443      	str	r3, [r0, #68]	@ 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800165c:	6883      	ldr	r3, [r0, #8]
 800165e:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001662:	2b06      	cmp	r3, #6
 8001664:	d117      	bne.n	8001696 <HAL_TIM_OC_Start+0xaa>
  return HAL_OK;
 8001666:	2000      	movs	r0, #0
}
 8001668:	bd08      	pop	{r3, pc}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800166a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800166e:	d0f5      	beq.n	800165c <HAL_TIM_OC_Start+0x70>
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_TIM_OC_Start+0xb8>)
 8001672:	4298      	cmp	r0, r3
 8001674:	d0f2      	beq.n	800165c <HAL_TIM_OC_Start+0x70>
 8001676:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800167a:	4298      	cmp	r0, r3
 800167c:	d0ee      	beq.n	800165c <HAL_TIM_OC_Start+0x70>
 800167e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001682:	4298      	cmp	r0, r3
 8001684:	d0ea      	beq.n	800165c <HAL_TIM_OC_Start+0x70>
 8001686:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 800168a:	4298      	cmp	r0, r3
 800168c:	d0e6      	beq.n	800165c <HAL_TIM_OC_Start+0x70>
 800168e:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8001692:	4298      	cmp	r0, r3
 8001694:	d0e2      	beq.n	800165c <HAL_TIM_OC_Start+0x70>
      __HAL_TIM_ENABLE(htim);
 8001696:	6803      	ldr	r3, [r0, #0]
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6003      	str	r3, [r0, #0]
 800169e:	e7e2      	b.n	8001666 <HAL_TIM_OC_Start+0x7a>
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40000400 	.word	0x40000400

080016a8 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80016a8:	f7ff bfa0 	b.w	80015ec <HAL_TIM_OC_Start>

080016ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80016ac:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80016ae:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80016b2:	2b01      	cmp	r3, #1
{
 80016b4:	4602      	mov	r2, r0
 80016b6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80016ba:	d032      	beq.n	8001722 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80016bc:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80016be:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80016c2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016c4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80016c6:	6898      	ldr	r0, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80016c8:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016cc:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80016ce:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016d0:	4c14      	ldr	r4, [pc, #80]	@ (8001724 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80016d2:	42a3      	cmp	r3, r4
 80016d4:	d01a      	beq.n	800170c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80016d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016da:	d017      	beq.n	800170c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80016dc:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 80016e0:	42a3      	cmp	r3, r4
 80016e2:	d013      	beq.n	800170c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80016e4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80016e8:	42a3      	cmp	r3, r4
 80016ea:	d00f      	beq.n	800170c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80016ec:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80016f0:	42a3      	cmp	r3, r4
 80016f2:	d00b      	beq.n	800170c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80016f4:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 80016f8:	42a3      	cmp	r3, r4
 80016fa:	d007      	beq.n	800170c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80016fc:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 8001700:	42a3      	cmp	r3, r4
 8001702:	d003      	beq.n	800170c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8001704:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8001708:	42a3      	cmp	r3, r4
 800170a:	d104      	bne.n	8001716 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800170c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800170e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001712:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001714:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001716:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001718:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800171a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800171e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8001722:	bd30      	pop	{r4, r5, pc}
 8001724:	40010000 	.word	0x40010000

08001728 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001728:	6802      	ldr	r2, [r0, #0]
 800172a:	68c1      	ldr	r1, [r0, #12]
{
 800172c:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800172e:	6913      	ldr	r3, [r2, #16]
 8001730:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001734:	430b      	orrs	r3, r1
 8001736:	6113      	str	r3, [r2, #16]
{
 8001738:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800173a:	6883      	ldr	r3, [r0, #8]
 800173c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800173e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001740:	4303      	orrs	r3, r0
 8001742:	6968      	ldr	r0, [r5, #20]
 8001744:	4303      	orrs	r3, r0
 8001746:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001748:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 800174c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001750:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001752:	430b      	orrs	r3, r1
 8001754:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001756:	6953      	ldr	r3, [r2, #20]
 8001758:	69a9      	ldr	r1, [r5, #24]
 800175a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800175e:	430b      	orrs	r3, r1
 8001760:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001762:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <UART_SetConfig+0xb8>)
 8001764:	429a      	cmp	r2, r3
 8001766:	d003      	beq.n	8001770 <UART_SetConfig+0x48>
 8001768:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800176c:	429a      	cmp	r2, r3
 800176e:	d124      	bne.n	80017ba <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001770:	f7ff fb80 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001774:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001776:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001778:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800177c:	e9d5 4300 	ldrd	r4, r3, [r5]
 8001780:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001784:	d11c      	bne.n	80017c0 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001786:	18da      	adds	r2, r3, r3
 8001788:	f04f 0500 	mov.w	r5, #0
 800178c:	eb45 0305 	adc.w	r3, r5, r5
 8001790:	f7fe fd38 	bl	8000204 <__aeabi_uldivmod>
 8001794:	2264      	movs	r2, #100	@ 0x64
 8001796:	fbb0 f1f2 	udiv	r1, r0, r2
 800179a:	fb02 0311 	mls	r3, r2, r1, r0
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	3332      	adds	r3, #50	@ 0x32
 80017a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80017a6:	f003 0207 	and.w	r2, r3, #7
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80017b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80017b4:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017b6:	60a3      	str	r3, [r4, #8]
  }
}
 80017b8:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80017ba:	f7ff fb4b 	bl	8000e54 <HAL_RCC_GetPCLK1Freq>
 80017be:	e7d9      	b.n	8001774 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017c0:	009a      	lsls	r2, r3, #2
 80017c2:	0f9b      	lsrs	r3, r3, #30
 80017c4:	f7fe fd1e 	bl	8000204 <__aeabi_uldivmod>
 80017c8:	2264      	movs	r2, #100	@ 0x64
 80017ca:	fbb0 f1f2 	udiv	r1, r0, r2
 80017ce:	fb02 0311 	mls	r3, r2, r1, r0
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	3332      	adds	r3, #50	@ 0x32
 80017d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80017da:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80017de:	e7ea      	b.n	80017b6 <UART_SetConfig+0x8e>
 80017e0:	40011000 	.word	0x40011000

080017e4 <HAL_UART_Init>:
{
 80017e4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80017e6:	4604      	mov	r4, r0
 80017e8:	b348      	cbz	r0, 800183e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80017ea:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80017ee:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80017f2:	b91b      	cbnz	r3, 80017fc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80017f4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80017f8:	f7ff f89e 	bl	8000938 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80017fc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80017fe:	2324      	movs	r3, #36	@ 0x24
 8001800:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001804:	68d3      	ldr	r3, [r2, #12]
 8001806:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800180a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800180c:	4620      	mov	r0, r4
 800180e:	f7ff ff8b 	bl	8001728 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800181a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001822:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800182a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800182c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800182e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001830:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001832:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001836:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800183a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800183c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800183e:	2001      	movs	r0, #1
 8001840:	e7fc      	b.n	800183c <HAL_UART_Init+0x58>

08001842 <memset>:
 8001842:	4402      	add	r2, r0
 8001844:	4603      	mov	r3, r0
 8001846:	4293      	cmp	r3, r2
 8001848:	d100      	bne.n	800184c <memset+0xa>
 800184a:	4770      	bx	lr
 800184c:	f803 1b01 	strb.w	r1, [r3], #1
 8001850:	e7f9      	b.n	8001846 <memset+0x4>
	...

08001854 <__libc_init_array>:
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	4d0d      	ldr	r5, [pc, #52]	@ (800188c <__libc_init_array+0x38>)
 8001858:	4c0d      	ldr	r4, [pc, #52]	@ (8001890 <__libc_init_array+0x3c>)
 800185a:	1b64      	subs	r4, r4, r5
 800185c:	10a4      	asrs	r4, r4, #2
 800185e:	2600      	movs	r6, #0
 8001860:	42a6      	cmp	r6, r4
 8001862:	d109      	bne.n	8001878 <__libc_init_array+0x24>
 8001864:	4d0b      	ldr	r5, [pc, #44]	@ (8001894 <__libc_init_array+0x40>)
 8001866:	4c0c      	ldr	r4, [pc, #48]	@ (8001898 <__libc_init_array+0x44>)
 8001868:	f000 f818 	bl	800189c <_init>
 800186c:	1b64      	subs	r4, r4, r5
 800186e:	10a4      	asrs	r4, r4, #2
 8001870:	2600      	movs	r6, #0
 8001872:	42a6      	cmp	r6, r4
 8001874:	d105      	bne.n	8001882 <__libc_init_array+0x2e>
 8001876:	bd70      	pop	{r4, r5, r6, pc}
 8001878:	f855 3b04 	ldr.w	r3, [r5], #4
 800187c:	4798      	blx	r3
 800187e:	3601      	adds	r6, #1
 8001880:	e7ee      	b.n	8001860 <__libc_init_array+0xc>
 8001882:	f855 3b04 	ldr.w	r3, [r5], #4
 8001886:	4798      	blx	r3
 8001888:	3601      	adds	r6, #1
 800188a:	e7f2      	b.n	8001872 <__libc_init_array+0x1e>
 800188c:	080018d4 	.word	0x080018d4
 8001890:	080018d4 	.word	0x080018d4
 8001894:	080018d4 	.word	0x080018d4
 8001898:	080018d8 	.word	0x080018d8

0800189c <_init>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr

080018a8 <_fini>:
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	bf00      	nop
 80018ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ae:	bc08      	pop	{r3}
 80018b0:	469e      	mov	lr, r3
 80018b2:	4770      	bx	lr
