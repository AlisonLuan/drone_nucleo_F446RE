
drone_nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001958  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001b1c  08001b1c  00002b1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b5c  08001b5c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001b5c  08001b5c  00002b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b64  08001b64  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b64  08001b64  00002b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b68  08001b68  00002b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001b6c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08001b78  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08001b78  00003124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001012c  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff0  00000000  00000000  00013168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000078e3  00000000  00000000  00015158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0001ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a62  00000000  00000000  0001d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002187a  00000000  00000000  0001dfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bec  00000000  00000000  0003f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0409  00000000  00000000  00050448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120851  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d00  00000000  00000000  00120894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00122594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001b04 	.word	0x08001b04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001b04 	.word	0x08001b04

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <Debug_Send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Send(const char *msg)
{
 8000540:	b510      	push	{r4, lr}
 8000542:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000544:	f7ff fe5e 	bl	8000204 <strlen>
 8000548:	4621      	mov	r1, r4
 800054a:	b282      	uxth	r2, r0
}
 800054c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000550:	4802      	ldr	r0, [pc, #8]	@ (800055c <Debug_Send+0x1c>)
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	f001 ba5a 	b.w	8001a0e <HAL_UART_Transmit>
 800055a:	bf00      	nop
 800055c:	20000048 	.word	0x20000048

08000560 <SoftStartPWM>:
#define PWM_MAX_STEP 500  // passo máximo permitido por ciclo
#define Kp 0.2f            // ganho proporcional (ajuste conforme necessário)

void SoftStartPWM(uint32_t *current, uint32_t target)
{
  int32_t error = (int32_t)target - (int32_t)(*current);
 8000560:	6803      	ldr	r3, [r0, #0]
  int32_t step = (int32_t)(Kp * error);
 8000562:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80005ac <SoftStartPWM+0x4c>
  int32_t error = (int32_t)target - (int32_t)(*current);
 8000566:	1aca      	subs	r2, r1, r3
 8000568:	ee07 2a90 	vmov	s15, r2
  int32_t step = (int32_t)(Kp * error);
 800056c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8000570:	b510      	push	{r4, lr}
  int32_t step = (int32_t)(Kp * error);
 8000572:	ee67 7a87 	vmul.f32	s15, s15, s14

  // saturação do passo
  if (step > PWM_MAX_STEP) step = PWM_MAX_STEP;
  else if (step < -PWM_MAX_STEP) step = -PWM_MAX_STEP;
 8000576:	4c0e      	ldr	r4, [pc, #56]	@ (80005b0 <SoftStartPWM+0x50>)
  int32_t step = (int32_t)(Kp * error);
 8000578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800057c:	ee17 2a90 	vmov	r2, s15
  else if (step < -PWM_MAX_STEP) step = -PWM_MAX_STEP;
 8000580:	4294      	cmp	r4, r2
 8000582:	bfb8      	it	lt
 8000584:	4614      	movlt	r4, r2

  *current += step;
 8000586:	f5b4 7ffa 	cmp.w	r4, #500	@ 0x1f4
 800058a:	bfd4      	ite	le
 800058c:	191b      	addle	r3, r3, r4
 800058e:	f503 73fa 	addgt.w	r3, r3, #500	@ 0x1f4

  // proteção contra overshoot (caso o passo cause ultrapassagem)
  if ((step > 0 && *current > target) || (step < 0 && *current < target)) {
 8000592:	2a00      	cmp	r2, #0
 8000594:	dd04      	ble.n	80005a0 <SoftStartPWM+0x40>
 8000596:	428b      	cmp	r3, r1
 8000598:	bf28      	it	cs
 800059a:	460b      	movcs	r3, r1
  *current += step;
 800059c:	6003      	str	r3, [r0, #0]
    *current = target;
  }
}
 800059e:	bd10      	pop	{r4, pc}
  if ((step > 0 && *current > target) || (step < 0 && *current < target)) {
 80005a0:	d0fc      	beq.n	800059c <SoftStartPWM+0x3c>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	bf38      	it	cc
 80005a6:	460b      	movcc	r3, r1
 80005a8:	e7f8      	b.n	800059c <SoftStartPWM+0x3c>
 80005aa:	bf00      	nop
 80005ac:	3e4ccccd 	.word	0x3e4ccccd
 80005b0:	fffffe0c 	.word	0xfffffe0c

080005b4 <UpdatePWM>:


void UpdatePWM(void)
{
 80005b4:	b570      	push	{r4, r5, r6, lr}
  SoftStartPWM((uint32_t*)&PWM_D9, PWM_D9_Target);
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <UpdatePWM+0x4c>)
 80005b8:	4e12      	ldr	r6, [pc, #72]	@ (8000604 <UpdatePWM+0x50>)
 80005ba:	6819      	ldr	r1, [r3, #0]
  SoftStartPWM((uint32_t*)&PWM_D6, PWM_D6_Target);
 80005bc:	4d12      	ldr	r5, [pc, #72]	@ (8000608 <UpdatePWM+0x54>)
  SoftStartPWM((uint32_t*)&PWM_D5, PWM_D5_Target);
 80005be:	4c13      	ldr	r4, [pc, #76]	@ (800060c <UpdatePWM+0x58>)
  SoftStartPWM((uint32_t*)&PWM_D9, PWM_D9_Target);
 80005c0:	4630      	mov	r0, r6
 80005c2:	f7ff ffcd 	bl	8000560 <SoftStartPWM>
  SoftStartPWM((uint32_t*)&PWM_D6, PWM_D6_Target);
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <UpdatePWM+0x5c>)
 80005c8:	4628      	mov	r0, r5
 80005ca:	6819      	ldr	r1, [r3, #0]
 80005cc:	f7ff ffc8 	bl	8000560 <SoftStartPWM>
  SoftStartPWM((uint32_t*)&PWM_D5, PWM_D5_Target);
 80005d0:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <UpdatePWM+0x60>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	6819      	ldr	r1, [r3, #0]
 80005d6:	f7ff ffc3 	bl	8000560 <SoftStartPWM>
  SoftStartPWM((uint32_t*)&PWM_D3, PWM_D3_Target);
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <UpdatePWM+0x64>)
 80005dc:	480f      	ldr	r0, [pc, #60]	@ (800061c <UpdatePWM+0x68>)
 80005de:	6819      	ldr	r1, [r3, #0]
 80005e0:	f7ff ffbe 	bl	8000560 <SoftStartPWM>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_D9);
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <UpdatePWM+0x6c>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	6833      	ldr	r3, [r6, #0]
 80005ea:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM_D6);
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <UpdatePWM+0x70>)
 80005ee:	6829      	ldr	r1, [r5, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	63d9      	str	r1, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_D5);
 80005f4:	6821      	ldr	r1, [r4, #0]
 80005f6:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_D3);
 80005f8:	6802      	ldr	r2, [r0, #0]
 80005fa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80005fc:	bd70      	pop	{r4, r5, r6, pc}
 80005fe:	bf00      	nop
 8000600:	20000034 	.word	0x20000034
 8000604:	20000044 	.word	0x20000044
 8000608:	20000040 	.word	0x20000040
 800060c:	2000003c 	.word	0x2000003c
 8000610:	20000030 	.word	0x20000030
 8000614:	2000002c 	.word	0x2000002c
 8000618:	20000028 	.word	0x20000028
 800061c:	20000038 	.word	0x20000038
 8000620:	20000090 	.word	0x20000090
 8000624:	200000d8 	.word	0x200000d8

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Debug_Send("Error_Handler\r\n");
 800062a:	4802      	ldr	r0, [pc, #8]	@ (8000634 <Error_Handler+0xc>)
 800062c:	f7ff ff88 	bl	8000540 <Debug_Send>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
  __disable_irq();
  while (1)
 8000632:	e7fe      	b.n	8000632 <Error_Handler+0xa>
 8000634:	08001b1c 	.word	0x08001b1c

08000638 <SystemClock_Config>:
{
 8000638:	b510      	push	{r4, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063c:	2214      	movs	r2, #20
 800063e:	2100      	movs	r1, #0
 8000640:	a808      	add	r0, sp, #32
 8000642:	f001 fa32 	bl	8001aaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000646:	2214      	movs	r2, #20
 8000648:	2100      	movs	r1, #0
 800064a:	a802      	add	r0, sp, #8
 800064c:	f001 fa2d 	bl	8001aaa <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <SystemClock_Config+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	9200      	str	r2, [sp, #0]
 8000656:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000658:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800065c:	6419      	str	r1, [r3, #64]	@ 0x40
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000660:	491c      	ldr	r1, [pc, #112]	@ (80006d4 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066a:	9201      	str	r2, [sp, #4]
 800066c:	680b      	ldr	r3, [r1, #0]
 800066e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	600b      	str	r3, [r1, #0]
 8000678:	680b      	ldr	r3, [r1, #0]
 800067a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2101      	movs	r1, #1
 8000684:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000686:	f44f 70a8 	mov.w	r0, #336	@ 0x150
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 800068e:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000690:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000692:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000694:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069a:	e9cd 420d 	strd	r4, r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069e:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f000 fcc4 	bl	8001030 <HAL_RCC_OscConfig>
 80006a8:	b108      	cbz	r0, 80006ae <SystemClock_Config+0x76>
    Error_Handler();
 80006aa:	f7ff ffbd 	bl	8000628 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	4621      	mov	r1, r4
 80006c0:	a802      	add	r0, sp, #8
 80006c2:	f000 fbb3 	bl	8000e2c <HAL_RCC_ClockConfig>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d1ef      	bne.n	80006aa <SystemClock_Config+0x72>
}
 80006ca:	b014      	add	sp, #80	@ 0x50
 80006cc:	bd10      	pop	{r4, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <main>:
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	@ 0x58
  HAL_Init();
 80006dc:	f000 fa2e 	bl	8000b3c <HAL_Init>
  SystemClock_Config();
 80006e0:	f7ff ffaa 	bl	8000638 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	2214      	movs	r2, #20
 80006e6:	2100      	movs	r1, #0
 80006e8:	a80f      	add	r0, sp, #60	@ 0x3c
 80006ea:	f001 f9de 	bl	8001aaa <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2400      	movs	r4, #0
 80006f0:	4b6f      	ldr	r3, [pc, #444]	@ (80008b0 <main+0x1d8>)
 80006f2:	9400      	str	r4, [sp, #0]
 80006f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006f6:	486f      	ldr	r0, [pc, #444]	@ (80008b4 <main+0x1dc>)
  huart2.Init.BaudRate = 115200;
 80006f8:	4d6f      	ldr	r5, [pc, #444]	@ (80008b8 <main+0x1e0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	f042 0204 	orr.w	r2, r2, #4
 80006fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000702:	f002 0204 	and.w	r2, r2, #4
 8000706:	9200      	str	r2, [sp, #0]
 8000708:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	9401      	str	r4, [sp, #4]
 800070c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800070e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000712:	631a      	str	r2, [r3, #48]	@ 0x30
 8000714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000716:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800071a:	9201      	str	r2, [sp, #4]
 800071c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	9402      	str	r4, [sp, #8]
 8000720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000722:	f042 0201 	orr.w	r2, r2, #1
 8000726:	631a      	str	r2, [r3, #48]	@ 0x30
 8000728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800072a:	f002 0201 	and.w	r2, r2, #1
 800072e:	9202      	str	r2, [sp, #8]
 8000730:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	9403      	str	r4, [sp, #12]
 8000734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000736:	f042 0202 	orr.w	r2, r2, #2
 800073a:	631a      	str	r2, [r3, #48]	@ 0x30
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074a:	f000 fb61 	bl	8000e10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000752:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	4859      	ldr	r0, [pc, #356]	@ (80008bc <main+0x1e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075a:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075c:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f000 fa84 	bl	8000c6c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	2120      	movs	r1, #32
 8000768:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800076c:	4851      	ldr	r0, [pc, #324]	@ (80008b4 <main+0x1dc>)
 800076e:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f000 fa7a 	bl	8000c6c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000778:	4851      	ldr	r0, [pc, #324]	@ (80008c0 <main+0x1e8>)
  huart2.Init.BaudRate = 115200;
 800077a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800077e:	e9c0 5300 	strd	r5, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000782:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000788:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078c:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000790:	f001 f90e 	bl	80019b0 <HAL_UART_Init>
 8000794:	4604      	mov	r4, r0
 8000796:	b108      	cbz	r0, 800079c <main+0xc4>
    Error_Handler();
 8000798:	f7ff ff46 	bl	8000628 <Error_Handler>
  htim2.Instance = TIM2;
 800079c:	4d49      	ldr	r5, [pc, #292]	@ (80008c4 <main+0x1ec>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	e9cd 0006 	strd	r0, r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	4601      	mov	r1, r0
 80007a4:	221c      	movs	r2, #28
 80007a6:	a80f      	add	r0, sp, #60	@ 0x3c
 80007a8:	f001 f97f 	bl	8001aaa <memset>
  htim2.Instance = TIM2;
 80007ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  htim2.Init.Prescaler = 0;
 80007b0:	e9c5 3400 	strd	r3, r4, [r5]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007b4:	4628      	mov	r0, r5
  htim2.Init.Period = 4294967295;
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ba:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007c2:	f000 fed7 	bl	8001574 <HAL_TIM_PWM_Init>
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d1e6      	bne.n	8000798 <main+0xc0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ca:	e9cd 0006 	strd	r0, r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ce:	a906      	add	r1, sp, #24
 80007d0:	4628      	mov	r0, r5
 80007d2:	f000 fff1 	bl	80017b8 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1de      	bne.n	8000798 <main+0xc0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007da:	2760      	movs	r7, #96	@ 0x60
  sConfigOC.Pulse = 0;
 80007dc:	e9cd 700f 	strd	r7, r0, [sp, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e0:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e2:	9013      	str	r0, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e4:	2204      	movs	r2, #4
 80007e6:	a90f      	add	r1, sp, #60	@ 0x3c
 80007e8:	4628      	mov	r0, r5
 80007ea:	f000 ff1f 	bl	800162c <HAL_TIM_PWM_ConfigChannel>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d1d2      	bne.n	8000798 <main+0xc0>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007f2:	2208      	movs	r2, #8
 80007f4:	a90f      	add	r1, sp, #60	@ 0x3c
 80007f6:	4628      	mov	r0, r5
 80007f8:	f000 ff18 	bl	800162c <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4606      	mov	r6, r0
 80007fe:	2800      	cmp	r0, #0
 8000800:	d1ca      	bne.n	8000798 <main+0xc0>
  HAL_TIM_MspPostInit(&htim2);
 8000802:	4628      	mov	r0, r5
 8000804:	f000 f8ac 	bl	8000960 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000808:	221c      	movs	r2, #28
 800080a:	4631      	mov	r1, r6
 800080c:	a808      	add	r0, sp, #32
  htim3.Instance = TIM3;
 800080e:	4c2e      	ldr	r4, [pc, #184]	@ (80008c8 <main+0x1f0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	e9cd 6604 	strd	r6, r6, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000814:	f001 f949 	bl	8001aaa <memset>
  htim3.Instance = TIM3;
 8000818:	4b2c      	ldr	r3, [pc, #176]	@ (80008cc <main+0x1f4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	60a6      	str	r6, [r4, #8]
  htim3.Init.Prescaler = 0;
 800081c:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000820:	4620      	mov	r0, r4
  htim3.Init.Period = 65535;
 8000822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	e9c4 3603 	strd	r3, r6, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800082c:	f000 fea2 	bl	8001574 <HAL_TIM_PWM_Init>
 8000830:	2800      	cmp	r0, #0
 8000832:	d1b1      	bne.n	8000798 <main+0xc0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	e9cd 0004 	strd	r0, r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000838:	a904      	add	r1, sp, #16
 800083a:	4620      	mov	r0, r4
 800083c:	f000 ffbc 	bl	80017b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4602      	mov	r2, r0
 8000842:	2800      	cmp	r0, #0
 8000844:	d1a8      	bne.n	8000798 <main+0xc0>
  sConfigOC.Pulse = 0;
 8000846:	e9cd 7008 	strd	r7, r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084a:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084e:	a908      	add	r1, sp, #32
 8000850:	4620      	mov	r0, r4
 8000852:	f000 feeb 	bl	800162c <HAL_TIM_PWM_ConfigChannel>
 8000856:	2800      	cmp	r0, #0
 8000858:	d19e      	bne.n	8000798 <main+0xc0>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800085a:	2204      	movs	r2, #4
 800085c:	a908      	add	r1, sp, #32
 800085e:	4620      	mov	r0, r4
 8000860:	f000 fee4 	bl	800162c <HAL_TIM_PWM_ConfigChannel>
 8000864:	4606      	mov	r6, r0
 8000866:	2800      	cmp	r0, #0
 8000868:	d196      	bne.n	8000798 <main+0xc0>
  HAL_TIM_MspPostInit(&htim3);
 800086a:	4620      	mov	r0, r4
 800086c:	f000 f878 	bl	8000960 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000870:	2104      	movs	r1, #4
 8000872:	4628      	mov	r0, r5
 8000874:	f000 ff9e 	bl	80017b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000878:	2108      	movs	r1, #8
 800087a:	4628      	mov	r0, r5
 800087c:	f000 ff9a 	bl	80017b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000880:	4631      	mov	r1, r6
 8000882:	4620      	mov	r0, r4
 8000884:	f000 ff96 	bl	80017b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000888:	2104      	movs	r1, #4
 800088a:	4620      	mov	r0, r4
 800088c:	f000 ff92 	bl	80017b4 <HAL_TIM_PWM_Start>
  Debug_Send("System Init Complete\r\n");
 8000890:	480f      	ldr	r0, [pc, #60]	@ (80008d0 <main+0x1f8>)
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000892:	4c08      	ldr	r4, [pc, #32]	@ (80008b4 <main+0x1dc>)
  Debug_Send("System Init Complete\r\n");
 8000894:	f7ff fe54 	bl	8000540 <Debug_Send>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000898:	2120      	movs	r1, #32
 800089a:	4620      	mov	r0, r4
 800089c:	f000 fabd 	bl	8000e1a <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008a4:	f000 f976 	bl	8000b94 <HAL_Delay>
    UpdatePWM();
 80008a8:	f7ff fe84 	bl	80005b4 <UpdatePWM>
  while (1)
 80008ac:	e7f4      	b.n	8000898 <main+0x1c0>
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40020800 	.word	0x40020800
 80008c0:	20000048 	.word	0x20000048
 80008c4:	200000d8 	.word	0x200000d8
 80008c8:	20000090 	.word	0x20000090
 80008cc:	40000400 	.word	0x40000400
 80008d0:	08001b2c 	.word	0x08001b2c

080008d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <HAL_MspInit+0x38>)
 80008d8:	2100      	movs	r1, #0
 80008da:	9100      	str	r1, [sp, #0]
 80008dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80008e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80008e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008e6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80008ea:	9200      	str	r2, [sp, #0]
 80008ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	9101      	str	r1, [sp, #4]
 80008f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008f2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80008f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000902:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000904:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000906:	f000 b959 	b.w	8000bbc <HAL_NVIC_SetPriorityGrouping>
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_TIM_PWM_MspInit>:
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8000910:	6803      	ldr	r3, [r0, #0]
 8000912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 8000916:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8000918:	d10d      	bne.n	8000936 <HAL_TIM_PWM_MspInit+0x26>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <HAL_TIM_PWM_MspInit+0x48>)
 8000920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000922:	f042 0201 	orr.w	r2, r2, #1
 8000926:	641a      	str	r2, [r3, #64]	@ 0x40
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	9b00      	ldr	r3, [sp, #0]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000932:	b002      	add	sp, #8
 8000934:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM3)
 8000936:	4a09      	ldr	r2, [pc, #36]	@ (800095c <HAL_TIM_PWM_MspInit+0x4c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d1fa      	bne.n	8000932 <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_TIM_PWM_MspInit+0x48>)
 8000942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000944:	f042 0202 	orr.w	r2, r2, #2
 8000948:	641a      	str	r2, [r3, #64]	@ 0x40
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	9b01      	ldr	r3, [sp, #4]
}
 8000954:	e7ed      	b.n	8000932 <HAL_TIM_PWM_MspInit+0x22>
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40000400 	.word	0x40000400

08000960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000960:	b530      	push	{r4, r5, lr}
 8000962:	4604      	mov	r4, r0
 8000964:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	2214      	movs	r2, #20
 8000968:	2100      	movs	r1, #0
 800096a:	a803      	add	r0, sp, #12
 800096c:	f001 f89d 	bl	8001aaa <memset>
  if(htim->Instance==TIM2)
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000976:	d118      	bne.n	80009aa <HAL_TIM_MspPostInit+0x4a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <HAL_TIM_MspPostInit+0x9c>)
 800097e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000980:	f042 0202 	orr.w	r2, r2, #2
 8000984:	631a      	str	r2, [r3, #48]	@ 0x30
 8000986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	9b00      	ldr	r3, [sp, #0]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8000994:	2302      	movs	r3, #2
 8000996:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800099a:	2301      	movs	r3, #1
 800099c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <HAL_TIM_MspPostInit+0xa0>)
 80009a0:	a903      	add	r1, sp, #12
 80009a2:	f000 f963 	bl	8000c6c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009a6:	b009      	add	sp, #36	@ 0x24
 80009a8:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM3)
 80009aa:	4a16      	ldr	r2, [pc, #88]	@ (8000a04 <HAL_TIM_MspPostInit+0xa4>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d1fa      	bne.n	80009a6 <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_TIM_MspPostInit+0x9c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	4815      	ldr	r0, [pc, #84]	@ (8000a08 <HAL_TIM_MspPostInit+0xa8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b4:	2500      	movs	r5, #0
 80009b6:	9501      	str	r5, [sp, #4]
 80009b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009ba:	f042 0204 	orr.w	r2, r2, #4
 80009be:	631a      	str	r2, [r3, #48]	@ 0x30
 80009c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009c2:	f002 0204 	and.w	r2, r2, #4
 80009c6:	9201      	str	r2, [sp, #4]
 80009c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	9502      	str	r5, [sp, #8]
 80009cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009ce:	f042 0202 	orr.w	r2, r2, #2
 80009d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009e0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	f000 f93f 	bl	8000c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ee:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	e9cd 5505 	strd	r5, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009f8:	9407      	str	r4, [sp, #28]
 80009fa:	e7d0      	b.n	800099e <HAL_TIM_MspPostInit+0x3e>
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40000400 	.word	0x40000400
 8000a08:	40020800 	.word	0x40020800

08000a0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b510      	push	{r4, lr}
 8000a0e:	4604      	mov	r4, r0
 8000a10:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	2214      	movs	r2, #20
 8000a14:	2100      	movs	r1, #0
 8000a16:	a803      	add	r0, sp, #12
 8000a18:	f001 f847 	bl	8001aaa <memset>
  if(huart->Instance==USART2)
 8000a1c:	6822      	ldr	r2, [r4, #0]
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <HAL_UART_MspInit+0x64>)
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d122      	bne.n	8000a6a <HAL_UART_MspInit+0x5e>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a24:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8000a28:	2100      	movs	r1, #0
 8000a2a:	9101      	str	r1, [sp, #4]
 8000a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	4811      	ldr	r0, [pc, #68]	@ (8000a74 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a30:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000a34:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a38:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000a3c:	9201      	str	r2, [sp, #4]
 8000a3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	9102      	str	r1, [sp, #8]
 8000a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a44:	f042 0201 	orr.w	r2, r2, #1
 8000a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	220c      	movs	r2, #12
 8000a56:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a58:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	a903      	add	r1, sp, #12
 8000a66:	f000 f901 	bl	8000c6c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a6a:	b008      	add	sp, #32
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40020000 	.word	0x40020000

08000a78 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler>

08000a7a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler>

08000a7c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler>

08000a7e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler>

08000a80 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler>

08000a82 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 b872 	b.w	8000b70 <HAL_IncTick>

08000a8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4a03      	ldr	r2, [pc, #12]	@ (8000a9c <SystemInit+0x10>)
 8000a8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000a92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a96:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aa4:	f7ff fff2 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f000 fff5 	bl	8001abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fe01 	bl	80006d8 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae4:	08001b6c 	.word	0x08001b6c
  ldr r2, =_sbss
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aec:	20000124 	.word	0x20000124

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_InitTick+0x3c>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b02:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <HAL_InitTick+0x40>)
{
 8000b04:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b06:	6810      	ldr	r0, [r2, #0]
 8000b08:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b0c:	f000 f89a 	bl	8000c44 <HAL_SYSTICK_Config>
 8000b10:	4604      	mov	r4, r0
 8000b12:	b958      	cbnz	r0, 8000b2c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b14:	2d0f      	cmp	r5, #15
 8000b16:	d809      	bhi.n	8000b2c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	4602      	mov	r2, r0
 8000b1a:	4629      	mov	r1, r5
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 f85e 	bl	8000be0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <HAL_InitTick+0x44>)
 8000b26:	4620      	mov	r0, r4
 8000b28:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b2a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	e7fc      	b.n	8000b2a <HAL_InitTick+0x36>
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008

08000b3c <HAL_Init>:
{
 8000b3c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_Init+0x30>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b46:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b56:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f82f 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff ffc8 	bl	8000af4 <HAL_InitTick>
  HAL_MspInit();
 8000b64:	f7ff feb6 	bl	80008d4 <HAL_MspInit>
}
 8000b68:	2000      	movs	r0, #0
 8000b6a:	bd08      	pop	{r3, pc}
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b70:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <HAL_IncTick+0x10>)
 8000b72:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <HAL_IncTick+0x14>)
 8000b74:	6811      	ldr	r1, [r2, #0]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	440b      	add	r3, r1
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000120 	.word	0x20000120
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b88:	4b01      	ldr	r3, [pc, #4]	@ (8000b90 <HAL_GetTick+0x8>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000120 	.word	0x20000120

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b538      	push	{r3, r4, r5, lr}
 8000b96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff fff6 	bl	8000b88 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9e:	bf1c      	itt	ne
 8000ba0:	4b05      	ldrne	r3, [pc, #20]	@ (8000bb8 <HAL_Delay+0x24>)
 8000ba2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	bf18      	it	ne
 8000ba8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000baa:	f7ff ffed 	bl	8000b88 <HAL_GetTick>
 8000bae:	1b43      	subs	r3, r0, r5
 8000bb0:	42a3      	cmp	r3, r4
 8000bb2:	d3fa      	bcc.n	8000baa <HAL_Delay+0x16>
  {
  }
}
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4907      	ldr	r1, [pc, #28]	@ (8000bdc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bbe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bcc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000bd8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be2:	b530      	push	{r4, r5, lr}
 8000be4:	68dc      	ldr	r4, [r3, #12]
 8000be6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	bf28      	it	cs
 8000bf4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfc:	bf8c      	ite	hi
 8000bfe:	3c03      	subhi	r4, #3
 8000c00:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c02:	fa05 f303 	lsl.w	r3, r5, r3
 8000c06:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0a:	40a5      	lsls	r5, r4
 8000c0c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000c12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	bfac      	ite	ge
 8000c1a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	4a08      	ldrlt	r2, [pc, #32]	@ (8000c40 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	bfb8      	it	lt
 8000c26:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	bfaa      	itet	ge
 8000c2e:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c38:	bd30      	pop	{r4, r5, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00
 8000c40:	e000ed14 	.word	0xe000ed14

08000c44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	3801      	subs	r0, #1
 8000c46:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c4a:	d20b      	bcs.n	8000c64 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	21f0      	movs	r1, #240	@ 0xf0
 8000c56:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c60:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c62:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c64:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c70:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8000e0c <HAL_GPIO_Init+0x1a0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c74:	4a63      	ldr	r2, [pc, #396]	@ (8000e04 <HAL_GPIO_Init+0x198>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c76:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c78:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000c7a:	2401      	movs	r4, #1
 8000c7c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8000c82:	43ac      	bics	r4, r5
 8000c84:	f040 80ab 	bne.w	8000dde <HAL_GPIO_Init+0x172>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c88:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c8a:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8c:	f005 0403 	and.w	r4, r5, #3
 8000c90:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c94:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c98:	1e67      	subs	r7, r4, #1
 8000c9a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9c:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca0:	d834      	bhi.n	8000d0c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000ca2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca4:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca8:	68cf      	ldr	r7, [r1, #12]
 8000caa:	fa07 f708 	lsl.w	r7, r7, r8
 8000cae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000cb2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cb4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb6:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cba:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000cbe:	409f      	lsls	r7, r3
 8000cc0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cc4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000cc6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc8:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ccc:	688f      	ldr	r7, [r1, #8]
 8000cce:	fa07 f708 	lsl.w	r7, r7, r8
 8000cd2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000cd8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cda:	d119      	bne.n	8000d10 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ce0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ce4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ce8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000cf0:	f04f 0e0f 	mov.w	lr, #15
 8000cf4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000cf8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cfc:	690f      	ldr	r7, [r1, #16]
 8000cfe:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d02:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d06:	f8ca 7020 	str.w	r7, [sl, #32]
 8000d0a:	e001      	b.n	8000d10 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0c:	2c03      	cmp	r4, #3
 8000d0e:	d1da      	bne.n	8000cc6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000d10:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d12:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d16:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1a:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d1c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000d20:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d22:	d05c      	beq.n	8000dde <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d24:	2400      	movs	r4, #0
 8000d26:	9401      	str	r4, [sp, #4]
 8000d28:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000d2c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000d30:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8000d34:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000d38:	f023 0703 	bic.w	r7, r3, #3
 8000d3c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000d40:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000d44:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8000d48:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d4a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d50:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d54:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d58:	240f      	movs	r4, #15
 8000d5a:	fa04 f40c 	lsl.w	r4, r4, ip
 8000d5e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d62:	4c29      	ldr	r4, [pc, #164]	@ (8000e08 <HAL_GPIO_Init+0x19c>)
 8000d64:	42a0      	cmp	r0, r4
 8000d66:	d041      	beq.n	8000dec <HAL_GPIO_Init+0x180>
 8000d68:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d6c:	42a0      	cmp	r0, r4
 8000d6e:	d03f      	beq.n	8000df0 <HAL_GPIO_Init+0x184>
 8000d70:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d74:	42a0      	cmp	r0, r4
 8000d76:	d03d      	beq.n	8000df4 <HAL_GPIO_Init+0x188>
 8000d78:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d7c:	42a0      	cmp	r0, r4
 8000d7e:	d03b      	beq.n	8000df8 <HAL_GPIO_Init+0x18c>
 8000d80:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d84:	42a0      	cmp	r0, r4
 8000d86:	d039      	beq.n	8000dfc <HAL_GPIO_Init+0x190>
 8000d88:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d8c:	42a0      	cmp	r0, r4
 8000d8e:	d037      	beq.n	8000e00 <HAL_GPIO_Init+0x194>
 8000d90:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d94:	42a0      	cmp	r0, r4
 8000d96:	bf14      	ite	ne
 8000d98:	2407      	movne	r4, #7
 8000d9a:	2406      	moveq	r4, #6
 8000d9c:	fa04 f40c 	lsl.w	r4, r4, ip
 8000da0:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da4:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8000da6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000da8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000daa:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000dae:	bf0c      	ite	eq
 8000db0:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000db2:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8000db4:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000db6:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db8:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000dbc:	bf0c      	ite	eq
 8000dbe:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000dc0:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8000dc2:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000dc4:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dc6:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000dca:	bf0c      	ite	eq
 8000dcc:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000dce:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8000dd0:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dd4:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000dd6:	bf54      	ite	pl
 8000dd8:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000dda:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8000ddc:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dde:	3301      	adds	r3, #1
 8000de0:	2b10      	cmp	r3, #16
 8000de2:	f47f af49 	bne.w	8000c78 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000de6:	b003      	add	sp, #12
 8000de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dec:	2400      	movs	r4, #0
 8000dee:	e7d5      	b.n	8000d9c <HAL_GPIO_Init+0x130>
 8000df0:	2401      	movs	r4, #1
 8000df2:	e7d3      	b.n	8000d9c <HAL_GPIO_Init+0x130>
 8000df4:	2402      	movs	r4, #2
 8000df6:	e7d1      	b.n	8000d9c <HAL_GPIO_Init+0x130>
 8000df8:	2403      	movs	r4, #3
 8000dfa:	e7cf      	b.n	8000d9c <HAL_GPIO_Init+0x130>
 8000dfc:	2404      	movs	r4, #4
 8000dfe:	e7cd      	b.n	8000d9c <HAL_GPIO_Init+0x130>
 8000e00:	2405      	movs	r4, #5
 8000e02:	e7cb      	b.n	8000d9c <HAL_GPIO_Init+0x130>
 8000e04:	40013c00 	.word	0x40013c00
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e10:	b10a      	cbz	r2, 8000e16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e12:	6181      	str	r1, [r0, #24]
  }
}
 8000e14:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e16:	0409      	lsls	r1, r1, #16
 8000e18:	e7fb      	b.n	8000e12 <HAL_GPIO_WritePin+0x2>

08000e1a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e1a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e1c:	ea01 0203 	and.w	r2, r1, r3
 8000e20:	ea21 0103 	bic.w	r1, r1, r3
 8000e24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e28:	6181      	str	r1, [r0, #24]
}
 8000e2a:	4770      	bx	lr

08000e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e30:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e32:	4604      	mov	r4, r0
 8000e34:	b910      	cbnz	r0, 8000e3c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000e36:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8000e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e3c:	4b43      	ldr	r3, [pc, #268]	@ (8000f4c <HAL_RCC_ClockConfig+0x120>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	f002 020f 	and.w	r2, r2, #15
 8000e44:	428a      	cmp	r2, r1
 8000e46:	d328      	bcc.n	8000e9a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e48:	6821      	ldr	r1, [r4, #0]
 8000e4a:	078f      	lsls	r7, r1, #30
 8000e4c:	d42d      	bmi.n	8000eaa <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e4e:	07c8      	lsls	r0, r1, #31
 8000e50:	d440      	bmi.n	8000ed4 <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e52:	4b3e      	ldr	r3, [pc, #248]	@ (8000f4c <HAL_RCC_ClockConfig+0x120>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f002 020f 	and.w	r2, r2, #15
 8000e5a:	42aa      	cmp	r2, r5
 8000e5c:	d865      	bhi.n	8000f2a <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e5e:	6822      	ldr	r2, [r4, #0]
 8000e60:	0751      	lsls	r1, r2, #29
 8000e62:	d46b      	bmi.n	8000f3c <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e64:	0713      	lsls	r3, r2, #28
 8000e66:	d507      	bpl.n	8000e78 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e68:	4a39      	ldr	r2, [pc, #228]	@ (8000f50 <HAL_RCC_ClockConfig+0x124>)
 8000e6a:	6921      	ldr	r1, [r4, #16]
 8000e6c:	6893      	ldr	r3, [r2, #8]
 8000e6e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000e72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e76:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e78:	f000 f892 	bl	8000fa0 <HAL_RCC_GetSysClockFreq>
 8000e7c:	4b34      	ldr	r3, [pc, #208]	@ (8000f50 <HAL_RCC_ClockConfig+0x124>)
 8000e7e:	4a35      	ldr	r2, [pc, #212]	@ (8000f54 <HAL_RCC_ClockConfig+0x128>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e86:	5cd3      	ldrb	r3, [r2, r3]
 8000e88:	40d8      	lsrs	r0, r3
 8000e8a:	4b33      	ldr	r3, [pc, #204]	@ (8000f58 <HAL_RCC_ClockConfig+0x12c>)
 8000e8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000e8e:	4b33      	ldr	r3, [pc, #204]	@ (8000f5c <HAL_RCC_ClockConfig+0x130>)
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	f7ff fe2f 	bl	8000af4 <HAL_InitTick>
  return HAL_OK;
 8000e96:	2000      	movs	r0, #0
 8000e98:	e7ce      	b.n	8000e38 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e9a:	b2ca      	uxtb	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 030f 	and.w	r3, r3, #15
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d1c6      	bne.n	8000e36 <HAL_RCC_ClockConfig+0xa>
 8000ea8:	e7ce      	b.n	8000e48 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eaa:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <HAL_RCC_ClockConfig+0x124>)
 8000eac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	689a      	ldrne	r2, [r3, #8]
 8000eb4:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8000eb8:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ebc:	bf42      	ittt	mi
 8000ebe:	689a      	ldrmi	r2, [r3, #8]
 8000ec0:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8000ec4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	68a0      	ldr	r0, [r4, #8]
 8000eca:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	e7bc      	b.n	8000e4e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ed4:	6862      	ldr	r2, [r4, #4]
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <HAL_RCC_ClockConfig+0x124>)
 8000ed8:	2a01      	cmp	r2, #1
 8000eda:	d11c      	bne.n	8000f16 <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee2:	d0a8      	beq.n	8000e36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ee4:	4e1a      	ldr	r6, [pc, #104]	@ (8000f50 <HAL_RCC_ClockConfig+0x124>)
 8000ee6:	68b3      	ldr	r3, [r6, #8]
 8000ee8:	f023 0303 	bic.w	r3, r3, #3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ef0:	f7ff fe4a 	bl	8000b88 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef4:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8000ef8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000efa:	68b3      	ldr	r3, [r6, #8]
 8000efc:	6862      	ldr	r2, [r4, #4]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f06:	d0a4      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f08:	f7ff fe3e 	bl	8000b88 <HAL_GetTick>
 8000f0c:	1bc0      	subs	r0, r0, r7
 8000f0e:	4540      	cmp	r0, r8
 8000f10:	d9f3      	bls.n	8000efa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000f12:	2003      	movs	r0, #3
 8000f14:	e790      	b.n	8000e38 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f16:	1e91      	subs	r1, r2, #2
 8000f18:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1a:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f1c:	d802      	bhi.n	8000f24 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000f22:	e7de      	b.n	8000ee2 <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f24:	f013 0f02 	tst.w	r3, #2
 8000f28:	e7db      	b.n	8000ee2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2a:	b2ea      	uxtb	r2, r5
 8000f2c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	42ab      	cmp	r3, r5
 8000f36:	f47f af7e 	bne.w	8000e36 <HAL_RCC_ClockConfig+0xa>
 8000f3a:	e790      	b.n	8000e5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f3c:	4904      	ldr	r1, [pc, #16]	@ (8000f50 <HAL_RCC_ClockConfig+0x124>)
 8000f3e:	68e0      	ldr	r0, [r4, #12]
 8000f40:	688b      	ldr	r3, [r1, #8]
 8000f42:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000f46:	4303      	orrs	r3, r0
 8000f48:	608b      	str	r3, [r1, #8]
 8000f4a:	e78b      	b.n	8000e64 <HAL_RCC_ClockConfig+0x38>
 8000f4c:	40023c00 	.word	0x40023c00
 8000f50:	40023800 	.word	0x40023800
 8000f54:	08001b4b 	.word	0x08001b4b
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008

08000f60 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	4a03      	ldr	r2, [pc, #12]	@ (8000f7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f6e:	6810      	ldr	r0, [r2, #0]
}
 8000f70:	40d8      	lsrs	r0, r3
 8000f72:	4770      	bx	lr
 8000f74:	40023800 	.word	0x40023800
 8000f78:	08001b43 	.word	0x08001b43
 8000f7c:	20000000 	.word	0x20000000

08000f80 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f82:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	4a03      	ldr	r2, [pc, #12]	@ (8000f9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f8e:	6810      	ldr	r0, [r2, #0]
}
 8000f90:	40d8      	lsrs	r0, r3
 8000f92:	4770      	bx	lr
 8000f94:	40023800 	.word	0x40023800
 8000f98:	08001b43 	.word	0x08001b43
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fa0:	4920      	ldr	r1, [pc, #128]	@ (8001024 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000fa2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fa4:	688b      	ldr	r3, [r1, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d007      	beq.n	8000fbe <HAL_RCC_GetSysClockFreq+0x1e>
 8000fae:	2b0c      	cmp	r3, #12
 8000fb0:	d020      	beq.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fb2:	481d      	ldr	r0, [pc, #116]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x88>)
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800102c <HAL_RCC_GetSysClockFreq+0x8c>)
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf18      	it	ne
 8000fba:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fbc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fbe:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fc0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fc2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fc4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fc8:	bf14      	ite	ne
 8000fca:	4817      	ldrne	r0, [pc, #92]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fcc:	4817      	ldreq	r0, [pc, #92]	@ (800102c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fce:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fd2:	bf18      	it	ne
 8000fd4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fd6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fda:	fba1 0100 	umull	r0, r1, r1, r0
 8000fde:	f7ff f919 	bl	8000214 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <HAL_RCC_GetSysClockFreq+0x84>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fea:	3301      	adds	r3, #1
 8000fec:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllr;
 8000fee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000ff2:	e7e3      	b.n	8000fbc <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ff4:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ff6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff8:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ffa:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ffe:	bf14      	ite	ne
 8001000:	4809      	ldrne	r0, [pc, #36]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001002:	480a      	ldreq	r0, [pc, #40]	@ (800102c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001004:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001008:	bf18      	it	ne
 800100a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800100c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001010:	fba1 0100 	umull	r0, r1, r1, r0
 8001014:	f7ff f8fe 	bl	8000214 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001018:	4b02      	ldr	r3, [pc, #8]	@ (8001024 <HAL_RCC_GetSysClockFreq+0x84>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001020:	e7e5      	b.n	8000fee <HAL_RCC_GetSysClockFreq+0x4e>
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	007a1200 	.word	0x007a1200
 800102c:	00f42400 	.word	0x00f42400

08001030 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001030:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001034:	4604      	mov	r4, r0
 8001036:	2800      	cmp	r0, #0
 8001038:	d031      	beq.n	800109e <HAL_RCC_OscConfig+0x6e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103a:	6803      	ldr	r3, [r0, #0]
 800103c:	07df      	lsls	r7, r3, #31
 800103e:	d410      	bmi.n	8001062 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	079e      	lsls	r6, r3, #30
 8001044:	d467      	bmi.n	8001116 <HAL_RCC_OscConfig+0xe6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	0719      	lsls	r1, r3, #28
 800104a:	f100 80b2 	bmi.w	80011b2 <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	075a      	lsls	r2, r3, #29
 8001052:	f100 80d2 	bmi.w	80011fa <HAL_RCC_OscConfig+0x1ca>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001056:	69a3      	ldr	r3, [r4, #24]
 8001058:	2b00      	cmp	r3, #0
 800105a:	f040 8139 	bne.w	80012d0 <HAL_RCC_OscConfig+0x2a0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800105e:	2000      	movs	r0, #0
 8001060:	e034      	b.n	80010cc <HAL_RCC_OscConfig+0x9c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001062:	4b98      	ldr	r3, [pc, #608]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	f002 020c 	and.w	r2, r2, #12
 800106a:	2a04      	cmp	r2, #4
 800106c:	d010      	beq.n	8001090 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	f002 020c 	and.w	r2, r2, #12
        || \
 8001074:	2a08      	cmp	r2, #8
 8001076:	d102      	bne.n	800107e <HAL_RCC_OscConfig+0x4e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	025d      	lsls	r5, r3, #9
 800107c:	d408      	bmi.n	8001090 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107e:	4b91      	ldr	r3, [pc, #580]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	f002 020c 	and.w	r2, r2, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001086:	2a0c      	cmp	r2, #12
 8001088:	d10b      	bne.n	80010a2 <HAL_RCC_OscConfig+0x72>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	0251      	lsls	r1, r2, #9
 800108e:	d508      	bpl.n	80010a2 <HAL_RCC_OscConfig+0x72>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	4b8c      	ldr	r3, [pc, #560]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	039a      	lsls	r2, r3, #14
 8001096:	d5d3      	bpl.n	8001040 <HAL_RCC_OscConfig+0x10>
 8001098:	6863      	ldr	r3, [r4, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1d0      	bne.n	8001040 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800109e:	2001      	movs	r0, #1
 80010a0:	e014      	b.n	80010cc <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	6862      	ldr	r2, [r4, #4]
 80010a4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80010a8:	d113      	bne.n	80010d2 <HAL_RCC_OscConfig+0xa2>
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80010b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010b2:	f7ff fd69 	bl	8000b88 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	4e83      	ldr	r6, [pc, #524]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 80010b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	6833      	ldr	r3, [r6, #0]
 80010bc:	039b      	lsls	r3, r3, #14
 80010be:	d4bf      	bmi.n	8001040 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c0:	f7ff fd62 	bl	8000b88 <HAL_GetTick>
 80010c4:	1b40      	subs	r0, r0, r5
 80010c6:	2864      	cmp	r0, #100	@ 0x64
 80010c8:	d9f7      	bls.n	80010ba <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80010ca:	2003      	movs	r0, #3
}
 80010cc:	b002      	add	sp, #8
 80010ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	4d7c      	ldr	r5, [pc, #496]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 80010d4:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	d107      	bne.n	80010ec <HAL_RCC_OscConfig+0xbc>
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e0:	602b      	str	r3, [r5, #0]
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010ea:	e7e2      	b.n	80010b2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f0:	602b      	str	r3, [r5, #0]
 80010f2:	682b      	ldr	r3, [r5, #0]
 80010f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010f8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010fa:	2a00      	cmp	r2, #0
 80010fc:	d1d9      	bne.n	80010b2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80010fe:	f7ff fd43 	bl	8000b88 <HAL_GetTick>
 8001102:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	039f      	lsls	r7, r3, #14
 8001108:	d59a      	bpl.n	8001040 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110a:	f7ff fd3d 	bl	8000b88 <HAL_GetTick>
 800110e:	1b80      	subs	r0, r0, r6
 8001110:	2864      	cmp	r0, #100	@ 0x64
 8001112:	d9f7      	bls.n	8001104 <HAL_RCC_OscConfig+0xd4>
 8001114:	e7d9      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001116:	4b6b      	ldr	r3, [pc, #428]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	f012 0f0c 	tst.w	r2, #12
 800111e:	d010      	beq.n	8001142 <HAL_RCC_OscConfig+0x112>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	f002 020c 	and.w	r2, r2, #12
        || \
 8001126:	2a08      	cmp	r2, #8
 8001128:	d102      	bne.n	8001130 <HAL_RCC_OscConfig+0x100>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	025e      	lsls	r6, r3, #9
 800112e:	d508      	bpl.n	8001142 <HAL_RCC_OscConfig+0x112>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001130:	4a64      	ldr	r2, [pc, #400]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 8001132:	6893      	ldr	r3, [r2, #8]
 8001134:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001138:	2b0c      	cmp	r3, #12
 800113a:	d111      	bne.n	8001160 <HAL_RCC_OscConfig+0x130>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113c:	6853      	ldr	r3, [r2, #4]
 800113e:	025d      	lsls	r5, r3, #9
 8001140:	d40e      	bmi.n	8001160 <HAL_RCC_OscConfig+0x130>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	4a60      	ldr	r2, [pc, #384]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 8001144:	6813      	ldr	r3, [r2, #0]
 8001146:	0799      	lsls	r1, r3, #30
 8001148:	d502      	bpl.n	8001150 <HAL_RCC_OscConfig+0x120>
 800114a:	68e3      	ldr	r3, [r4, #12]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d1a6      	bne.n	800109e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	6813      	ldr	r3, [r2, #0]
 8001152:	6921      	ldr	r1, [r4, #16]
 8001154:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001158:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800115c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	e772      	b.n	8001046 <HAL_RCC_OscConfig+0x16>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001160:	68e2      	ldr	r2, [r4, #12]
 8001162:	4b59      	ldr	r3, [pc, #356]	@ (80012c8 <HAL_RCC_OscConfig+0x298>)
 8001164:	b1b2      	cbz	r2, 8001194 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_ENABLE();
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800116a:	f7ff fd0d 	bl	8000b88 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116e:	4d55      	ldr	r5, [pc, #340]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8001170:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001172:	682b      	ldr	r3, [r5, #0]
 8001174:	079b      	lsls	r3, r3, #30
 8001176:	d507      	bpl.n	8001188 <HAL_RCC_OscConfig+0x158>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	6922      	ldr	r2, [r4, #16]
 800117c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001180:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001184:	602b      	str	r3, [r5, #0]
 8001186:	e75e      	b.n	8001046 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001188:	f7ff fcfe 	bl	8000b88 <HAL_GetTick>
 800118c:	1b80      	subs	r0, r0, r6
 800118e:	2802      	cmp	r0, #2
 8001190:	d9ef      	bls.n	8001172 <HAL_RCC_OscConfig+0x142>
 8001192:	e79a      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001194:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001196:	f7ff fcf7 	bl	8000b88 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	4e4a      	ldr	r6, [pc, #296]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 800119c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119e:	6833      	ldr	r3, [r6, #0]
 80011a0:	079f      	lsls	r7, r3, #30
 80011a2:	f57f af50 	bpl.w	8001046 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fcef 	bl	8000b88 <HAL_GetTick>
 80011aa:	1b40      	subs	r0, r0, r5
 80011ac:	2802      	cmp	r0, #2
 80011ae:	d9f6      	bls.n	800119e <HAL_RCC_OscConfig+0x16e>
 80011b0:	e78b      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011b2:	6962      	ldr	r2, [r4, #20]
 80011b4:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <HAL_RCC_OscConfig+0x298>)
 80011b6:	b182      	cbz	r2, 80011da <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 80011b8:	2201      	movs	r2, #1
 80011ba:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80011be:	f7ff fce3 	bl	8000b88 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	4e40      	ldr	r6, [pc, #256]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 80011c4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80011c8:	079b      	lsls	r3, r3, #30
 80011ca:	f53f af40 	bmi.w	800104e <HAL_RCC_OscConfig+0x1e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ce:	f7ff fcdb 	bl	8000b88 <HAL_GetTick>
 80011d2:	1b40      	subs	r0, r0, r5
 80011d4:	2802      	cmp	r0, #2
 80011d6:	d9f6      	bls.n	80011c6 <HAL_RCC_OscConfig+0x196>
 80011d8:	e777      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80011da:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80011de:	f7ff fcd3 	bl	8000b88 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e2:	4e38      	ldr	r6, [pc, #224]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 80011e4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e6:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80011e8:	079f      	lsls	r7, r3, #30
 80011ea:	f57f af30 	bpl.w	800104e <HAL_RCC_OscConfig+0x1e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ee:	f7ff fccb 	bl	8000b88 <HAL_GetTick>
 80011f2:	1b40      	subs	r0, r0, r5
 80011f4:	2802      	cmp	r0, #2
 80011f6:	d9f6      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1b6>
 80011f8:	e767      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fa:	4b32      	ldr	r3, [pc, #200]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 80011fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011fe:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8001202:	d128      	bne.n	8001256 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	9201      	str	r2, [sp, #4]
 8001206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001208:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001218:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	4d2c      	ldr	r5, [pc, #176]	@ (80012cc <HAL_RCC_OscConfig+0x29c>)
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	05d8      	lsls	r0, r3, #23
 8001220:	d51b      	bpl.n	800125a <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001222:	68a3      	ldr	r3, [r4, #8]
 8001224:	4d27      	ldr	r5, [pc, #156]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 8001226:	2b01      	cmp	r3, #1
 8001228:	d127      	bne.n	800127a <HAL_RCC_OscConfig+0x24a>
 800122a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001232:	f7ff fca9 	bl	8000b88 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001236:	4e23      	ldr	r6, [pc, #140]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 8001238:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001240:	079a      	lsls	r2, r3, #30
 8001242:	d539      	bpl.n	80012b8 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8001244:	2f00      	cmp	r7, #0
 8001246:	f43f af06 	beq.w	8001056 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 800124a:	4a1e      	ldr	r2, [pc, #120]	@ (80012c4 <HAL_RCC_OscConfig+0x294>)
 800124c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800124e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	@ 0x40
 8001254:	e6ff      	b.n	8001056 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8001256:	2700      	movs	r7, #0
 8001258:	e7df      	b.n	800121a <HAL_RCC_OscConfig+0x1ea>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800125a:	682b      	ldr	r3, [r5, #0]
 800125c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001260:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001262:	f7ff fc91 	bl	8000b88 <HAL_GetTick>
 8001266:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	05d9      	lsls	r1, r3, #23
 800126c:	d4d9      	bmi.n	8001222 <HAL_RCC_OscConfig+0x1f2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126e:	f7ff fc8b 	bl	8000b88 <HAL_GetTick>
 8001272:	1b80      	subs	r0, r0, r6
 8001274:	2802      	cmp	r0, #2
 8001276:	d9f7      	bls.n	8001268 <HAL_RCC_OscConfig+0x238>
 8001278:	e727      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127a:	2b05      	cmp	r3, #5
 800127c:	d104      	bne.n	8001288 <HAL_RCC_OscConfig+0x258>
 800127e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	672b      	str	r3, [r5, #112]	@ 0x70
 8001286:	e7d0      	b.n	800122a <HAL_RCC_OscConfig+0x1fa>
 8001288:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	672a      	str	r2, [r5, #112]	@ 0x70
 8001290:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001292:	f022 0204 	bic.w	r2, r2, #4
 8001296:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1ca      	bne.n	8001232 <HAL_RCC_OscConfig+0x202>
      tickstart = HAL_GetTick();
 800129c:	f7ff fc74 	bl	8000b88 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80012a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80012a8:	079b      	lsls	r3, r3, #30
 80012aa:	d5cb      	bpl.n	8001244 <HAL_RCC_OscConfig+0x214>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f7ff fc6c 	bl	8000b88 <HAL_GetTick>
 80012b0:	1b80      	subs	r0, r0, r6
 80012b2:	4540      	cmp	r0, r8
 80012b4:	d9f7      	bls.n	80012a6 <HAL_RCC_OscConfig+0x276>
 80012b6:	e708      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b8:	f7ff fc66 	bl	8000b88 <HAL_GetTick>
 80012bc:	1b40      	subs	r0, r0, r5
 80012be:	4540      	cmp	r0, r8
 80012c0:	d9bd      	bls.n	800123e <HAL_RCC_OscConfig+0x20e>
 80012c2:	e702      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
 80012c4:	40023800 	.word	0x40023800
 80012c8:	42470000 	.word	0x42470000
 80012cc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012d0:	4d3c      	ldr	r5, [pc, #240]	@ (80013c4 <HAL_RCC_OscConfig+0x394>)
 80012d2:	68aa      	ldr	r2, [r5, #8]
 80012d4:	f002 020c 	and.w	r2, r2, #12
 80012d8:	2a08      	cmp	r2, #8
 80012da:	d041      	beq.n	8001360 <HAL_RCC_OscConfig+0x330>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012dc:	2b02      	cmp	r3, #2
 80012de:	4b3a      	ldr	r3, [pc, #232]	@ (80013c8 <HAL_RCC_OscConfig+0x398>)
 80012e0:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80012e4:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e6:	d12e      	bne.n	8001346 <HAL_RCC_OscConfig+0x316>
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc4e 	bl	8000b88 <HAL_GetTick>
 80012ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	0199      	lsls	r1, r3, #6
 80012f2:	d422      	bmi.n	800133a <HAL_RCC_OscConfig+0x30a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012f4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80012fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001300:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001302:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001306:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001308:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800130c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800130e:	0852      	lsrs	r2, r2, #1
 8001310:	3a01      	subs	r2, #1
 8001312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001316:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001318:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <HAL_RCC_OscConfig+0x398>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4d2a      	ldr	r5, [pc, #168]	@ (80013c4 <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_ENABLE();
 800131c:	2201      	movs	r2, #1
 800131e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001320:	f7ff fc32 	bl	8000b88 <HAL_GetTick>
 8001324:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	682b      	ldr	r3, [r5, #0]
 8001328:	019a      	lsls	r2, r3, #6
 800132a:	f53f ae98 	bmi.w	800105e <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132e:	f7ff fc2b 	bl	8000b88 <HAL_GetTick>
 8001332:	1b00      	subs	r0, r0, r4
 8001334:	2802      	cmp	r0, #2
 8001336:	d9f6      	bls.n	8001326 <HAL_RCC_OscConfig+0x2f6>
 8001338:	e6c7      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff fc25 	bl	8000b88 <HAL_GetTick>
 800133e:	1b80      	subs	r0, r0, r6
 8001340:	2802      	cmp	r0, #2
 8001342:	d9d4      	bls.n	80012ee <HAL_RCC_OscConfig+0x2be>
 8001344:	e6c1      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001346:	f7ff fc1f 	bl	8000b88 <HAL_GetTick>
 800134a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	019b      	lsls	r3, r3, #6
 8001350:	f57f ae85 	bpl.w	800105e <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fc18 	bl	8000b88 <HAL_GetTick>
 8001358:	1b00      	subs	r0, r0, r4
 800135a:	2802      	cmp	r0, #2
 800135c:	d9f6      	bls.n	800134c <HAL_RCC_OscConfig+0x31c>
 800135e:	e6b4      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001360:	2b01      	cmp	r3, #1
 8001362:	f43f ae9c 	beq.w	800109e <HAL_RCC_OscConfig+0x6e>
        pll_config = RCC->PLLCFGR;
 8001366:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001368:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800136e:	4291      	cmp	r1, r2
 8001370:	f47f ae95 	bne.w	800109e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	428a      	cmp	r2, r1
 800137c:	f47f ae8f 	bne.w	800109e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001380:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001382:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001386:	401a      	ands	r2, r3
 8001388:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800138c:	f47f ae87 	bne.w	800109e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001390:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001392:	0852      	lsrs	r2, r2, #1
 8001394:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001398:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800139a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800139e:	f47f ae7e 	bne.w	800109e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80013a4:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013a8:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80013ac:	f47f ae77 	bne.w	800109e <HAL_RCC_OscConfig+0x6e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80013b0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80013b2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013b6:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80013ba:	bf14      	ite	ne
 80013bc:	2001      	movne	r0, #1
 80013be:	2000      	moveq	r0, #0
 80013c0:	e684      	b.n	80010cc <HAL_RCC_OscConfig+0x9c>
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	42470000 	.word	0x42470000

080013cc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013cc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013ce:	6a02      	ldr	r2, [r0, #32]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
{
 80013d4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013d6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80013da:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80013de:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80013e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80013e6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80013ea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80013ec:	4d0c      	ldr	r5, [pc, #48]	@ (8001420 <TIM_OC1_SetConfig+0x54>)
 80013ee:	42a8      	cmp	r0, r5
 80013f0:	d003      	beq.n	80013fa <TIM_OC1_SetConfig+0x2e>
 80013f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80013f6:	42a8      	cmp	r0, r5
 80013f8:	d10b      	bne.n	8001412 <TIM_OC1_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80013fa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80013fc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001400:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001402:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001406:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800140a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800140c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001410:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001412:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001414:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001416:	684a      	ldr	r2, [r1, #4]
 8001418:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800141a:	6203      	str	r3, [r0, #32]
}
 800141c:	bd70      	pop	{r4, r5, r6, pc}
 800141e:	bf00      	nop
 8001420:	40010000 	.word	0x40010000

08001424 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001424:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001426:	6a02      	ldr	r2, [r0, #32]
 8001428:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 800142c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800142e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001430:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001432:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001434:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001436:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800143a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800143c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800143e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001442:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001446:	4d0d      	ldr	r5, [pc, #52]	@ (800147c <TIM_OC3_SetConfig+0x58>)
 8001448:	42a8      	cmp	r0, r5
 800144a:	d003      	beq.n	8001454 <TIM_OC3_SetConfig+0x30>
 800144c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001450:	42a8      	cmp	r0, r5
 8001452:	d10d      	bne.n	8001470 <TIM_OC3_SetConfig+0x4c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001454:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001456:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800145a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800145e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001462:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001466:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001468:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800146c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001470:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001472:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001474:	684a      	ldr	r2, [r1, #4]
 8001476:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001478:	6203      	str	r3, [r0, #32]
}
 800147a:	bd70      	pop	{r4, r5, r6, pc}
 800147c:	40010000 	.word	0x40010000

08001480 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001480:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001482:	6a02      	ldr	r2, [r0, #32]
 8001484:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 8001488:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800148a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800148c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800148e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001490:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001492:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001496:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800149a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800149c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80014a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014a4:	4d08      	ldr	r5, [pc, #32]	@ (80014c8 <TIM_OC4_SetConfig+0x48>)
 80014a6:	42a8      	cmp	r0, r5
 80014a8:	d003      	beq.n	80014b2 <TIM_OC4_SetConfig+0x32>
 80014aa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80014ae:	42a8      	cmp	r0, r5
 80014b0:	d104      	bne.n	80014bc <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80014b2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80014b4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80014b8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80014be:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80014c0:	684a      	ldr	r2, [r1, #4]
 80014c2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014c4:	6203      	str	r3, [r0, #32]
}
 80014c6:	bd30      	pop	{r4, r5, pc}
 80014c8:	40010000 	.word	0x40010000

080014cc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014cc:	4a27      	ldr	r2, [pc, #156]	@ (800156c <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 80014ce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014d0:	4290      	cmp	r0, r2
 80014d2:	d012      	beq.n	80014fa <TIM_Base_SetConfig+0x2e>
 80014d4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80014d8:	d00f      	beq.n	80014fa <TIM_Base_SetConfig+0x2e>
 80014da:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80014de:	4290      	cmp	r0, r2
 80014e0:	d00b      	beq.n	80014fa <TIM_Base_SetConfig+0x2e>
 80014e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014e6:	4290      	cmp	r0, r2
 80014e8:	d007      	beq.n	80014fa <TIM_Base_SetConfig+0x2e>
 80014ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014ee:	4290      	cmp	r0, r2
 80014f0:	d003      	beq.n	80014fa <TIM_Base_SetConfig+0x2e>
 80014f2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80014f6:	4290      	cmp	r0, r2
 80014f8:	d108      	bne.n	800150c <TIM_Base_SetConfig+0x40>
    tmpcr1 |= Structure->CounterMode;
 80014fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001500:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001502:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001508:	4313      	orrs	r3, r2
 800150a:	e016      	b.n	800153a <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800150c:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <TIM_Base_SetConfig+0xa4>)
 800150e:	4290      	cmp	r0, r2
 8001510:	d0f7      	beq.n	8001502 <TIM_Base_SetConfig+0x36>
 8001512:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001516:	4290      	cmp	r0, r2
 8001518:	d0f3      	beq.n	8001502 <TIM_Base_SetConfig+0x36>
 800151a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800151e:	4290      	cmp	r0, r2
 8001520:	d0ef      	beq.n	8001502 <TIM_Base_SetConfig+0x36>
 8001522:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001526:	4290      	cmp	r0, r2
 8001528:	d0eb      	beq.n	8001502 <TIM_Base_SetConfig+0x36>
 800152a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800152e:	4290      	cmp	r0, r2
 8001530:	d0e7      	beq.n	8001502 <TIM_Base_SetConfig+0x36>
 8001532:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001536:	4290      	cmp	r0, r2
 8001538:	d0e3      	beq.n	8001502 <TIM_Base_SetConfig+0x36>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800153a:	694a      	ldr	r2, [r1, #20]
 800153c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001540:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001542:	688a      	ldr	r2, [r1, #8]
 8001544:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001546:	680a      	ldr	r2, [r1, #0]
 8001548:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800154a:	4a08      	ldr	r2, [pc, #32]	@ (800156c <TIM_Base_SetConfig+0xa0>)
 800154c:	4290      	cmp	r0, r2
 800154e:	d003      	beq.n	8001558 <TIM_Base_SetConfig+0x8c>
 8001550:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001554:	4290      	cmp	r0, r2
 8001556:	d101      	bne.n	800155c <TIM_Base_SetConfig+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
 8001558:	690a      	ldr	r2, [r1, #16]
 800155a:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800155c:	6802      	ldr	r2, [r0, #0]
 800155e:	f042 0204 	orr.w	r2, r2, #4
 8001562:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8001564:	2201      	movs	r2, #1
 8001566:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8001568:	6003      	str	r3, [r0, #0]
}
 800156a:	4770      	bx	lr
 800156c:	40010000 	.word	0x40010000
 8001570:	40014000 	.word	0x40014000

08001574 <HAL_TIM_PWM_Init>:
{
 8001574:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001576:	4604      	mov	r4, r0
 8001578:	b330      	cbz	r0, 80015c8 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800157a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800157e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001582:	b91b      	cbnz	r3, 800158c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001584:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001588:	f7ff f9c2 	bl	8000910 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800158c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800158e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001590:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001594:	1d21      	adds	r1, r4, #4
 8001596:	f7ff ff99 	bl	80014cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800159a:	2301      	movs	r3, #1
 800159c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 80015a0:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015a2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80015a6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80015aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80015ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80015b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015ba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80015be:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80015c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80015c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015c8:	2001      	movs	r0, #1
 80015ca:	e7fc      	b.n	80015c6 <HAL_TIM_PWM_Init+0x52>

080015cc <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80015cc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015ce:	6a02      	ldr	r2, [r0, #32]
 80015d0:	f022 0210 	bic.w	r2, r2, #16
{
 80015d4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015d6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80015d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80015da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80015de:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80015e6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80015e8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80015ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80015f0:	4d0d      	ldr	r5, [pc, #52]	@ (8001628 <TIM_OC2_SetConfig+0x5c>)
 80015f2:	42a8      	cmp	r0, r5
 80015f4:	d003      	beq.n	80015fe <TIM_OC2_SetConfig+0x32>
 80015f6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80015fa:	42a8      	cmp	r0, r5
 80015fc:	d10d      	bne.n	800161a <TIM_OC2_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001600:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001604:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001608:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800160c:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001610:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001616:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800161a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800161c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800161e:	684a      	ldr	r2, [r1, #4]
 8001620:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001622:	6203      	str	r3, [r0, #32]
}
 8001624:	bd70      	pop	{r4, r5, r6, pc}
 8001626:	bf00      	nop
 8001628:	40010000 	.word	0x40010000

0800162c <HAL_TIM_PWM_ConfigChannel>:
{
 800162c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800162e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001632:	2b01      	cmp	r3, #1
{
 8001634:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001636:	d04f      	beq.n	80016d8 <HAL_TIM_PWM_ConfigChannel+0xac>
 8001638:	2001      	movs	r0, #1
  switch (Channel)
 800163a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800163c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8001640:	d03a      	beq.n	80016b8 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8001642:	d806      	bhi.n	8001652 <HAL_TIM_PWM_ConfigChannel+0x26>
 8001644:	b1ba      	cbz	r2, 8001676 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001646:	2a04      	cmp	r2, #4
 8001648:	d026      	beq.n	8001698 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 800164a:	2300      	movs	r3, #0
 800164c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001650:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001652:	2a0c      	cmp	r2, #12
 8001654:	d1f9      	bne.n	800164a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001656:	6820      	ldr	r0, [r4, #0]
 8001658:	f7ff ff12 	bl	8001480 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800165c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800165e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001660:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001664:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001666:	69c3      	ldr	r3, [r0, #28]
 8001668:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800166c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800166e:	69c3      	ldr	r3, [r0, #28]
 8001670:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001674:	e02e      	b.n	80016d4 <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001676:	6820      	ldr	r0, [r4, #0]
 8001678:	f7ff fea8 	bl	80013cc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800167c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800167e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001686:	6983      	ldr	r3, [r0, #24]
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800168e:	6983      	ldr	r3, [r0, #24]
 8001690:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001692:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001694:	2000      	movs	r0, #0
 8001696:	e7d8      	b.n	800164a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001698:	6820      	ldr	r0, [r4, #0]
 800169a:	f7ff ff97 	bl	80015cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800169e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016a0:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80016a8:	6983      	ldr	r3, [r0, #24]
 80016aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80016ae:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016b0:	6983      	ldr	r3, [r0, #24]
 80016b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016b6:	e7ec      	b.n	8001692 <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	f7ff feb3 	bl	8001424 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016be:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016c0:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80016c8:	69c3      	ldr	r3, [r0, #28]
 80016ca:	f023 0304 	bic.w	r3, r3, #4
 80016ce:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016d0:	69c3      	ldr	r3, [r0, #28]
 80016d2:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80016d4:	61c3      	str	r3, [r0, #28]
      break;
 80016d6:	e7dd      	b.n	8001694 <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 80016d8:	2002      	movs	r0, #2
 80016da:	e7b9      	b.n	8001650 <HAL_TIM_PWM_ConfigChannel+0x24>

080016dc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80016dc:	6a03      	ldr	r3, [r0, #32]
{
 80016de:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80016e0:	f001 011f 	and.w	r1, r1, #31
 80016e4:	2401      	movs	r4, #1
 80016e6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80016e8:	ea23 0304 	bic.w	r3, r3, r4
 80016ec:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80016ee:	6a03      	ldr	r3, [r0, #32]
 80016f0:	408a      	lsls	r2, r1
 80016f2:	431a      	orrs	r2, r3
 80016f4:	6202      	str	r2, [r0, #32]
}
 80016f6:	bd10      	pop	{r4, pc}

080016f8 <HAL_TIM_OC_Start>:
{
 80016f8:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80016fa:	b929      	cbnz	r1, 8001708 <HAL_TIM_OC_Start+0x10>
 80016fc:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8001700:	2b01      	cmp	r3, #1
 8001702:	d01f      	beq.n	8001744 <HAL_TIM_OC_Start+0x4c>
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
 8001706:	e035      	b.n	8001774 <HAL_TIM_OC_Start+0x7c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001708:	2904      	cmp	r1, #4
 800170a:	d107      	bne.n	800171c <HAL_TIM_OC_Start+0x24>
 800170c:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8001710:	2b01      	cmp	r3, #1
 8001712:	d1f7      	bne.n	8001704 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001714:	2302      	movs	r3, #2
 8001716:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 800171a:	e016      	b.n	800174a <HAL_TIM_OC_Start+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800171c:	2908      	cmp	r1, #8
 800171e:	bf0c      	ite	eq
 8001720:	f890 3040 	ldrbeq.w	r3, [r0, #64]	@ 0x40
 8001724:	f890 3041 	ldrbne.w	r3, [r0, #65]	@ 0x41
 8001728:	3b01      	subs	r3, #1
 800172a:	bf18      	it	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1e8      	bne.n	8001704 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001732:	2908      	cmp	r1, #8
 8001734:	f04f 0302 	mov.w	r3, #2
 8001738:	bf0c      	ite	eq
 800173a:	f880 3040 	strbeq.w	r3, [r0, #64]	@ 0x40
 800173e:	f880 3041 	strbne.w	r3, [r0, #65]	@ 0x41
 8001742:	e002      	b.n	800174a <HAL_TIM_OC_Start+0x52>
 8001744:	2302      	movs	r3, #2
 8001746:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800174a:	6800      	ldr	r0, [r0, #0]
 800174c:	2201      	movs	r2, #1
 800174e:	f7ff ffc5 	bl	80016dc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_TIM_OC_Start+0xb4>)
 8001754:	4298      	cmp	r0, r3
 8001756:	d003      	beq.n	8001760 <HAL_TIM_OC_Start+0x68>
 8001758:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800175c:	4298      	cmp	r0, r3
 800175e:	d10a      	bne.n	8001776 <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8001760:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001766:	6443      	str	r3, [r0, #68]	@ 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001768:	6883      	ldr	r3, [r0, #8]
 800176a:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800176e:	2b06      	cmp	r3, #6
 8001770:	d117      	bne.n	80017a2 <HAL_TIM_OC_Start+0xaa>
  return HAL_OK;
 8001772:	2000      	movs	r0, #0
}
 8001774:	bd08      	pop	{r3, pc}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001776:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800177a:	d0f5      	beq.n	8001768 <HAL_TIM_OC_Start+0x70>
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <HAL_TIM_OC_Start+0xb8>)
 800177e:	4298      	cmp	r0, r3
 8001780:	d0f2      	beq.n	8001768 <HAL_TIM_OC_Start+0x70>
 8001782:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001786:	4298      	cmp	r0, r3
 8001788:	d0ee      	beq.n	8001768 <HAL_TIM_OC_Start+0x70>
 800178a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800178e:	4298      	cmp	r0, r3
 8001790:	d0ea      	beq.n	8001768 <HAL_TIM_OC_Start+0x70>
 8001792:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 8001796:	4298      	cmp	r0, r3
 8001798:	d0e6      	beq.n	8001768 <HAL_TIM_OC_Start+0x70>
 800179a:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 800179e:	4298      	cmp	r0, r3
 80017a0:	d0e2      	beq.n	8001768 <HAL_TIM_OC_Start+0x70>
      __HAL_TIM_ENABLE(htim);
 80017a2:	6803      	ldr	r3, [r0, #0]
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6003      	str	r3, [r0, #0]
 80017aa:	e7e2      	b.n	8001772 <HAL_TIM_OC_Start+0x7a>
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40000400 	.word	0x40000400

080017b4 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80017b4:	f7ff bfa0 	b.w	80016f8 <HAL_TIM_OC_Start>

080017b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80017b8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017ba:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80017be:	2b01      	cmp	r3, #1
{
 80017c0:	4602      	mov	r2, r0
 80017c2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80017c6:	d032      	beq.n	800182e <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017c8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80017ca:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80017ce:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017d0:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80017d2:	6898      	ldr	r0, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80017d4:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017d8:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80017da:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017dc:	4c14      	ldr	r4, [pc, #80]	@ (8001830 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80017de:	42a3      	cmp	r3, r4
 80017e0:	d01a      	beq.n	8001818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80017e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e6:	d017      	beq.n	8001818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80017e8:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 80017ec:	42a3      	cmp	r3, r4
 80017ee:	d013      	beq.n	8001818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80017f0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80017f4:	42a3      	cmp	r3, r4
 80017f6:	d00f      	beq.n	8001818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80017f8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80017fc:	42a3      	cmp	r3, r4
 80017fe:	d00b      	beq.n	8001818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8001800:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 8001804:	42a3      	cmp	r3, r4
 8001806:	d007      	beq.n	8001818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8001808:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 800180c:	42a3      	cmp	r3, r4
 800180e:	d003      	beq.n	8001818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8001810:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8001814:	42a3      	cmp	r3, r4
 8001816:	d104      	bne.n	8001822 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001818:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800181a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800181e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001820:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001822:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001824:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001826:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800182a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800182e:	bd30      	pop	{r4, r5, pc}
 8001830:	40010000 	.word	0x40010000

08001834 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001834:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001836:	f102 030c 	add.w	r3, r2, #12
 800183a:	e853 3f00 	ldrex	r3, [r3]
 800183e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001842:	320c      	adds	r2, #12
 8001844:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001848:	6802      	ldr	r2, [r0, #0]
 800184a:	2900      	cmp	r1, #0
 800184c:	d1f2      	bne.n	8001834 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800184e:	f102 0314 	add.w	r3, r2, #20
 8001852:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001856:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800185a:	f102 0c14 	add.w	ip, r2, #20
 800185e:	e84c 3100 	strex	r1, r3, [ip]
 8001862:	2900      	cmp	r1, #0
 8001864:	d1f3      	bne.n	800184e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001866:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10b      	bne.n	8001884 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186c:	f102 030c 	add.w	r3, r2, #12
 8001870:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001874:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001878:	f102 0c0c 	add.w	ip, r2, #12
 800187c:	e84c 3100 	strex	r1, r3, [ip]
 8001880:	2900      	cmp	r1, #0
 8001882:	d1f3      	bne.n	800186c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001884:	2320      	movs	r3, #32
 8001886:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800188a:	2300      	movs	r3, #0
 800188c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800188e:	4770      	bx	lr

08001890 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001890:	6802      	ldr	r2, [r0, #0]
 8001892:	68c1      	ldr	r1, [r0, #12]
{
 8001894:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001896:	6913      	ldr	r3, [r2, #16]
 8001898:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800189c:	430b      	orrs	r3, r1
 800189e:	6113      	str	r3, [r2, #16]
{
 80018a0:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018a2:	6883      	ldr	r3, [r0, #8]
 80018a4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80018a6:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018a8:	4303      	orrs	r3, r0
 80018aa:	6968      	ldr	r0, [r5, #20]
 80018ac:	4303      	orrs	r3, r0
 80018ae:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 80018b0:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 80018b4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018b8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80018ba:	430b      	orrs	r3, r1
 80018bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018be:	6953      	ldr	r3, [r2, #20]
 80018c0:	69a9      	ldr	r1, [r5, #24]
 80018c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018c6:	430b      	orrs	r3, r1
 80018c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80018ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <UART_SetConfig+0xb8>)
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d003      	beq.n	80018d8 <UART_SetConfig+0x48>
 80018d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d124      	bne.n	8001922 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80018d8:	f7ff fb52 	bl	8000f80 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018dc:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80018de:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018e0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80018e4:	e9d5 4300 	ldrd	r4, r3, [r5]
 80018e8:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018ec:	d11c      	bne.n	8001928 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80018ee:	18da      	adds	r2, r3, r3
 80018f0:	f04f 0500 	mov.w	r5, #0
 80018f4:	eb45 0305 	adc.w	r3, r5, r5
 80018f8:	f7fe fc8c 	bl	8000214 <__aeabi_uldivmod>
 80018fc:	2264      	movs	r2, #100	@ 0x64
 80018fe:	fbb0 f1f2 	udiv	r1, r0, r2
 8001902:	fb02 0311 	mls	r3, r2, r1, r0
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	3332      	adds	r3, #50	@ 0x32
 800190a:	fbb3 f3f2 	udiv	r3, r3, r2
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001918:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800191c:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800191e:	60a3      	str	r3, [r4, #8]
  }
}
 8001920:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001922:	f7ff fb1d 	bl	8000f60 <HAL_RCC_GetPCLK1Freq>
 8001926:	e7d9      	b.n	80018dc <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001928:	009a      	lsls	r2, r3, #2
 800192a:	0f9b      	lsrs	r3, r3, #30
 800192c:	f7fe fc72 	bl	8000214 <__aeabi_uldivmod>
 8001930:	2264      	movs	r2, #100	@ 0x64
 8001932:	fbb0 f1f2 	udiv	r1, r0, r2
 8001936:	fb02 0311 	mls	r3, r2, r1, r0
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	3332      	adds	r3, #50	@ 0x32
 800193e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001942:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001946:	e7ea      	b.n	800191e <UART_SetConfig+0x8e>
 8001948:	40011000 	.word	0x40011000

0800194c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800194c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800194e:	4605      	mov	r5, r0
 8001950:	460c      	mov	r4, r1
 8001952:	4617      	mov	r7, r2
 8001954:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001956:	682a      	ldr	r2, [r5, #0]
 8001958:	6813      	ldr	r3, [r2, #0]
 800195a:	ea34 0303 	bics.w	r3, r4, r3
 800195e:	d101      	bne.n	8001964 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001960:	2000      	movs	r0, #0
 8001962:	e021      	b.n	80019a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001964:	1c70      	adds	r0, r6, #1
 8001966:	d0f7      	beq.n	8001958 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001968:	f7ff f90e 	bl	8000b88 <HAL_GetTick>
 800196c:	1bc0      	subs	r0, r0, r7
 800196e:	4286      	cmp	r6, r0
 8001970:	d31c      	bcc.n	80019ac <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8001972:	b1de      	cbz	r6, 80019ac <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	0751      	lsls	r1, r2, #29
 800197a:	d5ec      	bpl.n	8001956 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800197c:	2c80      	cmp	r4, #128	@ 0x80
 800197e:	d0ea      	beq.n	8001956 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8001980:	2c40      	cmp	r4, #64	@ 0x40
 8001982:	d0e8      	beq.n	8001956 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	0712      	lsls	r2, r2, #28
 8001988:	d5e5      	bpl.n	8001956 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800198a:	2400      	movs	r4, #0
 800198c:	9401      	str	r4, [sp, #4]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	9201      	str	r2, [sp, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001996:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001998:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800199a:	f7ff ff4b 	bl	8001834 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800199e:	2308      	movs	r3, #8
 80019a0:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80019a2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80019a6:	2001      	movs	r0, #1
}
 80019a8:	b003      	add	sp, #12
 80019aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80019ac:	2003      	movs	r0, #3
 80019ae:	e7fb      	b.n	80019a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

080019b0 <HAL_UART_Init>:
{
 80019b0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80019b2:	4604      	mov	r4, r0
 80019b4:	b348      	cbz	r0, 8001a0a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80019b6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80019ba:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80019be:	b91b      	cbnz	r3, 80019c8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80019c0:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80019c4:	f7ff f822 	bl	8000a0c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80019c8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80019ca:	2324      	movs	r3, #36	@ 0x24
 80019cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80019d0:	68d3      	ldr	r3, [r2, #12]
 80019d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80019d6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff ff59 	bl	8001890 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019ee:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019f6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019f8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80019fa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fc:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019fe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a02:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a06:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001a08:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	e7fc      	b.n	8001a08 <HAL_UART_Init+0x58>

08001a0e <HAL_UART_Transmit>:
{
 8001a0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a12:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001a14:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001a18:	2b20      	cmp	r3, #32
{
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	460e      	mov	r6, r1
 8001a1e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001a20:	d13f      	bne.n	8001aa2 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8001a22:	2900      	cmp	r1, #0
 8001a24:	d03f      	beq.n	8001aa6 <HAL_UART_Transmit+0x98>
 8001a26:	2a00      	cmp	r2, #0
 8001a28:	d03d      	beq.n	8001aa6 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a2a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a30:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001a34:	f7ff f8a8 	bl	8000b88 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a38:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8001a3a:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8001a40:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8001a42:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a44:	d103      	bne.n	8001a4e <HAL_UART_Transmit+0x40>
 8001a46:	6923      	ldr	r3, [r4, #16]
 8001a48:	b90b      	cbnz	r3, 8001a4e <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 8001a4a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001a4c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8001a4e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b953      	cbnz	r3, 8001a6a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a54:	4643      	mov	r3, r8
 8001a56:	464a      	mov	r2, r9
 8001a58:	2140      	movs	r1, #64	@ 0x40
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff ff76 	bl	800194c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001a60:	2320      	movs	r3, #32
 8001a62:	b950      	cbnz	r0, 8001a7a <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8001a64:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001a68:	e00a      	b.n	8001a80 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a6a:	4643      	mov	r3, r8
 8001a6c:	464a      	mov	r2, r9
 8001a6e:	2180      	movs	r1, #128	@ 0x80
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff ff6b 	bl	800194c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001a76:	b128      	cbz	r0, 8001a84 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001a7e:	2003      	movs	r0, #3
}
 8001a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a84:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001a86:	b94e      	cbnz	r6, 8001a9c <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a88:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a90:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001a92:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8001a94:	3901      	subs	r1, #1
 8001a96:	b289      	uxth	r1, r1
 8001a98:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8001a9a:	e7d8      	b.n	8001a4e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a9c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001aa0:	e7f6      	b.n	8001a90 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	e7ec      	b.n	8001a80 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	e7ea      	b.n	8001a80 <HAL_UART_Transmit+0x72>

08001aaa <memset>:
 8001aaa:	4402      	add	r2, r0
 8001aac:	4603      	mov	r3, r0
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d100      	bne.n	8001ab4 <memset+0xa>
 8001ab2:	4770      	bx	lr
 8001ab4:	f803 1b01 	strb.w	r1, [r3], #1
 8001ab8:	e7f9      	b.n	8001aae <memset+0x4>
	...

08001abc <__libc_init_array>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	4d0d      	ldr	r5, [pc, #52]	@ (8001af4 <__libc_init_array+0x38>)
 8001ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8001af8 <__libc_init_array+0x3c>)
 8001ac2:	1b64      	subs	r4, r4, r5
 8001ac4:	10a4      	asrs	r4, r4, #2
 8001ac6:	2600      	movs	r6, #0
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d109      	bne.n	8001ae0 <__libc_init_array+0x24>
 8001acc:	4d0b      	ldr	r5, [pc, #44]	@ (8001afc <__libc_init_array+0x40>)
 8001ace:	4c0c      	ldr	r4, [pc, #48]	@ (8001b00 <__libc_init_array+0x44>)
 8001ad0:	f000 f818 	bl	8001b04 <_init>
 8001ad4:	1b64      	subs	r4, r4, r5
 8001ad6:	10a4      	asrs	r4, r4, #2
 8001ad8:	2600      	movs	r6, #0
 8001ada:	42a6      	cmp	r6, r4
 8001adc:	d105      	bne.n	8001aea <__libc_init_array+0x2e>
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
 8001ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ae4:	4798      	blx	r3
 8001ae6:	3601      	adds	r6, #1
 8001ae8:	e7ee      	b.n	8001ac8 <__libc_init_array+0xc>
 8001aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aee:	4798      	blx	r3
 8001af0:	3601      	adds	r6, #1
 8001af2:	e7f2      	b.n	8001ada <__libc_init_array+0x1e>
 8001af4:	08001b64 	.word	0x08001b64
 8001af8:	08001b64 	.word	0x08001b64
 8001afc:	08001b64 	.word	0x08001b64
 8001b00:	08001b68 	.word	0x08001b68

08001b04 <_init>:
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	bf00      	nop
 8001b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0a:	bc08      	pop	{r3}
 8001b0c:	469e      	mov	lr, r3
 8001b0e:	4770      	bx	lr

08001b10 <_fini>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	bf00      	nop
 8001b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b16:	bc08      	pop	{r3}
 8001b18:	469e      	mov	lr, r3
 8001b1a:	4770      	bx	lr
