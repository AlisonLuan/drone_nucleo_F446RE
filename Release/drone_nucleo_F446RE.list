
drone_nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a88  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002c4c  08002c4c  00003c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c8c  08002c8c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002c8c  08002c8c  00003c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c94  08002c94  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c98  08002c98  00003c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  08002ca8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08002ca8  00004188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a20  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230b  00000000  00000000  00018a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c650  00000000  00000000  0001ad67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  000273b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bce  00000000  00000000  00028138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220c5  00000000  00000000  00028d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fa9  00000000  00000000  0004adcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ccc  00000000  00000000  00062d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135a40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000267c  00000000  00000000  00135a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00138100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c34 	.word	0x08002c34

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002c34 	.word	0x08002c34

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <Debug_Send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Send(const char *msg)
{
 8000540:	b510      	push	{r4, lr}
 8000542:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000544:	f7ff fe5e 	bl	8000204 <strlen>
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	b282      	uxth	r2, r0
 800054e:	4621      	mov	r1, r4
 8000550:	4801      	ldr	r0, [pc, #4]	@ (8000558 <Debug_Send+0x18>)
 8000552:	f002 fad6 	bl	8002b02 <HAL_UART_Transmit>
}
 8000556:	bd10      	pop	{r4, pc}
 8000558:	20000058 	.word	0x20000058

0800055c <SoftStartPWM>:

#define PWM_MAX_STEP 500  // passo máximo permitido por ciclo
#define Kp 0.2f            // ganho proporcional (ajuste conforme necessário)

void SoftStartPWM(uint32_t *current, uint32_t target)
{
 800055c:	b410      	push	{r4}
	int32_t error = (int32_t)target - (int32_t)(*current);
 800055e:	6802      	ldr	r2, [r0, #0]
 8000560:	1a8b      	subs	r3, r1, r2
 8000562:	ee07 3a90 	vmov	s15, r3
	int32_t step = (int32_t)(Kp * error);
 8000566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800056a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80005ac <SoftStartPWM+0x50>
 800056e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000576:	ee17 3a90 	vmov	r3, s15

	// saturação do passo
	if (step > PWM_MAX_STEP) step = PWM_MAX_STEP;
	else if (step < -PWM_MAX_STEP) step = -PWM_MAX_STEP;
 800057a:	4c0d      	ldr	r4, [pc, #52]	@ (80005b0 <SoftStartPWM+0x54>)
 800057c:	429c      	cmp	r4, r3
 800057e:	bfb8      	it	lt
 8000580:	461c      	movlt	r4, r3

	*current += step;
 8000582:	f5b4 7ffa 	cmp.w	r4, #500	@ 0x1f4
 8000586:	bfd4      	ite	le
 8000588:	1912      	addle	r2, r2, r4
 800058a:	f502 72fa 	addgt.w	r2, r2, #500	@ 0x1f4
 800058e:	6002      	str	r2, [r0, #0]

	// proteção contra overshoot (caso o passo cause ultrapassagem)
	if ((step > 0 && *current > target) || (step < 0 && *current < target)) {
 8000590:	2b00      	cmp	r3, #0
 8000592:	dd05      	ble.n	80005a0 <SoftStartPWM+0x44>
 8000594:	428a      	cmp	r2, r1
 8000596:	d900      	bls.n	800059a <SoftStartPWM+0x3e>
		*current = target;
 8000598:	6001      	str	r1, [r0, #0]
	}
}
 800059a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800059e:	4770      	bx	lr
	if ((step > 0 && *current > target) || (step < 0 && *current < target)) {
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dafa      	bge.n	800059a <SoftStartPWM+0x3e>
 80005a4:	428a      	cmp	r2, r1
 80005a6:	d2f8      	bcs.n	800059a <SoftStartPWM+0x3e>
 80005a8:	e7f6      	b.n	8000598 <SoftStartPWM+0x3c>
 80005aa:	bf00      	nop
 80005ac:	3e4ccccd 	.word	0x3e4ccccd
 80005b0:	fffffe0c 	.word	0xfffffe0c

080005b4 <UpdatePWM>:


void UpdatePWM(void)
{
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SoftStartPWM((uint32_t*)&PWM_D9, PWM_D9_Target);
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <UpdatePWM+0x4c>)
 80005b8:	6819      	ldr	r1, [r3, #0]
 80005ba:	4f12      	ldr	r7, [pc, #72]	@ (8000604 <UpdatePWM+0x50>)
 80005bc:	4638      	mov	r0, r7
 80005be:	f7ff ffcd 	bl	800055c <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D6, PWM_D6_Target);
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <UpdatePWM+0x54>)
 80005c4:	6819      	ldr	r1, [r3, #0]
 80005c6:	4e11      	ldr	r6, [pc, #68]	@ (800060c <UpdatePWM+0x58>)
 80005c8:	4630      	mov	r0, r6
 80005ca:	f7ff ffc7 	bl	800055c <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D5, PWM_D5_Target);
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <UpdatePWM+0x5c>)
 80005d0:	6819      	ldr	r1, [r3, #0]
 80005d2:	4d10      	ldr	r5, [pc, #64]	@ (8000614 <UpdatePWM+0x60>)
 80005d4:	4628      	mov	r0, r5
 80005d6:	f7ff ffc1 	bl	800055c <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D3, PWM_D3_Target);
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <UpdatePWM+0x64>)
 80005dc:	6819      	ldr	r1, [r3, #0]
 80005de:	4c0f      	ldr	r4, [pc, #60]	@ (800061c <UpdatePWM+0x68>)
 80005e0:	4620      	mov	r0, r4
 80005e2:	f7ff ffbb 	bl	800055c <SoftStartPWM>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_D9);
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <UpdatePWM+0x6c>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	6393      	str	r3, [r2, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM_D6);
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <UpdatePWM+0x70>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6831      	ldr	r1, [r6, #0]
 80005f4:	63d9      	str	r1, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_D5);
 80005f6:	6829      	ldr	r1, [r5, #0]
 80005f8:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_D3);
 80005fa:	6822      	ldr	r2, [r4, #0]
 80005fc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80005fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000600:	20000044 	.word	0x20000044
 8000604:	20000054 	.word	0x20000054
 8000608:	20000040 	.word	0x20000040
 800060c:	20000050 	.word	0x20000050
 8000610:	2000003c 	.word	0x2000003c
 8000614:	2000004c 	.word	0x2000004c
 8000618:	20000038 	.word	0x20000038
 800061c:	20000048 	.word	0x20000048
 8000620:	200000a0 	.word	0x200000a0
 8000624:	200000e8 	.word	0x200000e8

08000628 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000628:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	Debug_Send("Error_Handler\r\n");
 800062a:	4802      	ldr	r0, [pc, #8]	@ (8000634 <Error_Handler+0xc>)
 800062c:	f7ff ff88 	bl	8000540 <Debug_Send>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
	__disable_irq();
	while (1)
 8000632:	e7fe      	b.n	8000632 <Error_Handler+0xa>
 8000634:	08002c4c 	.word	0x08002c4c

08000638 <SystemClock_Config>:
{
 8000638:	b500      	push	{lr}
 800063a:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063c:	2234      	movs	r2, #52	@ 0x34
 800063e:	2100      	movs	r1, #0
 8000640:	a807      	add	r0, sp, #28
 8000642:	f002 faca 	bl	8002bda <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000646:	2300      	movs	r3, #0
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	9303      	str	r3, [sp, #12]
 800064c:	9304      	str	r3, [sp, #16]
 800064e:	9305      	str	r3, [sp, #20]
 8000650:	9306      	str	r3, [sp, #24]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4a1f      	ldr	r2, [pc, #124]	@ (80006d4 <SystemClock_Config+0x9c>)
 8000656:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000658:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800065c:	6411      	str	r1, [r2, #64]	@ 0x40
 800065e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000660:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000664:	9200      	str	r2, [sp, #0]
 8000666:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	491b      	ldr	r1, [pc, #108]	@ (80006d8 <SystemClock_Config+0xa0>)
 800066c:	680a      	ldr	r2, [r1, #0]
 800066e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000672:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000676:	600a      	str	r2, [r1, #0]
 8000678:	680a      	ldr	r2, [r1, #0]
 800067a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000682:	2202      	movs	r2, #2
 8000684:	9207      	str	r2, [sp, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	2101      	movs	r1, #1
 8000688:	910a      	str	r1, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	2110      	movs	r1, #16
 800068c:	910b      	str	r1, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	920d      	str	r2, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	930e      	str	r3, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000692:	910f      	str	r1, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000698:	9310      	str	r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	9311      	str	r3, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800069e:	9212      	str	r2, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006a0:	9213      	str	r2, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	a807      	add	r0, sp, #28
 80006a4:	f001 fc26 	bl	8001ef4 <HAL_RCC_OscConfig>
 80006a8:	b980      	cbnz	r0, 80006cc <SystemClock_Config+0x94>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2102      	movs	r1, #2
 80006b0:	9103      	str	r1, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006ba:	9205      	str	r2, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	a802      	add	r0, sp, #8
 80006c0:	f001 fa7e 	bl	8001bc0 <HAL_RCC_ClockConfig>
 80006c4:	b920      	cbnz	r0, 80006d0 <SystemClock_Config+0x98>
}
 80006c6:	b015      	add	sp, #84	@ 0x54
 80006c8:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80006cc:	f7ff ffac 	bl	8000628 <Error_Handler>
		Error_Handler();
 80006d0:	f7ff ffaa 	bl	8000628 <Error_Handler>
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <main>:
{
 80006dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006e0:	b08e      	sub	sp, #56	@ 0x38
	HAL_Init();
 80006e2:	f000 fb65 	bl	8000db0 <HAL_Init>
	SystemClock_Config();
 80006e6:	f7ff ffa7 	bl	8000638 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	2400      	movs	r4, #0
 80006ec:	9407      	str	r4, [sp, #28]
 80006ee:	9408      	str	r4, [sp, #32]
 80006f0:	9409      	str	r4, [sp, #36]	@ 0x24
 80006f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80006f4:	940b      	str	r4, [sp, #44]	@ 0x2c
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	9401      	str	r4, [sp, #4]
 80006f8:	4b8f      	ldr	r3, [pc, #572]	@ (8000938 <main+0x25c>)
 80006fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006fc:	f042 0204 	orr.w	r2, r2, #4
 8000700:	631a      	str	r2, [r3, #48]	@ 0x30
 8000702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000704:	f002 0204 	and.w	r2, r2, #4
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800070c:	9402      	str	r4, [sp, #8]
 800070e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000710:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000714:	631a      	str	r2, [r3, #48]	@ 0x30
 8000716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000718:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800071c:	9202      	str	r2, [sp, #8]
 800071e:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	9403      	str	r4, [sp, #12]
 8000722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000724:	f042 0201 	orr.w	r2, r2, #1
 8000728:	631a      	str	r2, [r3, #48]	@ 0x30
 800072a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800072c:	f002 0201 	and.w	r2, r2, #1
 8000730:	9203      	str	r2, [sp, #12]
 8000732:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	9404      	str	r4, [sp, #16]
 8000736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000738:	f042 0202 	orr.w	r2, r2, #2
 800073c:	631a      	str	r2, [r3, #48]	@ 0x30
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	9304      	str	r3, [sp, #16]
 8000746:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000748:	4d7c      	ldr	r5, [pc, #496]	@ (800093c <main+0x260>)
 800074a:	4622      	mov	r2, r4
 800074c:	2120      	movs	r1, #32
 800074e:	4628      	mov	r0, r5
 8000750:	f000 fcac 	bl	80010ac <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 8000754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000758:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800075e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	9409      	str	r4, [sp, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000762:	a907      	add	r1, sp, #28
 8000764:	4876      	ldr	r0, [pc, #472]	@ (8000940 <main+0x264>)
 8000766:	f000 fbab 	bl	8000ec0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 800076a:	2320      	movs	r3, #32
 800076c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	9409      	str	r4, [sp, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	940a      	str	r4, [sp, #40]	@ 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000776:	a907      	add	r1, sp, #28
 8000778:	4628      	mov	r0, r5
 800077a:	f000 fba1 	bl	8000ec0 <HAL_GPIO_Init>
	huart2.Instance = USART2;
 800077e:	4871      	ldr	r0, [pc, #452]	@ (8000944 <main+0x268>)
 8000780:	4b71      	ldr	r3, [pc, #452]	@ (8000948 <main+0x26c>)
 8000782:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8000784:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000788:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	230c      	movs	r3, #12
 8000792:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000794:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000796:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000798:	f002 f983 	bl	8002aa2 <HAL_UART_Init>
 800079c:	2800      	cmp	r0, #0
 800079e:	f040 80a4 	bne.w	80008ea <main+0x20e>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a2:	2300      	movs	r3, #0
 80007a4:	9305      	str	r3, [sp, #20]
 80007a6:	9306      	str	r3, [sp, #24]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	9307      	str	r3, [sp, #28]
 80007aa:	9308      	str	r3, [sp, #32]
 80007ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80007ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80007b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80007b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80007b4:	930d      	str	r3, [sp, #52]	@ 0x34
	htim2.Instance = TIM2;
 80007b6:	4865      	ldr	r0, [pc, #404]	@ (800094c <main+0x270>)
 80007b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007bc:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 83;
 80007be:	2253      	movs	r2, #83	@ 0x53
 80007c0:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 19999;
 80007c4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007c8:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ce:	f001 fedb 	bl	8002588 <HAL_TIM_PWM_Init>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	f040 808b 	bne.w	80008ee <main+0x212>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	9305      	str	r3, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007dc:	9306      	str	r3, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007de:	a905      	add	r1, sp, #20
 80007e0:	485a      	ldr	r0, [pc, #360]	@ (800094c <main+0x270>)
 80007e2:	f002 f827 	bl	8002834 <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	f040 8083 	bne.w	80008f2 <main+0x216>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2360      	movs	r3, #96	@ 0x60
 80007ee:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	9308      	str	r3, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f4:	9309      	str	r3, [sp, #36]	@ 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f6:	930b      	str	r3, [sp, #44]	@ 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f8:	2204      	movs	r2, #4
 80007fa:	a907      	add	r1, sp, #28
 80007fc:	4853      	ldr	r0, [pc, #332]	@ (800094c <main+0x270>)
 80007fe:	f001 ff21 	bl	8002644 <HAL_TIM_PWM_ConfigChannel>
 8000802:	2800      	cmp	r0, #0
 8000804:	d177      	bne.n	80008f6 <main+0x21a>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000806:	2208      	movs	r2, #8
 8000808:	a907      	add	r1, sp, #28
 800080a:	4850      	ldr	r0, [pc, #320]	@ (800094c <main+0x270>)
 800080c:	f001 ff1a 	bl	8002644 <HAL_TIM_PWM_ConfigChannel>
 8000810:	2800      	cmp	r0, #0
 8000812:	d172      	bne.n	80008fa <main+0x21e>
	HAL_TIM_MspPostInit(&htim2);
 8000814:	484d      	ldr	r0, [pc, #308]	@ (800094c <main+0x270>)
 8000816:	f000 f9d1 	bl	8000bbc <HAL_TIM_MspPostInit>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081a:	2300      	movs	r3, #0
 800081c:	9305      	str	r3, [sp, #20]
 800081e:	9306      	str	r3, [sp, #24]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000820:	9307      	str	r3, [sp, #28]
 8000822:	9308      	str	r3, [sp, #32]
 8000824:	9309      	str	r3, [sp, #36]	@ 0x24
 8000826:	930a      	str	r3, [sp, #40]	@ 0x28
 8000828:	930b      	str	r3, [sp, #44]	@ 0x2c
 800082a:	930c      	str	r3, [sp, #48]	@ 0x30
 800082c:	930d      	str	r3, [sp, #52]	@ 0x34
	htim3.Instance = TIM3;
 800082e:	4848      	ldr	r0, [pc, #288]	@ (8000950 <main+0x274>)
 8000830:	4a48      	ldr	r2, [pc, #288]	@ (8000954 <main+0x278>)
 8000832:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 83;
 8000834:	2253      	movs	r2, #83	@ 0x53
 8000836:	6042      	str	r2, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 19999;
 800083a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800083e:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000844:	f001 fea0 	bl	8002588 <HAL_TIM_PWM_Init>
 8000848:	2800      	cmp	r0, #0
 800084a:	d158      	bne.n	80008fe <main+0x222>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	9305      	str	r3, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	9306      	str	r3, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000852:	a905      	add	r1, sp, #20
 8000854:	483e      	ldr	r0, [pc, #248]	@ (8000950 <main+0x274>)
 8000856:	f001 ffed 	bl	8002834 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	2800      	cmp	r0, #0
 800085c:	d151      	bne.n	8000902 <main+0x226>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	2360      	movs	r3, #96	@ 0x60
 8000860:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 8000862:	2200      	movs	r2, #0
 8000864:	9208      	str	r2, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	9209      	str	r2, [sp, #36]	@ 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000868:	920b      	str	r2, [sp, #44]	@ 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086a:	a907      	add	r1, sp, #28
 800086c:	4838      	ldr	r0, [pc, #224]	@ (8000950 <main+0x274>)
 800086e:	f001 fee9 	bl	8002644 <HAL_TIM_PWM_ConfigChannel>
 8000872:	2800      	cmp	r0, #0
 8000874:	d147      	bne.n	8000906 <main+0x22a>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000876:	2204      	movs	r2, #4
 8000878:	a907      	add	r1, sp, #28
 800087a:	4835      	ldr	r0, [pc, #212]	@ (8000950 <main+0x274>)
 800087c:	f001 fee2 	bl	8002644 <HAL_TIM_PWM_ConfigChannel>
 8000880:	2800      	cmp	r0, #0
 8000882:	d142      	bne.n	800090a <main+0x22e>
	HAL_TIM_MspPostInit(&htim3);
 8000884:	4832      	ldr	r0, [pc, #200]	@ (8000950 <main+0x274>)
 8000886:	f000 f999 	bl	8000bbc <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 800088a:	4833      	ldr	r0, [pc, #204]	@ (8000958 <main+0x27c>)
 800088c:	4b33      	ldr	r3, [pc, #204]	@ (800095c <main+0x280>)
 800088e:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000890:	4b33      	ldr	r3, [pc, #204]	@ (8000960 <main+0x284>)
 8000892:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000894:	2300      	movs	r3, #0
 8000896:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000898:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800089e:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80008a2:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a4:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a8:	f000 fe8c 	bl	80015c4 <HAL_I2C_Init>
 80008ac:	bb78      	cbnz	r0, 800090e <main+0x232>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80008ae:	4c27      	ldr	r4, [pc, #156]	@ (800094c <main+0x270>)
 80008b0:	2104      	movs	r1, #4
 80008b2:	4620      	mov	r0, r4
 80008b4:	f001 ff44 	bl	8002740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80008b8:	2108      	movs	r1, #8
 80008ba:	4620      	mov	r0, r4
 80008bc:	f001 ff40 	bl	8002740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008c0:	4c23      	ldr	r4, [pc, #140]	@ (8000950 <main+0x274>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4620      	mov	r0, r4
 80008c6:	f001 ff3b 	bl	8002740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80008ca:	2104      	movs	r1, #4
 80008cc:	4620      	mov	r0, r4
 80008ce:	f001 ff37 	bl	8002740 <HAL_TIM_PWM_Start>
	Debug_Send("System Init Complete\r\n");
 80008d2:	4824      	ldr	r0, [pc, #144]	@ (8000964 <main+0x288>)
 80008d4:	f7ff fe34 	bl	8000540 <Debug_Send>
	MPU6050_Init(&hi2c1);
 80008d8:	481f      	ldr	r0, [pc, #124]	@ (8000958 <main+0x27c>)
 80008da:	f000 f847 	bl	800096c <MPU6050_Init>
	uint32_t lastBlink = 0;
 80008de:	2500      	movs	r5, #0
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008e0:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800093c <main+0x260>
		MPU6050_ReadAll(&hi2c1, &imu_data);
 80008e4:	4f20      	ldr	r7, [pc, #128]	@ (8000968 <main+0x28c>)
 80008e6:	4e1c      	ldr	r6, [pc, #112]	@ (8000958 <main+0x27c>)
 80008e8:	e01e      	b.n	8000928 <main+0x24c>
		Error_Handler();
 80008ea:	f7ff fe9d 	bl	8000628 <Error_Handler>
		Error_Handler();
 80008ee:	f7ff fe9b 	bl	8000628 <Error_Handler>
		Error_Handler();
 80008f2:	f7ff fe99 	bl	8000628 <Error_Handler>
		Error_Handler();
 80008f6:	f7ff fe97 	bl	8000628 <Error_Handler>
		Error_Handler();
 80008fa:	f7ff fe95 	bl	8000628 <Error_Handler>
		Error_Handler();
 80008fe:	f7ff fe93 	bl	8000628 <Error_Handler>
		Error_Handler();
 8000902:	f7ff fe91 	bl	8000628 <Error_Handler>
		Error_Handler();
 8000906:	f7ff fe8f 	bl	8000628 <Error_Handler>
		Error_Handler();
 800090a:	f7ff fe8d 	bl	8000628 <Error_Handler>
		Error_Handler();
 800090e:	f7ff fe8b 	bl	8000628 <Error_Handler>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000912:	2120      	movs	r1, #32
 8000914:	4640      	mov	r0, r8
 8000916:	f000 fbcf 	bl	80010b8 <HAL_GPIO_TogglePin>
			lastBlink = now;
 800091a:	4625      	mov	r5, r4
		MPU6050_ReadAll(&hi2c1, &imu_data);
 800091c:	4639      	mov	r1, r7
 800091e:	4630      	mov	r0, r6
 8000920:	f000 f887 	bl	8000a32 <MPU6050_ReadAll>
		UpdatePWM(); // This runs as fast as possible
 8000924:	f7ff fe46 	bl	80005b4 <UpdatePWM>
		uint32_t now = HAL_GetTick();
 8000928:	f000 fa68 	bl	8000dfc <HAL_GetTick>
 800092c:	4604      	mov	r4, r0
		if (now - lastBlink >= 500)
 800092e:	1b43      	subs	r3, r0, r5
 8000930:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000934:	d2ed      	bcs.n	8000912 <main+0x236>
 8000936:	e7f1      	b.n	800091c <main+0x240>
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000
 8000940:	40020800 	.word	0x40020800
 8000944:	20000058 	.word	0x20000058
 8000948:	40004400 	.word	0x40004400
 800094c:	200000e8 	.word	0x200000e8
 8000950:	200000a0 	.word	0x200000a0
 8000954:	40000400 	.word	0x40000400
 8000958:	20000130 	.word	0x20000130
 800095c:	40005400 	.word	0x40005400
 8000960:	000186a0 	.word	0x000186a0
 8000964:	08002c5c 	.word	0x08002c5c
 8000968:	20000028 	.word	0x20000028

0800096c <MPU6050_Init>:
#define MPU6050_REG_ACCEL_XOUT_H 0x3B
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 800096c:	b510      	push	{r4, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	4604      	mov	r4, r0
	uint8_t data;

	/* Wake up the sensor */
	data = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	2301      	movs	r3, #1
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	f10d 0217 	add.w	r2, sp, #23
 8000986:	9200      	str	r2, [sp, #0]
 8000988:	226b      	movs	r2, #107	@ 0x6b
 800098a:	21d0      	movs	r1, #208	@ 0xd0
 800098c:	f000 fedc 	bl	8001748 <HAL_I2C_Mem_Write>
 8000990:	b110      	cbz	r0, 8000998 <MPU6050_Init+0x2c>
		return HAL_ERROR;
 8000992:	2001      	movs	r0, #1
	data = 0x08;
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
		return HAL_ERROR;

	return HAL_OK;
}
 8000994:	b006      	add	sp, #24
 8000996:	bd10      	pop	{r4, pc}
	data = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	9302      	str	r3, [sp, #8]
 80009a4:	2301      	movs	r3, #1
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	f10d 0217 	add.w	r2, sp, #23
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	2219      	movs	r2, #25
 80009b0:	21d0      	movs	r1, #208	@ 0xd0
 80009b2:	4620      	mov	r0, r4
 80009b4:	f000 fec8 	bl	8001748 <HAL_I2C_Mem_Write>
 80009b8:	b108      	cbz	r0, 80009be <MPU6050_Init+0x52>
		return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
 80009bc:	e7ea      	b.n	8000994 <MPU6050_Init+0x28>
	data = 0x03;
 80009be:	2303      	movs	r3, #3
 80009c0:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	9302      	str	r3, [sp, #8]
 80009ca:	2301      	movs	r3, #1
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	f10d 0217 	add.w	r2, sp, #23
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	221a      	movs	r2, #26
 80009d6:	21d0      	movs	r1, #208	@ 0xd0
 80009d8:	4620      	mov	r0, r4
 80009da:	f000 feb5 	bl	8001748 <HAL_I2C_Mem_Write>
 80009de:	b108      	cbz	r0, 80009e4 <MPU6050_Init+0x78>
		return HAL_ERROR;
 80009e0:	2001      	movs	r0, #1
 80009e2:	e7d7      	b.n	8000994 <MPU6050_Init+0x28>
	data = 0x08;
 80009e4:	2308      	movs	r3, #8
 80009e6:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	9302      	str	r3, [sp, #8]
 80009f0:	2301      	movs	r3, #1
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	f10d 0217 	add.w	r2, sp, #23
 80009f8:	9200      	str	r2, [sp, #0]
 80009fa:	221b      	movs	r2, #27
 80009fc:	21d0      	movs	r1, #208	@ 0xd0
 80009fe:	4620      	mov	r0, r4
 8000a00:	f000 fea2 	bl	8001748 <HAL_I2C_Mem_Write>
 8000a04:	b108      	cbz	r0, 8000a0a <MPU6050_Init+0x9e>
		return HAL_ERROR;
 8000a06:	2001      	movs	r0, #1
 8000a08:	e7c4      	b.n	8000994 <MPU6050_Init+0x28>
	data = 0x08;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	f10d 0217 	add.w	r2, sp, #23
 8000a1e:	9200      	str	r2, [sp, #0]
 8000a20:	221c      	movs	r2, #28
 8000a22:	21d0      	movs	r1, #208	@ 0xd0
 8000a24:	4620      	mov	r0, r4
 8000a26:	f000 fe8f 	bl	8001748 <HAL_I2C_Mem_Write>
 8000a2a:	3800      	subs	r0, #0
 8000a2c:	bf18      	it	ne
 8000a2e:	2001      	movne	r0, #1
 8000a30:	e7b0      	b.n	8000994 <MPU6050_Init+0x28>

08000a32 <MPU6050_ReadAll>:

HAL_StatusTypeDef MPU6050_ReadAll(I2C_HandleTypeDef *hi2c, MPU6050_Data_t *data)
{
 8000a32:	b510      	push	{r4, lr}
 8000a34:	b088      	sub	sp, #32
 8000a36:	460c      	mov	r4, r1
	uint8_t buf[14];
	if (HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_XOUT_H, 1, buf, sizeof(buf), HAL_MAX_DELAY) != HAL_OK)
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	230e      	movs	r3, #14
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	ab04      	add	r3, sp, #16
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	223b      	movs	r2, #59	@ 0x3b
 8000a4a:	21d0      	movs	r1, #208	@ 0xd0
 8000a4c:	f000 ff32 	bl	80018b4 <HAL_I2C_Mem_Read>
 8000a50:	bb90      	cbnz	r0, 8000ab8 <MPU6050_ReadAll+0x86>
		return HAL_ERROR;

	data->accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 8000a52:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000a56:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8000a5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a5e:	8023      	strh	r3, [r4, #0]
	data->accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 8000a60:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8000a64:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000a68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a6c:	8063      	strh	r3, [r4, #2]
	data->accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 8000a6e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000a72:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000a76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a7a:	80a3      	strh	r3, [r4, #4]
	data->temp    = (int16_t)(buf[6] << 8 | buf[7]);
 8000a7c:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8000a80:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000a84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a88:	81a3      	strh	r3, [r4, #12]
	data->gyro_x  = (int16_t)(buf[8] << 8 | buf[9]);
 8000a8a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8000a8e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8000a92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a96:	80e3      	strh	r3, [r4, #6]
	data->gyro_y  = (int16_t)(buf[10] << 8 | buf[11]);
 8000a98:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8000a9c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8000aa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000aa4:	8123      	strh	r3, [r4, #8]
	data->gyro_z  = (int16_t)(buf[12] << 8 | buf[13]);
 8000aa6:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8000aaa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8000aae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ab2:	8163      	strh	r3, [r4, #10]

	return HAL_OK;
}
 8000ab4:	b008      	add	sp, #32
 8000ab6:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8000ab8:	2001      	movs	r0, #1
 8000aba:	e7fb      	b.n	8000ab4 <MPU6050_ReadAll+0x82>

08000abc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b500      	push	{lr}
 8000abe:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	9100      	str	r1, [sp, #0]
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_MspInit+0x3c>)
 8000ac6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ac8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000acc:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ace:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ad0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000ad4:	9200      	str	r2, [sp, #0]
 8000ad6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	9101      	str	r1, [sp, #4]
 8000ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000adc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ae0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aec:	2007      	movs	r0, #7
 8000aee:	f000 f98b 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	b003      	add	sp, #12
 8000af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000afc:	b530      	push	{r4, r5, lr}
 8000afe:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	2300      	movs	r3, #0
 8000b02:	9303      	str	r3, [sp, #12]
 8000b04:	9304      	str	r3, [sp, #16]
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	9306      	str	r3, [sp, #24]
 8000b0a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000b0c:	6802      	ldr	r2, [r0, #0]
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <HAL_I2C_MspInit+0x64>)
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d001      	beq.n	8000b18 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b14:	b009      	add	sp, #36	@ 0x24
 8000b16:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	2500      	movs	r5, #0
 8000b1a:	9501      	str	r5, [sp, #4]
 8000b1c:	4c11      	ldr	r4, [pc, #68]	@ (8000b64 <HAL_I2C_MspInit+0x68>)
 8000b1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	9301      	str	r3, [sp, #4]
 8000b2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b30:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b36:	2312      	movs	r3, #18
 8000b38:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	a903      	add	r1, sp, #12
 8000b44:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <HAL_I2C_MspInit+0x6c>)
 8000b46:	f000 f9bb 	bl	8000ec0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4a:	9502      	str	r5, [sp, #8]
 8000b4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b52:	6423      	str	r3, [r4, #64]	@ 0x40
 8000b54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	9b02      	ldr	r3, [sp, #8]
}
 8000b5e:	e7d9      	b.n	8000b14 <HAL_I2C_MspInit+0x18>
 8000b60:	40005400 	.word	0x40005400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400

08000b6c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b6c:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8000b6e:	6803      	ldr	r3, [r0, #0]
 8000b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b74:	d004      	beq.n	8000b80 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8000b76:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x48>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d00e      	beq.n	8000b9a <HAL_TIM_PWM_MspInit+0x2e>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b7c:	b002      	add	sp, #8
 8000b7e:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b88:	f042 0201 	orr.w	r2, r2, #1
 8000b8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	9b00      	ldr	r3, [sp, #0]
 8000b98:	e7f0      	b.n	8000b7c <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000ba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ba2:	f042 0202 	orr.w	r2, r2, #2
 8000ba6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	9b01      	ldr	r3, [sp, #4]
}
 8000bb2:	e7e3      	b.n	8000b7c <HAL_TIM_PWM_MspInit+0x10>
 8000bb4:	40000400 	.word	0x40000400
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bbc:	b530      	push	{r4, r5, lr}
 8000bbe:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9303      	str	r3, [sp, #12]
 8000bc4:	9304      	str	r3, [sp, #16]
 8000bc6:	9305      	str	r3, [sp, #20]
 8000bc8:	9306      	str	r3, [sp, #24]
 8000bca:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 8000bcc:	6803      	ldr	r3, [r0, #0]
 8000bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bd2:	d004      	beq.n	8000bde <HAL_TIM_MspPostInit+0x22>

    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8000bd4:	4a23      	ldr	r2, [pc, #140]	@ (8000c64 <HAL_TIM_MspPostInit+0xa8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d019      	beq.n	8000c0e <HAL_TIM_MspPostInit+0x52>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bda:	b009      	add	sp, #36	@ 0x24
 8000bdc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <HAL_TIM_MspPostInit+0xac>)
 8000be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000be6:	f042 0202 	orr.w	r2, r2, #2
 8000bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000bf6:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8000bfa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c00:	2301      	movs	r3, #1
 8000c02:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	a903      	add	r1, sp, #12
 8000c06:	4819      	ldr	r0, [pc, #100]	@ (8000c6c <HAL_TIM_MspPostInit+0xb0>)
 8000c08:	f000 f95a 	bl	8000ec0 <HAL_GPIO_Init>
 8000c0c:	e7e5      	b.n	8000bda <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2500      	movs	r5, #0
 8000c10:	9501      	str	r5, [sp, #4]
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <HAL_TIM_MspPostInit+0xac>)
 8000c14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c16:	f042 0204 	orr.w	r2, r2, #4
 8000c1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c1e:	f002 0204 	and.w	r2, r2, #4
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	9502      	str	r5, [sp, #8]
 8000c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c2a:	f042 0202 	orr.w	r2, r2, #2
 8000c2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c3a:	2380      	movs	r3, #128	@ 0x80
 8000c3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2402      	movs	r4, #2
 8000c40:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c42:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	a903      	add	r1, sp, #12
 8000c46:	480a      	ldr	r0, [pc, #40]	@ (8000c70 <HAL_TIM_MspPostInit+0xb4>)
 8000c48:	f000 f93a 	bl	8000ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c56:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	a903      	add	r1, sp, #12
 8000c5a:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <HAL_TIM_MspPostInit+0xb0>)
 8000c5c:	f000 f930 	bl	8000ec0 <HAL_GPIO_Init>
}
 8000c60:	e7bb      	b.n	8000bda <HAL_TIM_MspPostInit+0x1e>
 8000c62:	bf00      	nop
 8000c64:	40000400 	.word	0x40000400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40020800 	.word	0x40020800

08000c74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b500      	push	{lr}
 8000c76:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9303      	str	r3, [sp, #12]
 8000c7c:	9304      	str	r3, [sp, #16]
 8000c7e:	9305      	str	r3, [sp, #20]
 8000c80:	9306      	str	r3, [sp, #24]
 8000c82:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000c84:	6802      	ldr	r2, [r0, #0]
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_UART_MspInit+0x68>)
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d002      	beq.n	8000c92 <HAL_UART_MspInit+0x1e>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c8c:	b009      	add	sp, #36	@ 0x24
 8000c8e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c92:	2100      	movs	r1, #0
 8000c94:	9101      	str	r1, [sp, #4]
 8000c96:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8000c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c9c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000ca0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca4:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000ca8:	9201      	str	r2, [sp, #4]
 8000caa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	9102      	str	r1, [sp, #8]
 8000cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cb0:	f042 0201 	orr.w	r2, r2, #1
 8000cb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	a903      	add	r1, sp, #12
 8000cd2:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <HAL_UART_MspInit+0x6c>)
 8000cd4:	f000 f8f4 	bl	8000ec0 <HAL_GPIO_Init>
}
 8000cd8:	e7d8      	b.n	8000c8c <HAL_UART_MspInit+0x18>
 8000cda:	bf00      	nop
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler>

08000ce6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler>

08000ce8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler>

08000cea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler>

08000cec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler>

08000cee <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf6:	f000 f875 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfa:	bd08      	pop	{r3, pc}

08000cfc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4a03      	ldr	r2, [pc, #12]	@ (8000d0c <SystemInit+0x10>)
 8000cfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d14:	f7ff fff2 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	@ (8000d5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f001 ff55 	bl	8002bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fccb 	bl	80006dc <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d54:	08002c9c 	.word	0x08002c9c
  ldr r2, =_sbss
 8000d58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d5c:	20000188 	.word	0x20000188

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b510      	push	{r4, lr}
 8000d66:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <HAL_InitTick+0x40>)
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d74:	4a0c      	ldr	r2, [pc, #48]	@ (8000da8 <HAL_InitTick+0x44>)
 8000d76:	6810      	ldr	r0, [r2, #0]
 8000d78:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d7c:	f000 f88c 	bl	8000e98 <HAL_SYSTICK_Config>
 8000d80:	b968      	cbnz	r0, 8000d9e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	2c0f      	cmp	r4, #15
 8000d84:	d901      	bls.n	8000d8a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d86:	2001      	movs	r0, #1
 8000d88:	e00a      	b.n	8000da0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4621      	mov	r1, r4
 8000d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d92:	f000 f84b 	bl	8000e2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_InitTick+0x48>)
 8000d98:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d9e:	2001      	movs	r0, #1
}
 8000da0:	bd10      	pop	{r4, pc}
 8000da2:	bf00      	nop
 8000da4:	20000004 	.word	0x20000004
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008

08000db0 <HAL_Init>:
{
 8000db0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_Init+0x30>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000dba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000dc2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000dca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f81b 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff ffc6 	bl	8000d64 <HAL_InitTick>
  HAL_MspInit();
 8000dd8:	f7ff fe70 	bl	8000abc <HAL_MspInit>
}
 8000ddc:	2000      	movs	r0, #0
 8000dde:	bd08      	pop	{r3, pc}
 8000de0:	40023c00 	.word	0x40023c00

08000de4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000de4:	4a03      	ldr	r2, [pc, #12]	@ (8000df4 <HAL_IncTick+0x10>)
 8000de6:	6811      	ldr	r1, [r2, #0]
 8000de8:	4b03      	ldr	r3, [pc, #12]	@ (8000df8 <HAL_IncTick+0x14>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	440b      	add	r3, r1
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000184 	.word	0x20000184
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dfc:	4b01      	ldr	r3, [pc, #4]	@ (8000e04 <HAL_GetTick+0x8>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000184 	.word	0x20000184

08000e08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4907      	ldr	r1, [pc, #28]	@ (8000e28 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e0a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	0203      	lsls	r3, r0, #8
 8000e0e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000e16:	0412      	lsls	r2, r2, #16
 8000e18:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e24:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_NVIC_SetPriority+0x64>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e36:	f1c3 0c07 	rsb	ip, r3, #7
 8000e3a:	f1bc 0f04 	cmp.w	ip, #4
 8000e3e:	bf28      	it	cs
 8000e40:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e44:	f103 0e04 	add.w	lr, r3, #4
 8000e48:	f1be 0f06 	cmp.w	lr, #6
 8000e4c:	bf8c      	ite	hi
 8000e4e:	3b03      	subhi	r3, #3
 8000e50:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e52:	f04f 3eff 	mov.w	lr, #4294967295
 8000e56:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000e5a:	ea21 010c 	bic.w	r1, r1, ip
 8000e5e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e64:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	db09      	blt.n	8000e82 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	0109      	lsls	r1, r1, #4
 8000e70:	b2c9      	uxtb	r1, r1
 8000e72:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000e76:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000e7a:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e7e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	f000 000f 	and.w	r0, r0, #15
 8000e86:	0109      	lsls	r1, r1, #4
 8000e88:	b2c9      	uxtb	r1, r1
 8000e8a:	4b02      	ldr	r3, [pc, #8]	@ (8000e94 <HAL_NVIC_SetPriority+0x68>)
 8000e8c:	5419      	strb	r1, [r3, r0]
 8000e8e:	e7f6      	b.n	8000e7e <HAL_NVIC_SetPriority+0x52>
 8000e90:	e000ed00 	.word	0xe000ed00
 8000e94:	e000ed14 	.word	0xe000ed14

08000e98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	3801      	subs	r0, #1
 8000e9a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e9e:	d20b      	bcs.n	8000eb8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000ea4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <HAL_SYSTICK_Config+0x24>)
 8000ea8:	21f0      	movs	r1, #240	@ 0xf0
 8000eaa:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eae:	2000      	movs	r0, #0
 8000eb0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eb8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec8:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eca:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed0:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed4:	4c72      	ldr	r4, [pc, #456]	@ (80010a0 <HAL_GPIO_Init+0x1e0>)
 8000ed6:	e04b      	b.n	8000f70 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ed8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eda:	fa05 fa02 	lsl.w	sl, r5, r2
 8000ede:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee2:	68cf      	ldr	r7, [r1, #12]
 8000ee4:	4097      	lsls	r7, r2
 8000ee6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000eea:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000eec:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eee:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef2:	684f      	ldr	r7, [r1, #4]
 8000ef4:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8000ef8:	409f      	lsls	r7, r3
 8000efa:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000efe:	6047      	str	r7, [r0, #4]
 8000f00:	e044      	b.n	8000f8c <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	f04f 0c00 	mov.w	ip, #0
 8000f06:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f0a:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f0e:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8000f12:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f18:	684e      	ldr	r6, [r1, #4]
 8000f1a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f1e:	bf0c      	ite	eq
 8000f20:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000f24:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8000f28:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8000f2a:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	684e      	ldr	r6, [r1, #4]
 8000f2e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000f32:	bf0c      	ite	eq
 8000f34:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000f38:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8000f3c:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8000f3e:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f40:	684e      	ldr	r6, [r1, #4]
 8000f42:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f46:	bf0c      	ite	eq
 8000f48:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000f4c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8000f50:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f52:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f54:	684e      	ldr	r6, [r1, #4]
 8000f56:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f5a:	bf0c      	ite	eq
 8000f5c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000f60:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8000f64:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	3301      	adds	r3, #1
 8000f68:	3202      	adds	r2, #2
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	f000 8094 	beq.w	8001098 <HAL_GPIO_Init+0x1d8>
    ioposition = 0x01U << position;
 8000f70:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f74:	680f      	ldr	r7, [r1, #0]
 8000f76:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8000f7a:	ea3c 0707 	bics.w	r7, ip, r7
 8000f7e:	d1f2      	bne.n	8000f66 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f80:	684f      	ldr	r7, [r1, #4]
 8000f82:	f007 0703 	and.w	r7, r7, #3
 8000f86:	3f01      	subs	r7, #1
 8000f88:	2f01      	cmp	r7, #1
 8000f8a:	d9a5      	bls.n	8000ed8 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	684f      	ldr	r7, [r1, #4]
 8000f8e:	f007 0703 	and.w	r7, r7, #3
 8000f92:	2f03      	cmp	r7, #3
 8000f94:	d023      	beq.n	8000fde <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 8000f96:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f98:	fa05 fc02 	lsl.w	ip, r5, r2
 8000f9c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa0:	688f      	ldr	r7, [r1, #8]
 8000fa2:	4097      	lsls	r7, r2
 8000fa4:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8000fa8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	684f      	ldr	r7, [r1, #4]
 8000fac:	f007 0703 	and.w	r7, r7, #3
 8000fb0:	2f02      	cmp	r7, #2
 8000fb2:	d114      	bne.n	8000fde <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8000fb4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000fb8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000fbc:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc0:	f003 0b07 	and.w	fp, r3, #7
 8000fc4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000fc8:	fa08 fa0b 	lsl.w	sl, r8, fp
 8000fcc:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd0:	690f      	ldr	r7, [r1, #16]
 8000fd2:	fa07 f70b 	lsl.w	r7, r7, fp
 8000fd6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000fda:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8000fde:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe0:	fa05 fc02 	lsl.w	ip, r5, r2
 8000fe4:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe8:	684f      	ldr	r7, [r1, #4]
 8000fea:	f007 0703 	and.w	r7, r7, #3
 8000fee:	4097      	lsls	r7, r2
 8000ff0:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8000ff4:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff6:	684f      	ldr	r7, [r1, #4]
 8000ff8:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8000ffc:	d0b3      	beq.n	8000f66 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2700      	movs	r7, #0
 8001000:	9701      	str	r7, [sp, #4]
 8001002:	4e28      	ldr	r6, [pc, #160]	@ (80010a4 <HAL_GPIO_Init+0x1e4>)
 8001004:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8001006:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 800100a:	6477      	str	r7, [r6, #68]	@ 0x44
 800100c:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 800100e:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 8001012:	9701      	str	r7, [sp, #4]
 8001014:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001016:	f023 0703 	bic.w	r7, r3, #3
 800101a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800101e:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001022:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001026:	f003 0b03 	and.w	fp, r3, #3
 800102a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800102e:	fa08 fc0b 	lsl.w	ip, r8, fp
 8001032:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 800103a:	42b0      	cmp	r0, r6
 800103c:	f43f af61 	beq.w	8000f02 <HAL_GPIO_Init+0x42>
 8001040:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001044:	42b0      	cmp	r0, r6
 8001046:	d018      	beq.n	800107a <HAL_GPIO_Init+0x1ba>
 8001048:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800104c:	42b0      	cmp	r0, r6
 800104e:	d017      	beq.n	8001080 <HAL_GPIO_Init+0x1c0>
 8001050:	f8df c054 	ldr.w	ip, [pc, #84]	@ 80010a8 <HAL_GPIO_Init+0x1e8>
 8001054:	4560      	cmp	r0, ip
 8001056:	d016      	beq.n	8001086 <HAL_GPIO_Init+0x1c6>
 8001058:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800105c:	4560      	cmp	r0, ip
 800105e:	d015      	beq.n	800108c <HAL_GPIO_Init+0x1cc>
 8001060:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001064:	4560      	cmp	r0, ip
 8001066:	d014      	beq.n	8001092 <HAL_GPIO_Init+0x1d2>
 8001068:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800106c:	4560      	cmp	r0, ip
 800106e:	bf14      	ite	ne
 8001070:	f04f 0c07 	movne.w	ip, #7
 8001074:	f04f 0c06 	moveq.w	ip, #6
 8001078:	e745      	b.n	8000f06 <HAL_GPIO_Init+0x46>
 800107a:	f04f 0c01 	mov.w	ip, #1
 800107e:	e742      	b.n	8000f06 <HAL_GPIO_Init+0x46>
 8001080:	f04f 0c02 	mov.w	ip, #2
 8001084:	e73f      	b.n	8000f06 <HAL_GPIO_Init+0x46>
 8001086:	f04f 0c03 	mov.w	ip, #3
 800108a:	e73c      	b.n	8000f06 <HAL_GPIO_Init+0x46>
 800108c:	f04f 0c04 	mov.w	ip, #4
 8001090:	e739      	b.n	8000f06 <HAL_GPIO_Init+0x46>
 8001092:	f04f 0c05 	mov.w	ip, #5
 8001096:	e736      	b.n	8000f06 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001098:	b003      	add	sp, #12
 800109a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800109e:	bf00      	nop
 80010a0:	40013c00 	.word	0x40013c00
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020c00 	.word	0x40020c00

080010ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ac:	b10a      	cbz	r2, 80010b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	6181      	str	r1, [r0, #24]
 80010b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b2:	0409      	lsls	r1, r1, #16
 80010b4:	6181      	str	r1, [r0, #24]
  }
}
 80010b6:	4770      	bx	lr

080010b8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ba:	ea01 0203 	and.w	r2, r1, r3
 80010be:	ea21 0103 	bic.w	r1, r1, r3
 80010c2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80010c6:	6181      	str	r1, [r0, #24]
}
 80010c8:	4770      	bx	lr

080010ca <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010ca:	6803      	ldr	r3, [r0, #0]
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80010d2:	d101      	bne.n	80010d8 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80010d4:	2000      	movs	r0, #0
}
 80010d6:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80010dc:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80010de:	2300      	movs	r3, #0
 80010e0:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80010e2:	2220      	movs	r2, #32
 80010e4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010e8:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010ec:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80010ee:	f042 0204 	orr.w	r2, r2, #4
 80010f2:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80010f4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80010f8:	2001      	movs	r0, #1
 80010fa:	4770      	bx	lr

080010fc <I2C_WaitOnFlagUntilTimeout>:
{
 80010fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001100:	4605      	mov	r5, r0
 8001102:	460c      	mov	r4, r1
 8001104:	4616      	mov	r6, r2
 8001106:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001108:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800110c:	f1b8 0f01 	cmp.w	r8, #1
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	bf0c      	ite	eq
 8001114:	695b      	ldreq	r3, [r3, #20]
 8001116:	699b      	ldrne	r3, [r3, #24]
 8001118:	ea24 0c03 	bic.w	ip, r4, r3
 800111c:	fa1f fc8c 	uxth.w	ip, ip
 8001120:	fabc fc8c 	clz	ip, ip
 8001124:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001128:	4566      	cmp	r6, ip
 800112a:	d127      	bne.n	800117c <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 800112c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001130:	d0ec      	beq.n	800110c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001132:	f7ff fe63 	bl	8000dfc <HAL_GetTick>
 8001136:	9b06      	ldr	r3, [sp, #24]
 8001138:	1ac0      	subs	r0, r0, r3
 800113a:	42b8      	cmp	r0, r7
 800113c:	d801      	bhi.n	8001142 <I2C_WaitOnFlagUntilTimeout+0x46>
 800113e:	2f00      	cmp	r7, #0
 8001140:	d1e4      	bne.n	800110c <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001142:	f1b8 0f01 	cmp.w	r8, #1
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	bf0c      	ite	eq
 800114a:	695b      	ldreq	r3, [r3, #20]
 800114c:	699b      	ldrne	r3, [r3, #24]
 800114e:	ea24 0303 	bic.w	r3, r4, r3
 8001152:	b29b      	uxth	r3, r3
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	095b      	lsrs	r3, r3, #5
 800115a:	429e      	cmp	r6, r3
 800115c:	d1d6      	bne.n	800110c <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800115e:	2300      	movs	r3, #0
 8001160:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001162:	2220      	movs	r2, #32
 8001164:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001168:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800116c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800116e:	f042 0220 	orr.w	r2, r2, #32
 8001172:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001174:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001178:	2001      	movs	r0, #1
 800117a:	e000      	b.n	800117e <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 800117c:	2000      	movs	r0, #0
}
 800117e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001182 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001186:	4605      	mov	r5, r0
 8001188:	460e      	mov	r6, r1
 800118a:	4617      	mov	r7, r2
 800118c:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800118e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001192:	f1b8 0f01 	cmp.w	r8, #1
 8001196:	682b      	ldr	r3, [r5, #0]
 8001198:	bf0c      	ite	eq
 800119a:	695c      	ldreq	r4, [r3, #20]
 800119c:	699c      	ldrne	r4, [r3, #24]
 800119e:	ea26 0404 	bic.w	r4, r6, r4
 80011a2:	b2a4      	uxth	r4, r4
 80011a4:	3c00      	subs	r4, #0
 80011a6:	bf18      	it	ne
 80011a8:	2401      	movne	r4, #1
 80011aa:	2c00      	cmp	r4, #0
 80011ac:	d044      	beq.n	8001238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011ae:	682b      	ldr	r3, [r5, #0]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80011b6:	d127      	bne.n	8001208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 80011b8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80011bc:	d0e9      	beq.n	8001192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011be:	f7ff fe1d 	bl	8000dfc <HAL_GetTick>
 80011c2:	eba0 0009 	sub.w	r0, r0, r9
 80011c6:	42b8      	cmp	r0, r7
 80011c8:	d801      	bhi.n	80011ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 80011ca:	2f00      	cmp	r7, #0
 80011cc:	d1e1      	bne.n	8001192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80011ce:	f1b8 0f01 	cmp.w	r8, #1
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	bf0c      	ite	eq
 80011d6:	695b      	ldreq	r3, [r3, #20]
 80011d8:	699b      	ldrne	r3, [r3, #24]
 80011da:	ea26 0303 	bic.w	r3, r6, r3
 80011de:	b29b      	uxth	r3, r3
 80011e0:	3b00      	subs	r3, #0
 80011e2:	bf18      	it	ne
 80011e4:	2301      	movne	r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0d3      	beq.n	8001192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80011ee:	2220      	movs	r2, #32
 80011f0:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011f4:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011f8:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80011fa:	f042 0220 	orr.w	r2, r2, #32
 80011fe:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001200:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001204:	2001      	movs	r0, #1
 8001206:	e015      	b.n	8001234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800120e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001216:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001218:	2300      	movs	r3, #0
 800121a:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800121c:	2220      	movs	r2, #32
 800121e:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001222:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001226:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001228:	f042 0204 	orr.w	r2, r2, #4
 800122c:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800122e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001232:	2001      	movs	r0, #1
}
 8001234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8001238:	2000      	movs	r0, #0
 800123a:	e7fb      	b.n	8001234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

0800123c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	4604      	mov	r4, r0
 8001240:	460d      	mov	r5, r1
 8001242:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800124c:	d121      	bne.n	8001292 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800124e:	4620      	mov	r0, r4
 8001250:	f7ff ff3b 	bl	80010ca <I2C_IsAcknowledgeFailed>
 8001254:	b9f8      	cbnz	r0, 8001296 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001256:	f1b5 3fff 	cmp.w	r5, #4294967295
 800125a:	d0f3      	beq.n	8001244 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800125c:	f7ff fdce 	bl	8000dfc <HAL_GetTick>
 8001260:	1b80      	subs	r0, r0, r6
 8001262:	42a8      	cmp	r0, r5
 8001264:	d801      	bhi.n	800126a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001266:	2d00      	cmp	r5, #0
 8001268:	d1ec      	bne.n	8001244 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001272:	d1e7      	bne.n	8001244 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001274:	2300      	movs	r3, #0
 8001276:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001278:	2220      	movs	r2, #32
 800127a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800127e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001282:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001284:	f042 0220 	orr.w	r2, r2, #32
 8001288:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800128a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
 8001290:	e000      	b.n	8001294 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8001292:	2000      	movs	r0, #0
}
 8001294:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001296:	2001      	movs	r0, #1
 8001298:	e7fc      	b.n	8001294 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

0800129c <I2C_RequestMemoryWrite>:
{
 800129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a0:	b085      	sub	sp, #20
 80012a2:	4604      	mov	r4, r0
 80012a4:	460d      	mov	r5, r1
 80012a6:	4691      	mov	r9, r2
 80012a8:	461f      	mov	r7, r3
 80012aa:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80012ae:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012b0:	6803      	ldr	r3, [r0, #0]
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80012b8:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012ba:	9600      	str	r6, [sp, #0]
 80012bc:	4643      	mov	r3, r8
 80012be:	2200      	movs	r2, #0
 80012c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80012c4:	f7ff ff1a 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 80012c8:	b970      	cbnz	r0, 80012e8 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80012d0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012d2:	4633      	mov	r3, r6
 80012d4:	4642      	mov	r2, r8
 80012d6:	4928      	ldr	r1, [pc, #160]	@ (8001378 <I2C_RequestMemoryWrite+0xdc>)
 80012d8:	4620      	mov	r0, r4
 80012da:	f7ff ff52 	bl	8001182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012de:	b168      	cbz	r0, 80012fc <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
}
 80012e2:	b005      	add	sp, #20
 80012e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80012f0:	d040      	beq.n	8001374 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80012f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012f6:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80012f8:	2003      	movs	r0, #3
 80012fa:	e7f2      	b.n	80012e2 <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012fc:	2300      	movs	r3, #0
 80012fe:	9303      	str	r3, [sp, #12]
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	9203      	str	r2, [sp, #12]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800130c:	4632      	mov	r2, r6
 800130e:	4641      	mov	r1, r8
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff ff93 	bl	800123c <I2C_WaitOnTXEFlagUntilTimeout>
 8001316:	b930      	cbnz	r0, 8001326 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001318:	2f01      	cmp	r7, #1
 800131a:	d110      	bne.n	800133e <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	fa5f f689 	uxtb.w	r6, r9
 8001322:	611e      	str	r6, [r3, #16]
 8001324:	e7dd      	b.n	80012e2 <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001326:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001328:	2b04      	cmp	r3, #4
 800132a:	d001      	beq.n	8001330 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 800132c:	2001      	movs	r0, #1
 800132e:	e7d8      	b.n	80012e2 <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001330:	6822      	ldr	r2, [r4, #0]
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001338:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800133a:	2001      	movs	r0, #1
 800133c:	e7d1      	b.n	80012e2 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001344:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001346:	4632      	mov	r2, r6
 8001348:	4641      	mov	r1, r8
 800134a:	4620      	mov	r0, r4
 800134c:	f7ff ff76 	bl	800123c <I2C_WaitOnTXEFlagUntilTimeout>
 8001350:	b920      	cbnz	r0, 800135c <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	fa5f f689 	uxtb.w	r6, r9
 8001358:	611e      	str	r6, [r3, #16]
 800135a:	e7c2      	b.n	80012e2 <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800135c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800135e:	2b04      	cmp	r3, #4
 8001360:	d001      	beq.n	8001366 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8001362:	2001      	movs	r0, #1
 8001364:	e7bd      	b.n	80012e2 <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001366:	6822      	ldr	r2, [r4, #0]
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800136e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001370:	2001      	movs	r0, #1
 8001372:	e7b6      	b.n	80012e2 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8001374:	2003      	movs	r0, #3
 8001376:	e7b4      	b.n	80012e2 <I2C_RequestMemoryWrite+0x46>
 8001378:	00010002 	.word	0x00010002

0800137c <I2C_RequestMemoryRead>:
{
 800137c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	4604      	mov	r4, r0
 8001384:	460d      	mov	r5, r1
 8001386:	4616      	mov	r6, r2
 8001388:	4699      	mov	r9, r3
 800138a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800138c:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001390:	6802      	ldr	r2, [r0, #0]
 8001392:	6813      	ldr	r3, [r2, #0]
 8001394:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001398:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800139a:	6803      	ldr	r3, [r0, #0]
 800139c:	6819      	ldr	r1, [r3, #0]
 800139e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80013a2:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013a4:	f8cd 8000 	str.w	r8, [sp]
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80013b0:	f7ff fea4 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 80013b4:	b980      	cbnz	r0, 80013d8 <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013b6:	fa5f fa85 	uxtb.w	sl, r5
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80013c0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013c2:	4643      	mov	r3, r8
 80013c4:	463a      	mov	r2, r7
 80013c6:	4945      	ldr	r1, [pc, #276]	@ (80014dc <I2C_RequestMemoryRead+0x160>)
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff feda 	bl	8001182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013ce:	b168      	cbz	r0, 80013ec <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 80013d0:	2001      	movs	r0, #1
}
 80013d2:	b004      	add	sp, #16
 80013d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80013e0:	d077      	beq.n	80014d2 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013e6:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80013e8:	2003      	movs	r0, #3
 80013ea:	e7f2      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ec:	2300      	movs	r3, #0
 80013ee:	9303      	str	r3, [sp, #12]
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	9203      	str	r2, [sp, #12]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	9303      	str	r3, [sp, #12]
 80013fa:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fc:	4642      	mov	r2, r8
 80013fe:	4639      	mov	r1, r7
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff ff1b 	bl	800123c <I2C_WaitOnTXEFlagUntilTimeout>
 8001406:	b988      	cbnz	r0, 800142c <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001408:	f1b9 0f01 	cmp.w	r9, #1
 800140c:	d11a      	bne.n	8001444 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	b2f6      	uxtb	r6, r6
 8001412:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001414:	4642      	mov	r2, r8
 8001416:	4639      	mov	r1, r7
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff ff0f 	bl	800123c <I2C_WaitOnTXEFlagUntilTimeout>
 800141e:	2800      	cmp	r0, #0
 8001420:	d030      	beq.n	8001484 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001422:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001424:	2b04      	cmp	r3, #4
 8001426:	d026      	beq.n	8001476 <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 8001428:	2001      	movs	r0, #1
 800142a:	e7d2      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800142c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800142e:	2b04      	cmp	r3, #4
 8001430:	d001      	beq.n	8001436 <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 8001432:	2001      	movs	r0, #1
 8001434:	e7cd      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001436:	6822      	ldr	r2, [r4, #0]
 8001438:	6813      	ldr	r3, [r2, #0]
 800143a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143e:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8001440:	2001      	movs	r0, #1
 8001442:	e7c6      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	0a32      	lsrs	r2, r6, #8
 8001448:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800144a:	4642      	mov	r2, r8
 800144c:	4639      	mov	r1, r7
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff fef4 	bl	800123c <I2C_WaitOnTXEFlagUntilTimeout>
 8001454:	b918      	cbnz	r0, 800145e <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	b2f6      	uxtb	r6, r6
 800145a:	611e      	str	r6, [r3, #16]
 800145c:	e7da      	b.n	8001414 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800145e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001460:	2b04      	cmp	r3, #4
 8001462:	d001      	beq.n	8001468 <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
 8001466:	e7b4      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001470:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001472:	2001      	movs	r0, #1
 8001474:	e7ad      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	6813      	ldr	r3, [r2, #0]
 800147a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800147e:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8001480:	2001      	movs	r0, #1
 8001482:	e7a6      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001484:	6822      	ldr	r2, [r4, #0]
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800148e:	f8cd 8000 	str.w	r8, [sp]
 8001492:	463b      	mov	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff fe2e 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 80014a0:	b968      	cbnz	r0, 80014be <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80014a2:	6822      	ldr	r2, [r4, #0]
 80014a4:	f04a 0301 	orr.w	r3, sl, #1
 80014a8:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014aa:	4643      	mov	r3, r8
 80014ac:	463a      	mov	r2, r7
 80014ae:	490b      	ldr	r1, [pc, #44]	@ (80014dc <I2C_RequestMemoryRead+0x160>)
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fe66 	bl	8001182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014b6:	3800      	subs	r0, #0
 80014b8:	bf18      	it	ne
 80014ba:	2001      	movne	r0, #1
 80014bc:	e789      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80014c6:	d006      	beq.n	80014d6 <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014cc:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80014ce:	2003      	movs	r0, #3
 80014d0:	e77f      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 80014d2:	2003      	movs	r0, #3
 80014d4:	e77d      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 80014d6:	2003      	movs	r0, #3
 80014d8:	e77b      	b.n	80013d2 <I2C_RequestMemoryRead+0x56>
 80014da:	bf00      	nop
 80014dc:	00010002 	.word	0x00010002

080014e0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	4604      	mov	r4, r0
 80014e4:	460d      	mov	r5, r1
 80014e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f013 0f04 	tst.w	r3, #4
 80014f0:	d121      	bne.n	8001536 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014f2:	4620      	mov	r0, r4
 80014f4:	f7ff fde9 	bl	80010ca <I2C_IsAcknowledgeFailed>
 80014f8:	b9f8      	cbnz	r0, 800153a <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80014fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80014fe:	d0f3      	beq.n	80014e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001500:	f7ff fc7c 	bl	8000dfc <HAL_GetTick>
 8001504:	1b80      	subs	r0, r0, r6
 8001506:	42a8      	cmp	r0, r5
 8001508:	d801      	bhi.n	800150e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800150a:	2d00      	cmp	r5, #0
 800150c:	d1ec      	bne.n	80014e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f013 0f04 	tst.w	r3, #4
 8001516:	d1e7      	bne.n	80014e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001518:	2300      	movs	r3, #0
 800151a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800151c:	2220      	movs	r2, #32
 800151e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001522:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001526:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001528:	f042 0220 	orr.w	r2, r2, #32
 800152c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800152e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001532:	2001      	movs	r0, #1
 8001534:	e000      	b.n	8001538 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8001536:	2000      	movs	r0, #0
}
 8001538:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800153a:	2001      	movs	r0, #1
 800153c:	e7fc      	b.n	8001538 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0800153e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800153e:	b570      	push	{r4, r5, r6, lr}
 8001540:	4604      	mov	r4, r0
 8001542:	460d      	mov	r5, r1
 8001544:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001546:	6803      	ldr	r3, [r0, #0]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800154e:	d01b      	beq.n	8001588 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  return HAL_OK;
 8001550:	2000      	movs	r0, #0
 8001552:	e00e      	b.n	8001572 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001554:	f06f 0210 	mvn.w	r2, #16
 8001558:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800155e:	2220      	movs	r2, #32
 8001560:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001564:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001568:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800156a:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800156c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
}
 8001572:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800157c:	d010      	beq.n	80015a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	6958      	ldr	r0, [r3, #20]
 8001582:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8001586:	d11a      	bne.n	80015be <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001588:	6958      	ldr	r0, [r3, #20]
 800158a:	f010 0f10 	tst.w	r0, #16
 800158e:	d1e1      	bne.n	8001554 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001590:	f7ff fc34 	bl	8000dfc <HAL_GetTick>
 8001594:	1b80      	subs	r0, r0, r6
 8001596:	42a8      	cmp	r0, r5
 8001598:	d8ec      	bhi.n	8001574 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800159a:	2d00      	cmp	r5, #0
 800159c:	d1ef      	bne.n	800157e <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 800159e:	e7e9      	b.n	8001574 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015a4:	2220      	movs	r2, #32
 80015a6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80015b6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
 80015bc:	e7d9      	b.n	8001572 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
  return HAL_OK;
 80015be:	2000      	movs	r0, #0
 80015c0:	e7d7      	b.n	8001572 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
	...

080015c4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80015c4:	2800      	cmp	r0, #0
 80015c6:	f000 80b0 	beq.w	800172a <HAL_I2C_Init+0x166>
{
 80015ca:	b570      	push	{r4, r5, r6, lr}
 80015cc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d073      	beq.n	80016be <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80015d6:	2324      	movs	r3, #36	@ 0x24
 80015d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80015dc:	6822      	ldr	r2, [r4, #0]
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	6813      	ldr	r3, [r2, #0]
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ee:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	6813      	ldr	r3, [r2, #0]
 80015f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80015f8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015fa:	f000 fb93 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015fe:	6862      	ldr	r2, [r4, #4]
 8001600:	4b4c      	ldr	r3, [pc, #304]	@ (8001734 <HAL_I2C_Init+0x170>)
 8001602:	429a      	cmp	r2, r3
 8001604:	d860      	bhi.n	80016c8 <HAL_I2C_Init+0x104>
 8001606:	4b4c      	ldr	r3, [pc, #304]	@ (8001738 <HAL_I2C_Init+0x174>)
 8001608:	4298      	cmp	r0, r3
 800160a:	f240 8090 	bls.w	800172e <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 800160e:	494b      	ldr	r1, [pc, #300]	@ (800173c <HAL_I2C_Init+0x178>)
 8001610:	fba1 3100 	umull	r3, r1, r1, r0
 8001614:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001616:	6825      	ldr	r5, [r4, #0]
 8001618:	686a      	ldr	r2, [r5, #4]
 800161a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800161e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001622:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001624:	6821      	ldr	r1, [r4, #0]
 8001626:	6a0a      	ldr	r2, [r1, #32]
 8001628:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800162c:	4d41      	ldr	r5, [pc, #260]	@ (8001734 <HAL_I2C_Init+0x170>)
 800162e:	6866      	ldr	r6, [r4, #4]
 8001630:	42ae      	cmp	r6, r5
 8001632:	d84e      	bhi.n	80016d2 <HAL_I2C_Init+0x10e>
 8001634:	3301      	adds	r3, #1
 8001636:	4313      	orrs	r3, r2
 8001638:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800163a:	6821      	ldr	r1, [r4, #0]
 800163c:	69ca      	ldr	r2, [r1, #28]
 800163e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8001642:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001646:	6865      	ldr	r5, [r4, #4]
 8001648:	4b3a      	ldr	r3, [pc, #232]	@ (8001734 <HAL_I2C_Init+0x170>)
 800164a:	429d      	cmp	r5, r3
 800164c:	d84b      	bhi.n	80016e6 <HAL_I2C_Init+0x122>
 800164e:	1e43      	subs	r3, r0, #1
 8001650:	006d      	lsls	r5, r5, #1
 8001652:	fbb3 f3f5 	udiv	r3, r3, r5
 8001656:	3301      	adds	r3, #1
 8001658:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800165c:	4203      	tst	r3, r0
 800165e:	d05e      	beq.n	800171e <HAL_I2C_Init+0x15a>
 8001660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001664:	431a      	orrs	r2, r3
 8001666:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001668:	6821      	ldr	r1, [r4, #0]
 800166a:	680a      	ldr	r2, [r1, #0]
 800166c:	69e3      	ldr	r3, [r4, #28]
 800166e:	6a20      	ldr	r0, [r4, #32]
 8001670:	4303      	orrs	r3, r0
 8001672:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800167a:	6821      	ldr	r1, [r4, #0]
 800167c:	688a      	ldr	r2, [r1, #8]
 800167e:	6923      	ldr	r3, [r4, #16]
 8001680:	68e0      	ldr	r0, [r4, #12]
 8001682:	4303      	orrs	r3, r0
 8001684:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8001688:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001690:	6821      	ldr	r1, [r4, #0]
 8001692:	68ca      	ldr	r2, [r1, #12]
 8001694:	6963      	ldr	r3, [r4, #20]
 8001696:	69a0      	ldr	r0, [r4, #24]
 8001698:	4303      	orrs	r3, r0
 800169a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800169e:	4313      	orrs	r3, r2
 80016a0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80016a2:	6822      	ldr	r2, [r4, #0]
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ac:	2000      	movs	r0, #0
 80016ae:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016b0:	2320      	movs	r3, #32
 80016b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016b6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 80016bc:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80016be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80016c2:	f7ff fa1b 	bl	8000afc <HAL_I2C_MspInit>
 80016c6:	e786      	b.n	80015d6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_I2C_Init+0x17c>)
 80016ca:	4298      	cmp	r0, r3
 80016cc:	d89f      	bhi.n	800160e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80016ce:	2001      	movs	r0, #1
 80016d0:	e7f4      	b.n	80016bc <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016d2:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80016d6:	fb05 f303 	mul.w	r3, r5, r3
 80016da:	4d1a      	ldr	r5, [pc, #104]	@ (8001744 <HAL_I2C_Init+0x180>)
 80016dc:	fba5 5303 	umull	r5, r3, r5, r3
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	3301      	adds	r3, #1
 80016e4:	e7a7      	b.n	8001636 <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e6:	68a3      	ldr	r3, [r4, #8]
 80016e8:	b95b      	cbnz	r3, 8001702 <HAL_I2C_Init+0x13e>
 80016ea:	1e43      	subs	r3, r0, #1
 80016ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80016f0:	fbb3 f3f5 	udiv	r3, r3, r5
 80016f4:	3301      	adds	r3, #1
 80016f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fa:	b193      	cbz	r3, 8001722 <HAL_I2C_Init+0x15e>
 80016fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001700:	e7b0      	b.n	8001664 <HAL_I2C_Init+0xa0>
 8001702:	1e43      	subs	r3, r0, #1
 8001704:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001708:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800170c:	fbb3 f3f5 	udiv	r3, r3, r5
 8001710:	3301      	adds	r3, #1
 8001712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001716:	b133      	cbz	r3, 8001726 <HAL_I2C_Init+0x162>
 8001718:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800171c:	e7a2      	b.n	8001664 <HAL_I2C_Init+0xa0>
 800171e:	2304      	movs	r3, #4
 8001720:	e7a0      	b.n	8001664 <HAL_I2C_Init+0xa0>
 8001722:	2301      	movs	r3, #1
 8001724:	e79e      	b.n	8001664 <HAL_I2C_Init+0xa0>
 8001726:	2301      	movs	r3, #1
 8001728:	e79c      	b.n	8001664 <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 800172a:	2001      	movs	r0, #1
}
 800172c:	4770      	bx	lr
    return HAL_ERROR;
 800172e:	2001      	movs	r0, #1
 8001730:	e7c4      	b.n	80016bc <HAL_I2C_Init+0xf8>
 8001732:	bf00      	nop
 8001734:	000186a0 	.word	0x000186a0
 8001738:	001e847f 	.word	0x001e847f
 800173c:	431bde83 	.word	0x431bde83
 8001740:	003d08ff 	.word	0x003d08ff
 8001744:	10624dd3 	.word	0x10624dd3

08001748 <HAL_I2C_Mem_Write>:
{
 8001748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800174c:	b083      	sub	sp, #12
 800174e:	4604      	mov	r4, r0
 8001750:	460f      	mov	r7, r1
 8001752:	4690      	mov	r8, r2
 8001754:	4699      	mov	r9, r3
 8001756:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff fb50 	bl	8000dfc <HAL_GetTick>
 800175c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800175e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8001762:	b2c0      	uxtb	r0, r0
 8001764:	2820      	cmp	r0, #32
 8001766:	d003      	beq.n	8001770 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001768:	2002      	movs	r0, #2
}
 800176a:	b003      	add	sp, #12
 800176c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001770:	9500      	str	r5, [sp, #0]
 8001772:	2319      	movs	r3, #25
 8001774:	2201      	movs	r2, #1
 8001776:	494d      	ldr	r1, [pc, #308]	@ (80018ac <HAL_I2C_Mem_Write+0x164>)
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff fcbf 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 800177e:	2800      	cmp	r0, #0
 8001780:	f040 808d 	bne.w	800189e <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8001784:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001788:	2b01      	cmp	r3, #1
 800178a:	f000 808a 	beq.w	80018a2 <HAL_I2C_Mem_Write+0x15a>
 800178e:	2301      	movs	r3, #1
 8001790:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f012 0f01 	tst.w	r2, #1
 800179c:	d103      	bne.n	80017a6 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017a6:	6822      	ldr	r2, [r4, #0]
 80017a8:	6813      	ldr	r3, [r2, #0]
 80017aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80017ae:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017b0:	2321      	movs	r3, #33	@ 0x21
 80017b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017b6:	2340      	movs	r3, #64	@ 0x40
 80017b8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017bc:	2300      	movs	r3, #0
 80017be:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80017c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80017c2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017c4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80017c8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80017cc:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ce:	4b38      	ldr	r3, [pc, #224]	@ (80018b0 <HAL_I2C_Mem_Write+0x168>)
 80017d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017d2:	9501      	str	r5, [sp, #4]
 80017d4:	9600      	str	r6, [sp, #0]
 80017d6:	464b      	mov	r3, r9
 80017d8:	4642      	mov	r2, r8
 80017da:	4639      	mov	r1, r7
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff fd5d 	bl	800129c <I2C_RequestMemoryWrite>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d15f      	bne.n	80018a6 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 80017e6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80017e8:	b9d3      	cbnz	r3, 8001820 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ea:	462a      	mov	r2, r5
 80017ec:	4631      	mov	r1, r6
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff fe76 	bl	80014e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d044      	beq.n	8001882 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d03a      	beq.n	8001874 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	e7b3      	b.n	800176a <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001802:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001804:	2b04      	cmp	r3, #4
 8001806:	d001      	beq.n	800180c <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
 800180a:	e7ae      	b.n	800176a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	6822      	ldr	r2, [r4, #0]
 800180e:	6813      	ldr	r3, [r2, #0]
 8001810:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001814:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8001816:	2001      	movs	r0, #1
 8001818:	e7a7      	b.n	800176a <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 800181a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0e4      	beq.n	80017ea <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001820:	462a      	mov	r2, r5
 8001822:	4631      	mov	r1, r6
 8001824:	4620      	mov	r0, r4
 8001826:	f7ff fd09 	bl	800123c <I2C_WaitOnTXEFlagUntilTimeout>
 800182a:	2800      	cmp	r0, #0
 800182c:	d1e9      	bne.n	8001802 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001836:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001838:	1c43      	adds	r3, r0, #1
 800183a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800183c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800183e:	3b01      	subs	r3, #1
 8001840:	b29b      	uxth	r3, r3
 8001842:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001844:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8001846:	3901      	subs	r1, #1
 8001848:	b289      	uxth	r1, r1
 800184a:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800184c:	6822      	ldr	r2, [r4, #0]
 800184e:	6951      	ldr	r1, [r2, #20]
 8001850:	f011 0f04 	tst.w	r1, #4
 8001854:	d0e1      	beq.n	800181a <HAL_I2C_Mem_Write+0xd2>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0c7      	beq.n	80017ea <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800185a:	7843      	ldrb	r3, [r0, #1]
 800185c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800185e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001860:	3301      	adds	r3, #1
 8001862:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8001864:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001866:	3b01      	subs	r3, #1
 8001868:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800186a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800186c:	3b01      	subs	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001872:	e7d2      	b.n	800181a <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001874:	6822      	ldr	r2, [r4, #0]
 8001876:	6813      	ldr	r3, [r2, #0]
 8001878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800187e:	2001      	movs	r0, #1
 8001880:	e773      	b.n	800176a <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001882:	6822      	ldr	r2, [r4, #0]
 8001884:	6813      	ldr	r3, [r2, #0]
 8001886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800188c:	2320      	movs	r3, #32
 800188e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001892:	2300      	movs	r3, #0
 8001894:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001898:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 800189c:	e765      	b.n	800176a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800189e:	2002      	movs	r0, #2
 80018a0:	e763      	b.n	800176a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 80018a2:	2002      	movs	r0, #2
 80018a4:	e761      	b.n	800176a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
 80018a8:	e75f      	b.n	800176a <HAL_I2C_Mem_Write+0x22>
 80018aa:	bf00      	nop
 80018ac:	00100002 	.word	0x00100002
 80018b0:	ffff0000 	.word	0xffff0000

080018b4 <HAL_I2C_Mem_Read>:
{
 80018b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018b8:	b087      	sub	sp, #28
 80018ba:	4604      	mov	r4, r0
 80018bc:	460f      	mov	r7, r1
 80018be:	4690      	mov	r8, r2
 80018c0:	4699      	mov	r9, r3
 80018c2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff fa9a 	bl	8000dfc <HAL_GetTick>
 80018c8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ca:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80018ce:	b2c0      	uxtb	r0, r0
 80018d0:	2820      	cmp	r0, #32
 80018d2:	d005      	beq.n	80018e0 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 80018d4:	f04f 0902 	mov.w	r9, #2
}
 80018d8:	4648      	mov	r0, r9
 80018da:	b007      	add	sp, #28
 80018dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e0:	9500      	str	r5, [sp, #0]
 80018e2:	2319      	movs	r3, #25
 80018e4:	2201      	movs	r2, #1
 80018e6:	498a      	ldr	r1, [pc, #552]	@ (8001b10 <HAL_I2C_Mem_Read+0x25c>)
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff fc07 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 80018ee:	2800      	cmp	r0, #0
 80018f0:	f040 814e 	bne.w	8001b90 <HAL_I2C_Mem_Read+0x2dc>
    __HAL_LOCK(hi2c);
 80018f4:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f000 814c 	beq.w	8001b96 <HAL_I2C_Mem_Read+0x2e2>
 80018fe:	2301      	movs	r3, #1
 8001900:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f012 0f01 	tst.w	r2, #1
 800190c:	d103      	bne.n	8001916 <HAL_I2C_Mem_Read+0x62>
      __HAL_I2C_ENABLE(hi2c);
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	f042 0201 	orr.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800191e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001920:	2322      	movs	r3, #34	@ 0x22
 8001922:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001926:	2340      	movs	r3, #64	@ 0x40
 8001928:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	2300      	movs	r3, #0
 800192e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001932:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001934:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8001938:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800193a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800193c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800193e:	4b75      	ldr	r3, [pc, #468]	@ (8001b14 <HAL_I2C_Mem_Read+0x260>)
 8001940:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001942:	9501      	str	r5, [sp, #4]
 8001944:	9600      	str	r6, [sp, #0]
 8001946:	464b      	mov	r3, r9
 8001948:	4642      	mov	r2, r8
 800194a:	4639      	mov	r1, r7
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff fd15 	bl	800137c <I2C_RequestMemoryRead>
 8001952:	4681      	mov	r9, r0
 8001954:	2800      	cmp	r0, #0
 8001956:	f040 8121 	bne.w	8001b9c <HAL_I2C_Mem_Read+0x2e8>
    if (hi2c->XferSize == 0U)
 800195a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800195c:	b993      	cbnz	r3, 8001984 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	9202      	str	r2, [sp, #8]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	9202      	str	r2, [sp, #8]
 800196a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001972:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 8001974:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8101 	beq.w	8001b7e <HAL_I2C_Mem_Read+0x2ca>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800197c:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001b18 <HAL_I2C_Mem_Read+0x264>
 8001980:	2700      	movs	r7, #0
 8001982:	e077      	b.n	8001a74 <HAL_I2C_Mem_Read+0x1c0>
    else if (hi2c->XferSize == 1U)
 8001984:	2b01      	cmp	r3, #1
 8001986:	d00b      	beq.n	80019a0 <HAL_I2C_Mem_Read+0xec>
    else if (hi2c->XferSize == 2U)
 8001988:	2b02      	cmp	r3, #2
 800198a:	d01b      	beq.n	80019c4 <HAL_I2C_Mem_Read+0x110>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198c:	2300      	movs	r3, #0
 800198e:	9305      	str	r3, [sp, #20]
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	9205      	str	r2, [sp, #20]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	9305      	str	r3, [sp, #20]
 800199a:	9b05      	ldr	r3, [sp, #20]
    while (hi2c->XferSize > 0U)
 800199c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800199e:	e7ed      	b.n	800197c <HAL_I2C_Mem_Read+0xc8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019a0:	6822      	ldr	r2, [r4, #0]
 80019a2:	6813      	ldr	r3, [r2, #0]
 80019a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019a8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019aa:	2300      	movs	r3, #0
 80019ac:	9303      	str	r3, [sp, #12]
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	9203      	str	r2, [sp, #12]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	9203      	str	r2, [sp, #12]
 80019b8:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e7d7      	b.n	8001974 <HAL_I2C_Mem_Read+0xc0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c4:	6822      	ldr	r2, [r4, #0]
 80019c6:	6813      	ldr	r3, [r2, #0]
 80019c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019cc:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ce:	6822      	ldr	r2, [r4, #0]
 80019d0:	6813      	ldr	r3, [r2, #0]
 80019d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019d6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d8:	2300      	movs	r3, #0
 80019da:	9304      	str	r3, [sp, #16]
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	9204      	str	r2, [sp, #16]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	9304      	str	r3, [sp, #16]
 80019e6:	9b04      	ldr	r3, [sp, #16]
 80019e8:	e7c4      	b.n	8001974 <HAL_I2C_Mem_Read+0xc0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ea:	462a      	mov	r2, r5
 80019ec:	4631      	mov	r1, r6
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff fda5 	bl	800153e <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f4:	2800      	cmp	r0, #0
 80019f6:	f040 80d4 	bne.w	8001ba2 <HAL_I2C_Mem_Read+0x2ee>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001a00:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001a02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001a04:	3301      	adds	r3, #1
 8001a06:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001a08:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001a0e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001a16:	e029      	b.n	8001a6c <HAL_I2C_Mem_Read+0x1b8>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a18:	9500      	str	r5, [sp, #0]
 8001a1a:	4633      	mov	r3, r6
 8001a1c:	463a      	mov	r2, r7
 8001a1e:	4641      	mov	r1, r8
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fb6b 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	f040 80be 	bne.w	8001ba8 <HAL_I2C_Mem_Read+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2c:	6822      	ldr	r2, [r4, #0]
 8001a2e:	6813      	ldr	r3, [r2, #0]
 8001a30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a34:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001a3c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001a3e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001a40:	1c53      	adds	r3, r2, #1
 8001a42:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001a44:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001a46:	3b01      	subs	r3, #1
 8001a48:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001a4a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001a58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001a5e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001a60:	3b01      	subs	r3, #1
 8001a62:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001a64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a6c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8085 	beq.w	8001b7e <HAL_I2C_Mem_Read+0x2ca>
      if (hi2c->XferSize <= 3U)
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d851      	bhi.n	8001b1c <HAL_I2C_Mem_Read+0x268>
        if (hi2c->XferSize == 1U)
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d0b6      	beq.n	80019ea <HAL_I2C_Mem_Read+0x136>
        else if (hi2c->XferSize == 2U)
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d0cb      	beq.n	8001a18 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a80:	9500      	str	r5, [sp, #0]
 8001a82:	4633      	mov	r3, r6
 8001a84:	463a      	mov	r2, r7
 8001a86:	4641      	mov	r1, r8
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff fb37 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	f040 808d 	bne.w	8001bae <HAL_I2C_Mem_Read+0x2fa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a94:	6822      	ldr	r2, [r4, #0]
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001a9c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001aa4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001aa6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001aac:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001ab2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aba:	9500      	str	r5, [sp, #0]
 8001abc:	4633      	mov	r3, r6
 8001abe:	463a      	mov	r2, r7
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fb1a 	bl	80010fc <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d173      	bne.n	8001bb4 <HAL_I2C_Mem_Read+0x300>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	6822      	ldr	r2, [r4, #0]
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001adc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001ade:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001ae0:	1c53      	adds	r3, r2, #1
 8001ae2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001ae4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001aea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001af8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001afe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001b00:	3b01      	subs	r3, #1
 8001b02:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001b04:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001b0c:	e7ae      	b.n	8001a6c <HAL_I2C_Mem_Read+0x1b8>
 8001b0e:	bf00      	nop
 8001b10:	00100002 	.word	0x00100002
 8001b14:	ffff0000 	.word	0xffff0000
 8001b18:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1c:	462a      	mov	r2, r5
 8001b1e:	4631      	mov	r1, r6
 8001b20:	4620      	mov	r0, r4
 8001b22:	f7ff fd0c 	bl	800153e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d147      	bne.n	8001bba <HAL_I2C_Mem_Read+0x306>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001b32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b34:	3301      	adds	r3, #1
 8001b36:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8001b38:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8001b40:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001b42:	3a01      	subs	r2, #1
 8001b44:	b292      	uxth	r2, r2
 8001b46:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	6951      	ldr	r1, [r2, #20]
 8001b4c:	f011 0f04 	tst.w	r1, #4
 8001b50:	d08c      	beq.n	8001a6c <HAL_I2C_Mem_Read+0x1b8>
          if (hi2c->XferSize == 3U)
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d00e      	beq.n	8001b74 <HAL_I2C_Mem_Read+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b5c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001b5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b60:	3301      	adds	r3, #1
 8001b62:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001b64:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001b66:	3b01      	subs	r3, #1
 8001b68:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001b6a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001b72:	e77b      	b.n	8001a6c <HAL_I2C_Mem_Read+0x1b8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b74:	6813      	ldr	r3, [r2, #0]
 8001b76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e7eb      	b.n	8001b56 <HAL_I2C_Mem_Read+0x2a2>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001b8a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8001b8e:	e6a3      	b.n	80018d8 <HAL_I2C_Mem_Read+0x24>
      return HAL_BUSY;
 8001b90:	f04f 0902 	mov.w	r9, #2
 8001b94:	e6a0      	b.n	80018d8 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8001b96:	f04f 0902 	mov.w	r9, #2
 8001b9a:	e69d      	b.n	80018d8 <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 8001b9c:	f04f 0901 	mov.w	r9, #1
 8001ba0:	e69a      	b.n	80018d8 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8001ba2:	f04f 0901 	mov.w	r9, #1
 8001ba6:	e697      	b.n	80018d8 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8001ba8:	f04f 0901 	mov.w	r9, #1
 8001bac:	e694      	b.n	80018d8 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8001bae:	f04f 0901 	mov.w	r9, #1
 8001bb2:	e691      	b.n	80018d8 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8001bb4:	f04f 0901 	mov.w	r9, #1
 8001bb8:	e68e      	b.n	80018d8 <HAL_I2C_Mem_Read+0x24>
          return HAL_ERROR;
 8001bba:	f04f 0901 	mov.w	r9, #1
 8001bbe:	e68b      	b.n	80018d8 <HAL_I2C_Mem_Read+0x24>

08001bc0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	f000 809d 	beq.w	8001d00 <HAL_RCC_ClockConfig+0x140>
{
 8001bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bca:	460d      	mov	r5, r1
 8001bcc:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bce:	4b50      	ldr	r3, [pc, #320]	@ (8001d10 <HAL_RCC_ClockConfig+0x150>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	428b      	cmp	r3, r1
 8001bd8:	d208      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x2c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	b2cb      	uxtb	r3, r1
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	@ (8001d10 <HAL_RCC_ClockConfig+0x150>)
 8001bde:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	428b      	cmp	r3, r1
 8001be8:	f040 808c 	bne.w	8001d04 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	f013 0f02 	tst.w	r3, #2
 8001bf2:	d017      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x64>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	f013 0f04 	tst.w	r3, #4
 8001bf8:	d004      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x44>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bfa:	4a46      	ldr	r2, [pc, #280]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001bfc:	6893      	ldr	r3, [r2, #8]
 8001bfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	f013 0f08 	tst.w	r3, #8
 8001c0a:	d004      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x56>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c0c:	4a41      	ldr	r2, [pc, #260]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001c0e:	6893      	ldr	r3, [r2, #8]
 8001c10:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c14:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c16:	4a3f      	ldr	r2, [pc, #252]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001c18:	6893      	ldr	r3, [r2, #8]
 8001c1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c1e:	68a1      	ldr	r1, [r4, #8]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	f013 0f01 	tst.w	r3, #1
 8001c2a:	d032      	beq.n	8001c92 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2c:	6862      	ldr	r2, [r4, #4]
 8001c2e:	2a01      	cmp	r2, #1
 8001c30:	d021      	beq.n	8001c76 <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c32:	1e93      	subs	r3, r2, #2
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d925      	bls.n	8001c84 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f013 0f02 	tst.w	r3, #2
 8001c40:	d062      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x148>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4934      	ldr	r1, [pc, #208]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001c44:	688b      	ldr	r3, [r1, #8]
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c4e:	f7ff f8d5 	bl	8000dfc <HAL_GetTick>
 8001c52:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c54:	4f2f      	ldr	r7, [pc, #188]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c56:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	6862      	ldr	r2, [r4, #4]
 8001c62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c66:	d014      	beq.n	8001c92 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7ff f8c8 	bl	8000dfc <HAL_GetTick>
 8001c6c:	1b80      	subs	r0, r0, r6
 8001c6e:	4540      	cmp	r0, r8
 8001c70:	d9f3      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_TIMEOUT;
 8001c72:	2003      	movs	r0, #3
 8001c74:	e042      	b.n	8001cfc <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001c7e:	d1e0      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001c80:	2001      	movs	r0, #1
 8001c82:	e03b      	b.n	8001cfc <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c84:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c8c:	d1d9      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001c8e:	2001      	movs	r0, #1
 8001c90:	e034      	b.n	8001cfc <HAL_RCC_ClockConfig+0x13c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <HAL_RCC_ClockConfig+0x150>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	42ab      	cmp	r3, r5
 8001c9c:	d907      	bls.n	8001cae <HAL_RCC_ClockConfig+0xee>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	b2ea      	uxtb	r2, r5
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <HAL_RCC_ClockConfig+0x150>)
 8001ca2:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	42ab      	cmp	r3, r5
 8001cac:	d12e      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	f013 0f04 	tst.w	r3, #4
 8001cb4:	d006      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x104>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb6:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001cb8:	6893      	ldr	r3, [r2, #8]
 8001cba:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001cbe:	68e1      	ldr	r1, [r4, #12]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	f013 0f08 	tst.w	r3, #8
 8001cca:	d007      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x11c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ccc:	4a11      	ldr	r2, [pc, #68]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001cce:	6893      	ldr	r3, [r2, #8]
 8001cd0:	6921      	ldr	r1, [r4, #16]
 8001cd2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001cd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cda:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cdc:	f000 f842 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <HAL_RCC_ClockConfig+0x154>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8001d18 <HAL_RCC_ClockConfig+0x158>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	40d8      	lsrs	r0, r3
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <HAL_RCC_ClockConfig+0x15c>)
 8001cf0:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_ClockConfig+0x160>)
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	f7ff f835 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8001cfa:	2000      	movs	r0, #0
}
 8001cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001d00:	2001      	movs	r0, #1
}
 8001d02:	4770      	bx	lr
      return HAL_ERROR;
 8001d04:	2001      	movs	r0, #1
 8001d06:	e7f9      	b.n	8001cfc <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
 8001d0a:	e7f7      	b.n	8001cfc <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	e7f5      	b.n	8001cfc <HAL_RCC_ClockConfig+0x13c>
 8001d10:	40023c00 	.word	0x40023c00
 8001d14:	40023800 	.word	0x40023800
 8001d18:	08002c7c 	.word	0x08002c7c
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000008 	.word	0x20000008

08001d24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d2c:	4a03      	ldr	r2, [pc, #12]	@ (8001d3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	4a03      	ldr	r2, [pc, #12]	@ (8001d40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d32:	6810      	ldr	r0, [r2, #0]
}
 8001d34:	40d8      	lsrs	r0, r3
 8001d36:	4770      	bx	lr
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08002c74 	.word	0x08002c74
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d44:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001d4c:	4a03      	ldr	r2, [pc, #12]	@ (8001d5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	4a03      	ldr	r2, [pc, #12]	@ (8001d60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d52:	6810      	ldr	r0, [r2, #0]
}
 8001d54:	40d8      	lsrs	r0, r3
 8001d56:	4770      	bx	lr
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	08002c74 	.word	0x08002c74
 8001d60:	20000000 	.word	0x20000000

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d66:	4b60      	ldr	r3, [pc, #384]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d007      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1e>
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d05f      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d76:	485d      	ldr	r0, [pc, #372]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x188>)
 8001d78:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf18      	it	ne
 8001d7e:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d80:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d82:	4b59      	ldr	r3, [pc, #356]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001d90:	d02c      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d92:	4b55      	ldr	r3, [pc, #340]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d94:	6858      	ldr	r0, [r3, #4]
 8001d96:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001d9a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001d9e:	ebbc 0c00 	subs.w	ip, ip, r0
 8001da2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001da6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001daa:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001dae:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001db2:	ebb1 010c 	subs.w	r1, r1, ip
 8001db6:	eb63 030e 	sbc.w	r3, r3, lr
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dc0:	00c9      	lsls	r1, r1, #3
 8001dc2:	eb11 0c00 	adds.w	ip, r1, r0
 8001dc6:	f143 0300 	adc.w	r3, r3, #0
 8001dca:	0259      	lsls	r1, r3, #9
 8001dcc:	2300      	movs	r3, #0
 8001dce:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001dd2:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001dd6:	f7fe fa1d 	bl	8000214 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dda:	4b43      	ldr	r3, [pc, #268]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001de6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001dea:	e7c9      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dec:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dee:	6858      	ldr	r0, [r3, #4]
 8001df0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001df4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001df8:	ebbc 0c00 	subs.w	ip, ip, r0
 8001dfc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001e00:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001e04:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001e08:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001e0c:	ebb1 010c 	subs.w	r1, r1, ip
 8001e10:	eb63 030e 	sbc.w	r3, r3, lr
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e1a:	00c9      	lsls	r1, r1, #3
 8001e1c:	eb11 0c00 	adds.w	ip, r1, r0
 8001e20:	f143 0300 	adc.w	r3, r3, #0
 8001e24:	0299      	lsls	r1, r3, #10
 8001e26:	2300      	movs	r3, #0
 8001e28:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001e2c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001e30:	f7fe f9f0 	bl	8000214 <__aeabi_uldivmod>
 8001e34:	e7d1      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001e44:	d02a      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e46:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e48:	6858      	ldr	r0, [r3, #4]
 8001e4a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001e4e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001e52:	ebbc 0c00 	subs.w	ip, ip, r0
 8001e56:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001e5a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001e5e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001e62:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001e66:	ebb1 010c 	subs.w	r1, r1, ip
 8001e6a:	eb63 030e 	sbc.w	r3, r3, lr
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e74:	00c9      	lsls	r1, r1, #3
 8001e76:	eb11 0c00 	adds.w	ip, r1, r0
 8001e7a:	f143 0300 	adc.w	r3, r3, #0
 8001e7e:	0259      	lsls	r1, r3, #9
 8001e80:	2300      	movs	r3, #0
 8001e82:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001e86:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001e8a:	f7fe f9c3 	bl	8000214 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8001e96:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001e9a:	e771      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e9e:	6858      	ldr	r0, [r3, #4]
 8001ea0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001ea4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001ea8:	ebbc 0c00 	subs.w	ip, ip, r0
 8001eac:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001eb0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001eb4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001eb8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001ebc:	ebb1 010c 	subs.w	r1, r1, ip
 8001ec0:	eb63 030e 	sbc.w	r3, r3, lr
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eca:	00c9      	lsls	r1, r1, #3
 8001ecc:	eb11 0c00 	adds.w	ip, r1, r0
 8001ed0:	f143 0300 	adc.w	r3, r3, #0
 8001ed4:	0299      	lsls	r1, r3, #10
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001edc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001ee0:	f7fe f998 	bl	8000214 <__aeabi_uldivmod>
 8001ee4:	e7d3      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x12a>
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	007a1200 	.word	0x007a1200
 8001ef0:	00f42400 	.word	0x00f42400

08001ef4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef4:	2800      	cmp	r0, #0
 8001ef6:	f000 8204 	beq.w	8002302 <HAL_RCC_OscConfig+0x40e>
{
 8001efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	6803      	ldr	r3, [r0, #0]
 8001f04:	f013 0f01 	tst.w	r3, #1
 8001f08:	d041      	beq.n	8001f8e <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f0a:	4b9a      	ldr	r3, [pc, #616]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d032      	beq.n	8001f7c <HAL_RCC_OscConfig+0x88>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f16:	4b97      	ldr	r3, [pc, #604]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d027      	beq.n	8001f72 <HAL_RCC_OscConfig+0x7e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f22:	4b94      	ldr	r3, [pc, #592]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d059      	beq.n	8001fe2 <HAL_RCC_OscConfig+0xee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2e:	6863      	ldr	r3, [r4, #4]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f34:	d05b      	beq.n	8001fee <HAL_RCC_OscConfig+0xfa>
 8001f36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f3a:	d05e      	beq.n	8001ffa <HAL_RCC_OscConfig+0x106>
 8001f3c:	4b8d      	ldr	r3, [pc, #564]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f4c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f4e:	6863      	ldr	r3, [r4, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d05c      	beq.n	800200e <HAL_RCC_OscConfig+0x11a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe ff52 	bl	8000dfc <HAL_GetTick>
 8001f58:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4e86      	ldr	r6, [pc, #536]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	6833      	ldr	r3, [r6, #0]
 8001f5e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001f62:	d114      	bne.n	8001f8e <HAL_RCC_OscConfig+0x9a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe ff4a 	bl	8000dfc <HAL_GetTick>
 8001f68:	1b40      	subs	r0, r0, r5
 8001f6a:	2864      	cmp	r0, #100	@ 0x64
 8001f6c:	d9f6      	bls.n	8001f5c <HAL_RCC_OscConfig+0x68>
          {
            return HAL_TIMEOUT;
 8001f6e:	2003      	movs	r0, #3
 8001f70:	e1ce      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f72:	4b80      	ldr	r3, [pc, #512]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001f7a:	d0d2      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_OscConfig+0x9a>
 8001f86:	6863      	ldr	r3, [r4, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 81bc 	beq.w	8002306 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	f013 0f02 	tst.w	r3, #2
 8001f94:	d060      	beq.n	8002058 <HAL_RCC_OscConfig+0x164>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f96:	4b77      	ldr	r3, [pc, #476]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f013 0f0c 	tst.w	r3, #12
 8001f9e:	d04a      	beq.n	8002036 <HAL_RCC_OscConfig+0x142>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fa0:	4b74      	ldr	r3, [pc, #464]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d03f      	beq.n	800202c <HAL_RCC_OscConfig+0x138>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fac:	4b71      	ldr	r3, [pc, #452]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d069      	beq.n	800208c <HAL_RCC_OscConfig+0x198>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fb8:	68e3      	ldr	r3, [r4, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d075      	beq.n	80020aa <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002178 <HAL_RCC_OscConfig+0x284>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe ff1a 	bl	8000dfc <HAL_GetTick>
 8001fc8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	4e6a      	ldr	r6, [pc, #424]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	6833      	ldr	r3, [r6, #0]
 8001fce:	f013 0f02 	tst.w	r3, #2
 8001fd2:	d161      	bne.n	8002098 <HAL_RCC_OscConfig+0x1a4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7fe ff12 	bl	8000dfc <HAL_GetTick>
 8001fd8:	1b40      	subs	r0, r0, r5
 8001fda:	2802      	cmp	r0, #2
 8001fdc:	d9f6      	bls.n	8001fcc <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8001fde:	2003      	movs	r0, #3
 8001fe0:	e196      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4b64      	ldr	r3, [pc, #400]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001fea:	d0a0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x3a>
 8001fec:	e7c6      	b.n	8001f7c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fee:	4a61      	ldr	r2, [pc, #388]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	6813      	ldr	r3, [r2, #0]
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e7a9      	b.n	8001f4e <HAL_RCC_OscConfig+0x5a>
 8001ffa:	4b5e      	ldr	r3, [pc, #376]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e79f      	b.n	8001f4e <HAL_RCC_OscConfig+0x5a>
        tickstart = HAL_GetTick();
 800200e:	f7fe fef5 	bl	8000dfc <HAL_GetTick>
 8002012:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002014:	4e57      	ldr	r6, [pc, #348]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8002016:	6833      	ldr	r3, [r6, #0]
 8002018:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800201c:	d0b7      	beq.n	8001f8e <HAL_RCC_OscConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800201e:	f7fe feed 	bl	8000dfc <HAL_GetTick>
 8002022:	1b40      	subs	r0, r0, r5
 8002024:	2864      	cmp	r0, #100	@ 0x64
 8002026:	d9f6      	bls.n	8002016 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002028:	2003      	movs	r0, #3
 800202a:	e171      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800202c:	4b51      	ldr	r3, [pc, #324]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002034:	d1ba      	bne.n	8001fac <HAL_RCC_OscConfig+0xb8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b4f      	ldr	r3, [pc, #316]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f013 0f02 	tst.w	r3, #2
 800203e:	d003      	beq.n	8002048 <HAL_RCC_OscConfig+0x154>
 8002040:	68e3      	ldr	r3, [r4, #12]
 8002042:	2b01      	cmp	r3, #1
 8002044:	f040 8161 	bne.w	800230a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4a4a      	ldr	r2, [pc, #296]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 800204a:	6813      	ldr	r3, [r2, #0]
 800204c:	6921      	ldr	r1, [r4, #16]
 800204e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002052:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002056:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	f013 0f08 	tst.w	r3, #8
 800205e:	d049      	beq.n	80020f4 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002060:	6963      	ldr	r3, [r4, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d033      	beq.n	80020ce <HAL_RCC_OscConfig+0x1da>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b44      	ldr	r3, [pc, #272]	@ (8002178 <HAL_RCC_OscConfig+0x284>)
 8002068:	2201      	movs	r2, #1
 800206a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe fec5 	bl	8000dfc <HAL_GetTick>
 8002072:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002074:	4e3f      	ldr	r6, [pc, #252]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8002076:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002078:	f013 0f02 	tst.w	r3, #2
 800207c:	d13a      	bne.n	80020f4 <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207e:	f7fe febd 	bl	8000dfc <HAL_GetTick>
 8002082:	1b40      	subs	r0, r0, r5
 8002084:	2802      	cmp	r0, #2
 8002086:	d9f6      	bls.n	8002076 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002088:	2003      	movs	r0, #3
 800208a:	e141      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208c:	4b39      	ldr	r3, [pc, #228]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002094:	d190      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xc4>
 8002096:	e7ce      	b.n	8002036 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4a36      	ldr	r2, [pc, #216]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 800209a:	6813      	ldr	r3, [r2, #0]
 800209c:	6921      	ldr	r1, [r4, #16]
 800209e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80020a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	e7d6      	b.n	8002058 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80020aa:	4b33      	ldr	r3, [pc, #204]	@ (8002178 <HAL_RCC_OscConfig+0x284>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020b0:	f7fe fea4 	bl	8000dfc <HAL_GetTick>
 80020b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	4e2f      	ldr	r6, [pc, #188]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 80020b8:	6833      	ldr	r3, [r6, #0]
 80020ba:	f013 0f02 	tst.w	r3, #2
 80020be:	d0cb      	beq.n	8002058 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7fe fe9c 	bl	8000dfc <HAL_GetTick>
 80020c4:	1b40      	subs	r0, r0, r5
 80020c6:	2802      	cmp	r0, #2
 80020c8:	d9f6      	bls.n	80020b8 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 80020ca:	2003      	movs	r0, #3
 80020cc:	e120      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <HAL_RCC_OscConfig+0x284>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7fe fe91 	bl	8000dfc <HAL_GetTick>
 80020da:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4e25      	ldr	r6, [pc, #148]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 80020de:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80020e0:	f013 0f02 	tst.w	r3, #2
 80020e4:	d006      	beq.n	80020f4 <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e6:	f7fe fe89 	bl	8000dfc <HAL_GetTick>
 80020ea:	1b40      	subs	r0, r0, r5
 80020ec:	2802      	cmp	r0, #2
 80020ee:	d9f6      	bls.n	80020de <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 80020f0:	2003      	movs	r0, #3
 80020f2:	e10d      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	f013 0f04 	tst.w	r3, #4
 80020fa:	d077      	beq.n	80021ec <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002104:	d133      	bne.n	800216e <HAL_RCC_OscConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 800210c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800210e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002112:	641a      	str	r2, [r3, #64]	@ 0x40
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800211e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b16      	ldr	r3, [pc, #88]	@ (800217c <HAL_RCC_OscConfig+0x288>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002128:	d02a      	beq.n	8002180 <HAL_RCC_OscConfig+0x28c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212a:	68a3      	ldr	r3, [r4, #8]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d03b      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2b4>
 8002130:	2b05      	cmp	r3, #5
 8002132:	d03f      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2c0>
 8002134:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
 8002136:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	671a      	str	r2, [r3, #112]	@ 0x70
 800213e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002140:	f022 0204 	bic.w	r2, r2, #4
 8002144:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002146:	68a3      	ldr	r3, [r4, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d03d      	beq.n	80021c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe fe56 	bl	8000dfc <HAL_GetTick>
 8002150:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002152:	4f08      	ldr	r7, [pc, #32]	@ (8002174 <HAL_RCC_OscConfig+0x280>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800215a:	f013 0f02 	tst.w	r3, #2
 800215e:	d144      	bne.n	80021ea <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe fe4c 	bl	8000dfc <HAL_GetTick>
 8002164:	1b80      	subs	r0, r0, r6
 8002166:	4540      	cmp	r0, r8
 8002168:	d9f6      	bls.n	8002158 <HAL_RCC_OscConfig+0x264>
        {
          return HAL_TIMEOUT;
 800216a:	2003      	movs	r0, #3
 800216c:	e0d0      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2500      	movs	r5, #0
 8002170:	e7d6      	b.n	8002120 <HAL_RCC_OscConfig+0x22c>
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	42470000 	.word	0x42470000
 800217c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002180:	4a6b      	ldr	r2, [pc, #428]	@ (8002330 <HAL_RCC_OscConfig+0x43c>)
 8002182:	6813      	ldr	r3, [r2, #0]
 8002184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002188:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800218a:	f7fe fe37 	bl	8000dfc <HAL_GetTick>
 800218e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	4f67      	ldr	r7, [pc, #412]	@ (8002330 <HAL_RCC_OscConfig+0x43c>)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002198:	d1c7      	bne.n	800212a <HAL_RCC_OscConfig+0x236>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe fe2f 	bl	8000dfc <HAL_GetTick>
 800219e:	1b80      	subs	r0, r0, r6
 80021a0:	2802      	cmp	r0, #2
 80021a2:	d9f6      	bls.n	8002192 <HAL_RCC_OscConfig+0x29e>
          return HAL_TIMEOUT;
 80021a4:	2003      	movs	r0, #3
 80021a6:	e0b3      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a8:	4a62      	ldr	r2, [pc, #392]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
 80021aa:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b2:	e7c8      	b.n	8002146 <HAL_RCC_OscConfig+0x252>
 80021b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
 80021b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021b8:	f042 0204 	orr.w	r2, r2, #4
 80021bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80021be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80021c6:	e7be      	b.n	8002146 <HAL_RCC_OscConfig+0x252>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe fe18 	bl	8000dfc <HAL_GetTick>
 80021cc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	4f59      	ldr	r7, [pc, #356]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021d6:	f013 0f02 	tst.w	r3, #2
 80021da:	d006      	beq.n	80021ea <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7fe fe0e 	bl	8000dfc <HAL_GetTick>
 80021e0:	1b80      	subs	r0, r0, r6
 80021e2:	4540      	cmp	r0, r8
 80021e4:	d9f6      	bls.n	80021d4 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 80021e6:	2003      	movs	r0, #3
 80021e8:	e092      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ea:	b9ed      	cbnz	r5, 8002228 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ec:	69a3      	ldr	r3, [r4, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 808d 	beq.w	800230e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
 80021f6:	6892      	ldr	r2, [r2, #8]
 80021f8:	f002 020c 	and.w	r2, r2, #12
 80021fc:	2a08      	cmp	r2, #8
 80021fe:	d054      	beq.n	80022aa <HAL_RCC_OscConfig+0x3b6>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002200:	2b02      	cmp	r3, #2
 8002202:	d017      	beq.n	8002234 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b4c      	ldr	r3, [pc, #304]	@ (8002338 <HAL_RCC_OscConfig+0x444>)
 8002206:	2200      	movs	r2, #0
 8002208:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7fe fdf7 	bl	8000dfc <HAL_GetTick>
 800220e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002210:	4d48      	ldr	r5, [pc, #288]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
 8002212:	682b      	ldr	r3, [r5, #0]
 8002214:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002218:	d045      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fdef 	bl	8000dfc <HAL_GetTick>
 800221e:	1b00      	subs	r0, r0, r4
 8002220:	2802      	cmp	r0, #2
 8002222:	d9f6      	bls.n	8002212 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002224:	2003      	movs	r0, #3
 8002226:	e073      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4a42      	ldr	r2, [pc, #264]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
 800222a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	@ 0x40
 8002232:	e7db      	b.n	80021ec <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b40      	ldr	r3, [pc, #256]	@ (8002338 <HAL_RCC_OscConfig+0x444>)
 8002236:	2200      	movs	r2, #0
 8002238:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800223a:	f7fe fddf 	bl	8000dfc <HAL_GetTick>
 800223e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002240:	4e3c      	ldr	r6, [pc, #240]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
 8002242:	6833      	ldr	r3, [r6, #0]
 8002244:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002248:	d006      	beq.n	8002258 <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe fdd7 	bl	8000dfc <HAL_GetTick>
 800224e:	1b40      	subs	r0, r0, r5
 8002250:	2802      	cmp	r0, #2
 8002252:	d9f6      	bls.n	8002242 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8002254:	2003      	movs	r0, #3
 8002256:	e05b      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002258:	69e3      	ldr	r3, [r4, #28]
 800225a:	6a22      	ldr	r2, [r4, #32]
 800225c:	4313      	orrs	r3, r2
 800225e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002260:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002264:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002266:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800226a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800226c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002270:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002272:	0852      	lsrs	r2, r2, #1
 8002274:	3a01      	subs	r2, #1
 8002276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800227a:	4a2e      	ldr	r2, [pc, #184]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
 800227c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800227e:	4b2e      	ldr	r3, [pc, #184]	@ (8002338 <HAL_RCC_OscConfig+0x444>)
 8002280:	2201      	movs	r2, #1
 8002282:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002284:	f7fe fdba 	bl	8000dfc <HAL_GetTick>
 8002288:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4d2a      	ldr	r5, [pc, #168]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fdb2 	bl	8000dfc <HAL_GetTick>
 8002298:	1b00      	subs	r0, r0, r4
 800229a:	2802      	cmp	r0, #2
 800229c:	d9f6      	bls.n	800228c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800229e:	2003      	movs	r0, #3
 80022a0:	e036      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80022a2:	2000      	movs	r0, #0
 80022a4:	e034      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
 80022a6:	2000      	movs	r0, #0
 80022a8:	e032      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d033      	beq.n	8002316 <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->PLLCFGR;
 80022ae:	4b21      	ldr	r3, [pc, #132]	@ (8002334 <HAL_RCC_OscConfig+0x440>)
 80022b0:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b6:	69e2      	ldr	r2, [r4, #28]
 80022b8:	4291      	cmp	r1, r2
 80022ba:	d12e      	bne.n	800231a <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022bc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c0:	6a21      	ldr	r1, [r4, #32]
 80022c2:	428a      	cmp	r2, r1
 80022c4:	d12b      	bne.n	800231e <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c8:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80022cc:	401a      	ands	r2, r3
 80022ce:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80022d2:	d126      	bne.n	8002322 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80022d8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80022da:	0852      	lsrs	r2, r2, #1
 80022dc:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022de:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80022e2:	d120      	bne.n	8002326 <HAL_RCC_OscConfig+0x432>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e4:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022e8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ea:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80022ee:	d11c      	bne.n	800232a <HAL_RCC_OscConfig+0x436>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022f0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80022f2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f6:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80022fa:	bf14      	ite	ne
 80022fc:	2001      	movne	r0, #1
 80022fe:	2000      	moveq	r0, #0
 8002300:	e006      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
    return HAL_ERROR;
 8002302:	2001      	movs	r0, #1
}
 8002304:	4770      	bx	lr
        return HAL_ERROR;
 8002306:	2001      	movs	r0, #1
 8002308:	e002      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        return HAL_ERROR;
 800230a:	2001      	movs	r0, #1
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 800230e:	2000      	movs	r0, #0
}
 8002310:	b002      	add	sp, #8
 8002312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002316:	2001      	movs	r0, #1
 8002318:	e7fa      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
 800231a:	2001      	movs	r0, #1
 800231c:	e7f8      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
 800231e:	2001      	movs	r0, #1
 8002320:	e7f6      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
 8002322:	2001      	movs	r0, #1
 8002324:	e7f4      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
 8002326:	2001      	movs	r0, #1
 8002328:	e7f2      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
 800232a:	2001      	movs	r0, #1
 800232c:	e7f0      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
 800232e:	bf00      	nop
 8002330:	40007000 	.word	0x40007000
 8002334:	40023800 	.word	0x40023800
 8002338:	42470000 	.word	0x42470000

0800233c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800233c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002340:	6a02      	ldr	r2, [r0, #32]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002348:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800234a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800234c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002350:	680d      	ldr	r5, [r1, #0]
 8002352:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002354:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002358:	688d      	ldr	r5, [r1, #8]
 800235a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800235c:	4d0d      	ldr	r5, [pc, #52]	@ (8002394 <TIM_OC1_SetConfig+0x58>)
 800235e:	42a8      	cmp	r0, r5
 8002360:	d003      	beq.n	800236a <TIM_OC1_SetConfig+0x2e>
 8002362:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002366:	42a8      	cmp	r0, r5
 8002368:	d10d      	bne.n	8002386 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800236a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800236e:	68cd      	ldr	r5, [r1, #12]
 8002370:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002372:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002376:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800237a:	698d      	ldr	r5, [r1, #24]
 800237c:	694e      	ldr	r6, [r1, #20]
 800237e:	ea46 0c05 	orr.w	ip, r6, r5
 8002382:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002386:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002388:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800238a:	684a      	ldr	r2, [r1, #4]
 800238c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800238e:	6203      	str	r3, [r0, #32]
}
 8002390:	bc70      	pop	{r4, r5, r6}
 8002392:	4770      	bx	lr
 8002394:	40010000 	.word	0x40010000

08002398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002398:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800239c:	6a02      	ldr	r2, [r0, #32]
 800239e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023a2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023a8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023ac:	680d      	ldr	r5, [r1, #0]
 80023ae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023b4:	688d      	ldr	r5, [r1, #8]
 80023b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023ba:	4d0e      	ldr	r5, [pc, #56]	@ (80023f4 <TIM_OC3_SetConfig+0x5c>)
 80023bc:	42a8      	cmp	r0, r5
 80023be:	d003      	beq.n	80023c8 <TIM_OC3_SetConfig+0x30>
 80023c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80023c4:	42a8      	cmp	r0, r5
 80023c6:	d10e      	bne.n	80023e6 <TIM_OC3_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023cc:	68cd      	ldr	r5, [r1, #12]
 80023ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023d6:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023da:	698d      	ldr	r5, [r1, #24]
 80023dc:	694e      	ldr	r6, [r1, #20]
 80023de:	ea46 0c05 	orr.w	ip, r6, r5
 80023e2:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023e8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023ea:	684a      	ldr	r2, [r1, #4]
 80023ec:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ee:	6203      	str	r3, [r0, #32]
}
 80023f0:	bc70      	pop	{r4, r5, r6}
 80023f2:	4770      	bx	lr
 80023f4:	40010000 	.word	0x40010000

080023f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023fc:	6a02      	ldr	r2, [r0, #32]
 80023fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002402:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002404:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002406:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002408:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800240c:	680d      	ldr	r5, [r1, #0]
 800240e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002416:	688d      	ldr	r5, [r1, #8]
 8002418:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800241c:	4d09      	ldr	r5, [pc, #36]	@ (8002444 <TIM_OC4_SetConfig+0x4c>)
 800241e:	42a8      	cmp	r0, r5
 8002420:	d003      	beq.n	800242a <TIM_OC4_SetConfig+0x32>
 8002422:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002426:	42a8      	cmp	r0, r5
 8002428:	d104      	bne.n	8002434 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800242a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800242e:	694d      	ldr	r5, [r1, #20]
 8002430:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002434:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002436:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002438:	684a      	ldr	r2, [r1, #4]
 800243a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243c:	6203      	str	r3, [r0, #32]
}
 800243e:	bc30      	pop	{r4, r5}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40010000 	.word	0x40010000

08002448 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002448:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800244a:	4a4d      	ldr	r2, [pc, #308]	@ (8002580 <TIM_Base_SetConfig+0x138>)
 800244c:	4290      	cmp	r0, r2
 800244e:	d067      	beq.n	8002520 <TIM_Base_SetConfig+0xd8>
 8002450:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002454:	d07e      	beq.n	8002554 <TIM_Base_SetConfig+0x10c>
 8002456:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800245a:	4290      	cmp	r0, r2
 800245c:	d056      	beq.n	800250c <TIM_Base_SetConfig+0xc4>
 800245e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002462:	4290      	cmp	r0, r2
 8002464:	d057      	beq.n	8002516 <TIM_Base_SetConfig+0xce>
 8002466:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800246a:	4290      	cmp	r0, r2
 800246c:	f000 8083 	beq.w	8002576 <TIM_Base_SetConfig+0x12e>
 8002470:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002474:	4290      	cmp	r0, r2
 8002476:	d01f      	beq.n	80024b8 <TIM_Base_SetConfig+0x70>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002478:	4a42      	ldr	r2, [pc, #264]	@ (8002584 <TIM_Base_SetConfig+0x13c>)
 800247a:	4290      	cmp	r0, r2
 800247c:	d06e      	beq.n	800255c <TIM_Base_SetConfig+0x114>
 800247e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002482:	4290      	cmp	r0, r2
 8002484:	d06a      	beq.n	800255c <TIM_Base_SetConfig+0x114>
 8002486:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800248a:	4290      	cmp	r0, r2
 800248c:	d066      	beq.n	800255c <TIM_Base_SetConfig+0x114>
 800248e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002492:	4290      	cmp	r0, r2
 8002494:	d062      	beq.n	800255c <TIM_Base_SetConfig+0x114>
 8002496:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800249a:	4290      	cmp	r0, r2
 800249c:	d05e      	beq.n	800255c <TIM_Base_SetConfig+0x114>
 800249e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80024a2:	4290      	cmp	r0, r2
 80024a4:	d05a      	beq.n	800255c <TIM_Base_SetConfig+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024aa:	694a      	ldr	r2, [r1, #20]
 80024ac:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024ae:	688a      	ldr	r2, [r1, #8]
 80024b0:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024b2:	680a      	ldr	r2, [r1, #0]
 80024b4:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024b6:	e045      	b.n	8002544 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80024bc:	684a      	ldr	r2, [r1, #4]
 80024be:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002580 <TIM_Base_SetConfig+0x138>)
 80024c2:	4290      	cmp	r0, r2
 80024c4:	d030      	beq.n	8002528 <TIM_Base_SetConfig+0xe0>
 80024c6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80024ca:	d047      	beq.n	800255c <TIM_Base_SetConfig+0x114>
 80024cc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80024d0:	4290      	cmp	r0, r2
 80024d2:	d043      	beq.n	800255c <TIM_Base_SetConfig+0x114>
 80024d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80024d8:	4290      	cmp	r0, r2
 80024da:	d03f      	beq.n	800255c <TIM_Base_SetConfig+0x114>
 80024dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80024e0:	4290      	cmp	r0, r2
 80024e2:	d03b      	beq.n	800255c <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~TIM_CR1_CKD;
 80024e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e8:	68ca      	ldr	r2, [r1, #12]
 80024ea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024f0:	694a      	ldr	r2, [r1, #20]
 80024f2:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f4:	688a      	ldr	r2, [r1, #8]
 80024f6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024f8:	680a      	ldr	r2, [r1, #0]
 80024fa:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024fc:	4a20      	ldr	r2, [pc, #128]	@ (8002580 <TIM_Base_SetConfig+0x138>)
 80024fe:	4290      	cmp	r0, r2
 8002500:	d01e      	beq.n	8002540 <TIM_Base_SetConfig+0xf8>
 8002502:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002506:	4290      	cmp	r0, r2
 8002508:	d01a      	beq.n	8002540 <TIM_Base_SetConfig+0xf8>
 800250a:	e01b      	b.n	8002544 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800250c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002510:	684a      	ldr	r2, [r1, #4]
 8002512:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002514:	e022      	b.n	800255c <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800251a:	684a      	ldr	r2, [r1, #4]
 800251c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800251e:	e01d      	b.n	800255c <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002524:	684a      	ldr	r2, [r1, #4]
 8002526:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800252c:	68ca      	ldr	r2, [r1, #12]
 800252e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002534:	694a      	ldr	r2, [r1, #20]
 8002536:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002538:	688a      	ldr	r2, [r1, #8]
 800253a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800253c:	680a      	ldr	r2, [r1, #0]
 800253e:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002540:	690a      	ldr	r2, [r1, #16]
 8002542:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002544:	6802      	ldr	r2, [r0, #0]
 8002546:	f042 0204 	orr.w	r2, r2, #4
 800254a:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800254c:	2201      	movs	r2, #1
 800254e:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8002550:	6003      	str	r3, [r0, #0]
}
 8002552:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002558:	684a      	ldr	r2, [r1, #4]
 800255a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800255c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002560:	68ca      	ldr	r2, [r1, #12]
 8002562:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002568:	694a      	ldr	r2, [r1, #20]
 800256a:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800256c:	688a      	ldr	r2, [r1, #8]
 800256e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002570:	680a      	ldr	r2, [r1, #0]
 8002572:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002574:	e7e6      	b.n	8002544 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800257a:	684a      	ldr	r2, [r1, #4]
 800257c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800257e:	e7ed      	b.n	800255c <TIM_Base_SetConfig+0x114>
 8002580:	40010000 	.word	0x40010000
 8002584:	40014000 	.word	0x40014000

08002588 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002588:	b340      	cbz	r0, 80025dc <HAL_TIM_PWM_Init+0x54>
{
 800258a:	b510      	push	{r4, lr}
 800258c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800258e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002592:	b1f3      	cbz	r3, 80025d2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	2302      	movs	r3, #2
 8002596:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259a:	4621      	mov	r1, r4
 800259c:	f851 0b04 	ldr.w	r0, [r1], #4
 80025a0:	f7ff ff52 	bl	8002448 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80025ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80025b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80025b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80025be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025c2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80025c6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80025ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80025ce:	2000      	movs	r0, #0
}
 80025d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80025d2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80025d6:	f7fe fac9 	bl	8000b6c <HAL_TIM_PWM_MspInit>
 80025da:	e7db      	b.n	8002594 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80025dc:	2001      	movs	r0, #1
}
 80025de:	4770      	bx	lr

080025e0 <TIM_OC2_SetConfig>:
{
 80025e0:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80025e2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025e4:	6a02      	ldr	r2, [r0, #32]
 80025e6:	f022 0210 	bic.w	r2, r2, #16
 80025ea:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80025ec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80025ee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025f0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025f4:	680d      	ldr	r5, [r1, #0]
 80025f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80025fa:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025fe:	688d      	ldr	r5, [r1, #8]
 8002600:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002604:	4d0e      	ldr	r5, [pc, #56]	@ (8002640 <TIM_OC2_SetConfig+0x60>)
 8002606:	42a8      	cmp	r0, r5
 8002608:	d003      	beq.n	8002612 <TIM_OC2_SetConfig+0x32>
 800260a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800260e:	42a8      	cmp	r0, r5
 8002610:	d10e      	bne.n	8002630 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002616:	68cd      	ldr	r5, [r1, #12]
 8002618:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800261c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002620:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002624:	698d      	ldr	r5, [r1, #24]
 8002626:	694e      	ldr	r6, [r1, #20]
 8002628:	ea46 0c05 	orr.w	ip, r6, r5
 800262c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8002630:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002632:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002634:	684a      	ldr	r2, [r1, #4]
 8002636:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002638:	6203      	str	r3, [r0, #32]
}
 800263a:	bc70      	pop	{r4, r5, r6}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40010000 	.word	0x40010000

08002644 <HAL_TIM_PWM_ConfigChannel>:
{
 8002644:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002646:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d066      	beq.n	800271c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800264e:	4604      	mov	r4, r0
 8002650:	460d      	mov	r5, r1
 8002652:	2301      	movs	r3, #1
 8002654:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002658:	2a0c      	cmp	r2, #12
 800265a:	d85a      	bhi.n	8002712 <HAL_TIM_PWM_ConfigChannel+0xce>
 800265c:	e8df f002 	tbb	[pc, r2]
 8002660:	59595907 	.word	0x59595907
 8002664:	5959591b 	.word	0x5959591b
 8002668:	59595930 	.word	0x59595930
 800266c:	44          	.byte	0x44
 800266d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800266e:	6800      	ldr	r0, [r0, #0]
 8002670:	f7ff fe64 	bl	800233c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002674:	6822      	ldr	r2, [r4, #0]
 8002676:	6993      	ldr	r3, [r2, #24]
 8002678:	f043 0308 	orr.w	r3, r3, #8
 800267c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	6993      	ldr	r3, [r2, #24]
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	6993      	ldr	r3, [r2, #24]
 800268c:	6929      	ldr	r1, [r5, #16]
 800268e:	430b      	orrs	r3, r1
 8002690:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2000      	movs	r0, #0
      break;
 8002694:	e03e      	b.n	8002714 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002696:	6800      	ldr	r0, [r0, #0]
 8002698:	f7ff ffa2 	bl	80025e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	6993      	ldr	r3, [r2, #24]
 80026a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026a4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026a6:	6822      	ldr	r2, [r4, #0]
 80026a8:	6993      	ldr	r3, [r2, #24]
 80026aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026ae:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026b0:	6822      	ldr	r2, [r4, #0]
 80026b2:	6993      	ldr	r3, [r2, #24]
 80026b4:	6929      	ldr	r1, [r5, #16]
 80026b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026ba:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80026bc:	2000      	movs	r0, #0
      break;
 80026be:	e029      	b.n	8002714 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026c0:	6800      	ldr	r0, [r0, #0]
 80026c2:	f7ff fe69 	bl	8002398 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026c6:	6822      	ldr	r2, [r4, #0]
 80026c8:	69d3      	ldr	r3, [r2, #28]
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	69d3      	ldr	r3, [r2, #28]
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	69d3      	ldr	r3, [r2, #28]
 80026de:	6929      	ldr	r1, [r5, #16]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80026e4:	2000      	movs	r0, #0
      break;
 80026e6:	e015      	b.n	8002714 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026e8:	6800      	ldr	r0, [r0, #0]
 80026ea:	f7ff fe85 	bl	80023f8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ee:	6822      	ldr	r2, [r4, #0]
 80026f0:	69d3      	ldr	r3, [r2, #28]
 80026f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026f6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	69d3      	ldr	r3, [r2, #28]
 80026fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002700:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	69d3      	ldr	r3, [r2, #28]
 8002706:	6929      	ldr	r1, [r5, #16]
 8002708:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800270c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2000      	movs	r0, #0
      break;
 8002710:	e000      	b.n	8002714 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002712:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002714:	2300      	movs	r3, #0
 8002716:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800271a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800271c:	2002      	movs	r0, #2
 800271e:	e7fc      	b.n	800271a <HAL_TIM_PWM_ConfigChannel+0xd6>

08002720 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002720:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002724:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002726:	f04f 0c01 	mov.w	ip, #1
 800272a:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 800272e:	ea23 030c 	bic.w	r3, r3, ip
 8002732:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002734:	6a03      	ldr	r3, [r0, #32]
 8002736:	408a      	lsls	r2, r1
 8002738:	431a      	orrs	r2, r3
 800273a:	6202      	str	r2, [r0, #32]
}
 800273c:	4770      	bx	lr
	...

08002740 <HAL_TIM_PWM_Start>:
{
 8002740:	b510      	push	{r4, lr}
 8002742:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002744:	4608      	mov	r0, r1
 8002746:	bba1      	cbnz	r1, 80027b2 <HAL_TIM_PWM_Start+0x72>
 8002748:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d167      	bne.n	8002822 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002752:	2302      	movs	r3, #2
 8002754:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002758:	2201      	movs	r2, #1
 800275a:	4601      	mov	r1, r0
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	f7ff ffdf 	bl	8002720 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	4a31      	ldr	r2, [pc, #196]	@ (800282c <HAL_TIM_PWM_Start+0xec>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d048      	beq.n	80027fc <HAL_TIM_PWM_Start+0xbc>
 800276a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800276e:	4293      	cmp	r3, r2
 8002770:	d044      	beq.n	80027fc <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002776:	d049      	beq.n	800280c <HAL_TIM_PWM_Start+0xcc>
 8002778:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <HAL_TIM_PWM_Start+0xf0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d046      	beq.n	800280c <HAL_TIM_PWM_Start+0xcc>
 800277e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002782:	4293      	cmp	r3, r2
 8002784:	d042      	beq.n	800280c <HAL_TIM_PWM_Start+0xcc>
 8002786:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800278a:	4293      	cmp	r3, r2
 800278c:	d03e      	beq.n	800280c <HAL_TIM_PWM_Start+0xcc>
 800278e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002792:	4293      	cmp	r3, r2
 8002794:	d03a      	beq.n	800280c <HAL_TIM_PWM_Start+0xcc>
 8002796:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800279a:	4293      	cmp	r3, r2
 800279c:	d036      	beq.n	800280c <HAL_TIM_PWM_Start+0xcc>
 800279e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d032      	beq.n	800280c <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80027ae:	2000      	movs	r0, #0
 80027b0:	e036      	b.n	8002820 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027b2:	2904      	cmp	r1, #4
 80027b4:	d00c      	beq.n	80027d0 <HAL_TIM_PWM_Start+0x90>
 80027b6:	2908      	cmp	r1, #8
 80027b8:	bf0c      	ite	eq
 80027ba:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 80027be:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	bf18      	it	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	b143      	cbz	r3, 80027de <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
 80027ce:	e027      	b.n	8002820 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027d0:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	bf18      	it	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	e7f5      	b.n	80027ca <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027de:	2804      	cmp	r0, #4
 80027e0:	d008      	beq.n	80027f4 <HAL_TIM_PWM_Start+0xb4>
 80027e2:	2808      	cmp	r0, #8
 80027e4:	f04f 0302 	mov.w	r3, #2
 80027e8:	bf0c      	ite	eq
 80027ea:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 80027ee:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 80027f2:	e7b1      	b.n	8002758 <HAL_TIM_PWM_Start+0x18>
 80027f4:	2302      	movs	r3, #2
 80027f6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80027fa:	e7ad      	b.n	8002758 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 80027fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	4a09      	ldr	r2, [pc, #36]	@ (800282c <HAL_TIM_PWM_Start+0xec>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d1b2      	bne.n	8002772 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002812:	2a06      	cmp	r2, #6
 8002814:	d007      	beq.n	8002826 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800281e:	2000      	movs	r0, #0
}
 8002820:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002822:	2001      	movs	r0, #1
 8002824:	e7fc      	b.n	8002820 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8002826:	2000      	movs	r0, #0
 8002828:	e7fa      	b.n	8002820 <HAL_TIM_PWM_Start+0xe0>
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000
 8002830:	40000400 	.word	0x40000400

08002834 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002834:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002838:	2a01      	cmp	r2, #1
 800283a:	d03b      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 800283c:	b430      	push	{r4, r5}
 800283e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002840:	2201      	movs	r2, #1
 8002842:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002846:	2202      	movs	r2, #2
 8002848:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800284c:	6804      	ldr	r4, [r0, #0]
 800284e:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002850:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002852:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002856:	680d      	ldr	r5, [r1, #0]
 8002858:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800285a:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4c16      	ldr	r4, [pc, #88]	@ (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8002860:	42a2      	cmp	r2, r4
 8002862:	d01a      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002864:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002868:	d017      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800286a:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 800286e:	42a2      	cmp	r2, r4
 8002870:	d013      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002872:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002876:	42a2      	cmp	r2, r4
 8002878:	d00f      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800287a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800287e:	42a2      	cmp	r2, r4
 8002880:	d00b      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002882:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 8002886:	42a2      	cmp	r2, r4
 8002888:	d007      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800288a:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 800288e:	42a2      	cmp	r2, r4
 8002890:	d003      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002892:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8002896:	42a2      	cmp	r2, r4
 8002898:	d104      	bne.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800289a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800289e:	6849      	ldr	r1, [r1, #4]
 80028a0:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028a2:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80028b0:	bc30      	pop	{r4, r5}
 80028b2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80028b4:	2002      	movs	r0, #2
}
 80028b6:	4770      	bx	lr
 80028b8:	40010000 	.word	0x40010000

080028bc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028be:	f102 030c 	add.w	r3, r2, #12
 80028c2:	e853 3f00 	ldrex	r3, [r3]
 80028c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	320c      	adds	r2, #12
 80028cc:	e842 3100 	strex	r1, r3, [r2]
 80028d0:	2900      	cmp	r1, #0
 80028d2:	d1f3      	bne.n	80028bc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d6:	f102 0314 	add.w	r3, r2, #20
 80028da:	e853 3f00 	ldrex	r3, [r3]
 80028de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	3214      	adds	r2, #20
 80028e4:	e842 3100 	strex	r1, r3, [r2]
 80028e8:	2900      	cmp	r1, #0
 80028ea:	d1f3      	bne.n	80028d4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d005      	beq.n	80028fe <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028f2:	2320      	movs	r3, #32
 80028f4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f8:	2300      	movs	r3, #0
 80028fa:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80028fc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002900:	f102 030c 	add.w	r3, r2, #12
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	320c      	adds	r2, #12
 800290e:	e842 3100 	strex	r1, r3, [r2]
 8002912:	2900      	cmp	r1, #0
 8002914:	d1f3      	bne.n	80028fe <UART_EndRxTransfer+0x42>
 8002916:	e7ec      	b.n	80028f2 <UART_EndRxTransfer+0x36>

08002918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002918:	b510      	push	{r4, lr}
 800291a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800291c:	6802      	ldr	r2, [r0, #0]
 800291e:	6913      	ldr	r3, [r2, #16]
 8002920:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002924:	68c1      	ldr	r1, [r0, #12]
 8002926:	430b      	orrs	r3, r1
 8002928:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 800292a:	6801      	ldr	r1, [r0, #0]
 800292c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800292e:	6883      	ldr	r3, [r0, #8]
 8002930:	6900      	ldr	r0, [r0, #16]
 8002932:	4303      	orrs	r3, r0
 8002934:	6960      	ldr	r0, [r4, #20]
 8002936:	4303      	orrs	r3, r0
 8002938:	69e0      	ldr	r0, [r4, #28]
 800293a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800293c:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8002940:	f022 020c 	bic.w	r2, r2, #12
 8002944:	4313      	orrs	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002948:	6822      	ldr	r2, [r4, #0]
 800294a:	6953      	ldr	r3, [r2, #20]
 800294c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002950:	69a1      	ldr	r1, [r4, #24]
 8002952:	430b      	orrs	r3, r1
 8002954:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	4a2e      	ldr	r2, [pc, #184]	@ (8002a14 <UART_SetConfig+0xfc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d006      	beq.n	800296c <UART_SetConfig+0x54>
 800295e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002962:	4293      	cmp	r3, r2
 8002964:	d002      	beq.n	800296c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002966:	f7ff f9dd 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 800296a:	e001      	b.n	8002970 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800296c:	f7ff f9ea 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002970:	69e3      	ldr	r3, [r4, #28]
 8002972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002976:	d024      	beq.n	80029c2 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002978:	2100      	movs	r1, #0
 800297a:	1803      	adds	r3, r0, r0
 800297c:	4149      	adcs	r1, r1
 800297e:	181b      	adds	r3, r3, r0
 8002980:	f141 0100 	adc.w	r1, r1, #0
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1818      	adds	r0, r3, r0
 800298e:	6863      	ldr	r3, [r4, #4]
 8002990:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002994:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002998:	f141 0100 	adc.w	r1, r1, #0
 800299c:	f7fd fc3a 	bl	8000214 <__aeabi_uldivmod>
 80029a0:	6821      	ldr	r1, [r4, #0]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a18 <UART_SetConfig+0x100>)
 80029a4:	fba2 4300 	umull	r4, r3, r2, r0
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	2464      	movs	r4, #100	@ 0x64
 80029ac:	fb04 0013 	mls	r0, r4, r3, r0
 80029b0:	0100      	lsls	r0, r0, #4
 80029b2:	3032      	adds	r0, #50	@ 0x32
 80029b4:	fba2 2000 	umull	r2, r0, r2, r0
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80029be:	608b      	str	r3, [r1, #8]
  }
}
 80029c0:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029c2:	2300      	movs	r3, #0
 80029c4:	1802      	adds	r2, r0, r0
 80029c6:	eb43 0103 	adc.w	r1, r3, r3
 80029ca:	1812      	adds	r2, r2, r0
 80029cc:	f141 0100 	adc.w	r1, r1, #0
 80029d0:	00c9      	lsls	r1, r1, #3
 80029d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029d6:	00d2      	lsls	r2, r2, #3
 80029d8:	1810      	adds	r0, r2, r0
 80029da:	f141 0100 	adc.w	r1, r1, #0
 80029de:	6862      	ldr	r2, [r4, #4]
 80029e0:	1892      	adds	r2, r2, r2
 80029e2:	415b      	adcs	r3, r3
 80029e4:	f7fd fc16 	bl	8000214 <__aeabi_uldivmod>
 80029e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a18 <UART_SetConfig+0x100>)
 80029ea:	fba2 3100 	umull	r3, r1, r2, r0
 80029ee:	0949      	lsrs	r1, r1, #5
 80029f0:	2364      	movs	r3, #100	@ 0x64
 80029f2:	fb03 0311 	mls	r3, r3, r1, r0
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	3332      	adds	r3, #50	@ 0x32
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	6820      	ldr	r0, [r4, #0]
 8002a00:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002a04:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a0e:	4413      	add	r3, r2
 8002a10:	6083      	str	r3, [r0, #8]
 8002a12:	e7d5      	b.n	80029c0 <UART_SetConfig+0xa8>
 8002a14:	40011000 	.word	0x40011000
 8002a18:	51eb851f 	.word	0x51eb851f

08002a1c <UART_WaitOnFlagUntilTimeout>:
{
 8002a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a20:	b083      	sub	sp, #12
 8002a22:	4680      	mov	r8, r0
 8002a24:	460d      	mov	r5, r1
 8002a26:	4616      	mov	r6, r2
 8002a28:	4699      	mov	r9, r3
 8002a2a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8002a30:	681c      	ldr	r4, [r3, #0]
 8002a32:	ea35 0404 	bics.w	r4, r5, r4
 8002a36:	bf0c      	ite	eq
 8002a38:	2401      	moveq	r4, #1
 8002a3a:	2400      	movne	r4, #0
 8002a3c:	42b4      	cmp	r4, r6
 8002a3e:	d128      	bne.n	8002a92 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002a40:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002a44:	d0f4      	beq.n	8002a30 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7fe f9d9 	bl	8000dfc <HAL_GetTick>
 8002a4a:	eba0 0009 	sub.w	r0, r0, r9
 8002a4e:	42b8      	cmp	r0, r7
 8002a50:	d823      	bhi.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x7e>
 8002a52:	b327      	cbz	r7, 8002a9e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a54:	f8d8 3000 	ldr.w	r3, [r8]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	f012 0f04 	tst.w	r2, #4
 8002a5e:	d0e5      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x10>
 8002a60:	2d80      	cmp	r5, #128	@ 0x80
 8002a62:	d0e3      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x10>
 8002a64:	2d40      	cmp	r5, #64	@ 0x40
 8002a66:	d0e1      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	f012 0f08 	tst.w	r2, #8
 8002a6e:	d0dd      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a70:	2400      	movs	r4, #0
 8002a72:	9401      	str	r4, [sp, #4]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	9201      	str	r2, [sp, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002a7e:	4640      	mov	r0, r8
 8002a80:	f7ff ff1c 	bl	80028bc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a84:	2308      	movs	r3, #8
 8002a86:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002a8a:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e000      	b.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002a92:	2000      	movs	r0, #0
}
 8002a94:	b003      	add	sp, #12
 8002a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002a9a:	2003      	movs	r0, #3
 8002a9c:	e7fa      	b.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x78>
 8002a9e:	2003      	movs	r0, #3
 8002aa0:	e7f8      	b.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x78>

08002aa2 <HAL_UART_Init>:
  if (huart == NULL)
 8002aa2:	b360      	cbz	r0, 8002afe <HAL_UART_Init+0x5c>
{
 8002aa4:	b510      	push	{r4, lr}
 8002aa6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002aac:	b313      	cbz	r3, 8002af4 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002aae:	2324      	movs	r3, #36	@ 0x24
 8002ab0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002ab4:	6822      	ldr	r2, [r4, #0]
 8002ab6:	68d3      	ldr	r3, [r2, #12]
 8002ab8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002abc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f7ff ff2a 	bl	8002918 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac4:	6822      	ldr	r2, [r4, #0]
 8002ac6:	6913      	ldr	r3, [r2, #16]
 8002ac8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002acc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ace:	6822      	ldr	r2, [r4, #0]
 8002ad0:	6953      	ldr	r3, [r2, #20]
 8002ad2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002ad6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	68d3      	ldr	r3, [r2, #12]
 8002adc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ae0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002aec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af0:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002af2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002af4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002af8:	f7fe f8bc 	bl	8000c74 <HAL_UART_MspInit>
 8002afc:	e7d7      	b.n	8002aae <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002afe:	2001      	movs	r0, #1
}
 8002b00:	4770      	bx	lr

08002b02 <HAL_UART_Transmit>:
{
 8002b02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d15c      	bne.n	8002bce <HAL_UART_Transmit+0xcc>
 8002b14:	4604      	mov	r4, r0
 8002b16:	460d      	mov	r5, r1
 8002b18:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	2900      	cmp	r1, #0
 8002b1c:	d05b      	beq.n	8002bd6 <HAL_UART_Transmit+0xd4>
 8002b1e:	b90a      	cbnz	r2, 8002b24 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002b20:	2001      	movs	r0, #1
 8002b22:	e055      	b.n	8002bd0 <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b28:	2321      	movs	r3, #33	@ 0x21
 8002b2a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002b2e:	f7fe f965 	bl	8000dfc <HAL_GetTick>
 8002b32:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002b34:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b38:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3c:	68a3      	ldr	r3, [r4, #8]
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b42:	d009      	beq.n	8002b58 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8002b44:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8002b48:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b373      	cbz	r3, 8002bac <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b4e:	f04f 0900 	mov.w	r9, #0
 8002b52:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8002b56:	e019      	b.n	8002b8c <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b58:	6923      	ldr	r3, [r4, #16]
 8002b5a:	b113      	cbz	r3, 8002b62 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002b5c:	f04f 0a00 	mov.w	sl, #0
 8002b60:	e7f2      	b.n	8002b48 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8002b62:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8002b64:	2500      	movs	r5, #0
 8002b66:	e7ef      	b.n	8002b48 <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002b6e:	2003      	movs	r0, #3
 8002b70:	e02e      	b.n	8002bd0 <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8002b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002b7e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002b80:	3a01      	subs	r2, #1
 8002b82:	b292      	uxth	r2, r2
 8002b84:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b86:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	b17b      	cbz	r3, 8002bac <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8c:	9600      	str	r6, [sp, #0]
 8002b8e:	463b      	mov	r3, r7
 8002b90:	464a      	mov	r2, r9
 8002b92:	4641      	mov	r1, r8
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7ff ff41 	bl	8002a1c <UART_WaitOnFlagUntilTimeout>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d1e4      	bne.n	8002b68 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8002b9e:	2d00      	cmp	r5, #0
 8002ba0:	d0e7      	beq.n	8002b72 <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002ba8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002baa:	e7e8      	b.n	8002b7e <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bac:	9600      	str	r6, [sp, #0]
 8002bae:	463b      	mov	r3, r7
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2140      	movs	r1, #64	@ 0x40
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7ff ff31 	bl	8002a1c <UART_WaitOnFlagUntilTimeout>
 8002bba:	b918      	cbnz	r0, 8002bc4 <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002bc2:	e005      	b.n	8002bd0 <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002bca:	2003      	movs	r0, #3
 8002bcc:	e000      	b.n	8002bd0 <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 8002bce:	2002      	movs	r0, #2
}
 8002bd0:	b002      	add	sp, #8
 8002bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	e7fa      	b.n	8002bd0 <HAL_UART_Transmit+0xce>

08002bda <memset>:
 8002bda:	4402      	add	r2, r0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d100      	bne.n	8002be4 <memset+0xa>
 8002be2:	4770      	bx	lr
 8002be4:	f803 1b01 	strb.w	r1, [r3], #1
 8002be8:	e7f9      	b.n	8002bde <memset+0x4>
	...

08002bec <__libc_init_array>:
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	4d0d      	ldr	r5, [pc, #52]	@ (8002c24 <__libc_init_array+0x38>)
 8002bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8002c28 <__libc_init_array+0x3c>)
 8002bf2:	1b64      	subs	r4, r4, r5
 8002bf4:	10a4      	asrs	r4, r4, #2
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	42a6      	cmp	r6, r4
 8002bfa:	d109      	bne.n	8002c10 <__libc_init_array+0x24>
 8002bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8002c2c <__libc_init_array+0x40>)
 8002bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8002c30 <__libc_init_array+0x44>)
 8002c00:	f000 f818 	bl	8002c34 <_init>
 8002c04:	1b64      	subs	r4, r4, r5
 8002c06:	10a4      	asrs	r4, r4, #2
 8002c08:	2600      	movs	r6, #0
 8002c0a:	42a6      	cmp	r6, r4
 8002c0c:	d105      	bne.n	8002c1a <__libc_init_array+0x2e>
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
 8002c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c14:	4798      	blx	r3
 8002c16:	3601      	adds	r6, #1
 8002c18:	e7ee      	b.n	8002bf8 <__libc_init_array+0xc>
 8002c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1e:	4798      	blx	r3
 8002c20:	3601      	adds	r6, #1
 8002c22:	e7f2      	b.n	8002c0a <__libc_init_array+0x1e>
 8002c24:	08002c94 	.word	0x08002c94
 8002c28:	08002c94 	.word	0x08002c94
 8002c2c:	08002c94 	.word	0x08002c94
 8002c30:	08002c98 	.word	0x08002c98

08002c34 <_init>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	bf00      	nop
 8002c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3a:	bc08      	pop	{r3}
 8002c3c:	469e      	mov	lr, r3
 8002c3e:	4770      	bx	lr

08002c40 <_fini>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr
