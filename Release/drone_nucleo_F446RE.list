
drone_nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004638  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004808  08004808  00005808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d4  080048d4  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048d4  080048d4  000058d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048dc  080048dc  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048dc  080048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080048e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  20000060  08004944  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08004944  000064a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155a9  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002505  00000000  00000000  0001b639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c942  00000000  00000000  0001db3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0002a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c13  00000000  00000000  0002b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227bd  00000000  00000000  0002be63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189f3  00000000  00000000  0004e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41a2  00000000  00000000  00067013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b1b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002dfc  00000000  00000000  0013b1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0013dff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080047f0 	.word	0x080047f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080047f0 	.word	0x080047f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <Debug_Send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Send(const char *msg)
{
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000e2c:	f7ff f9f0 	bl	8000210 <strlen>
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	b282      	uxth	r2, r0
 8000e36:	4621      	mov	r1, r4
 8000e38:	4801      	ldr	r0, [pc, #4]	@ (8000e40 <Debug_Send+0x18>)
 8000e3a:	f002 fedc 	bl	8003bf6 <HAL_UART_Transmit>
}
 8000e3e:	bd10      	pop	{r4, pc}
 8000e40:	20000228 	.word	0x20000228

08000e44 <IMU_UpdateAverage>:

        MX_I2C1_Init();
}

void IMU_UpdateAverage(const MPU6050_Physical_t *sample)
{
 8000e44:	b530      	push	{r4, r5, lr}
 8000e46:	4684      	mov	ip, r0
	if (imu_count < IMU_WINDOW_SIZE)
 8000e48:	4b7c      	ldr	r3, [pc, #496]	@ (800103c <IMU_UpdateAverage+0x1f8>)
 8000e4a:	f893 e000 	ldrb.w	lr, [r3]
 8000e4e:	f1be 0f09 	cmp.w	lr, #9
 8000e52:	f200 808c 	bhi.w	8000f6e <IMU_UpdateAverage+0x12a>
	{
		imu_window[imu_index] = *sample;
 8000e56:	4b7a      	ldr	r3, [pc, #488]	@ (8001040 <IMU_UpdateAverage+0x1fc>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000e5e:	4c79      	ldr	r4, [pc, #484]	@ (8001044 <IMU_UpdateAverage+0x200>)
 8000e60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000e64:	4605      	mov	r5, r0
 8000e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		imu_sum.accel_x += sample->accel_x;
 8000e72:	4b75      	ldr	r3, [pc, #468]	@ (8001048 <IMU_UpdateAverage+0x204>)
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	ed9c 7a00 	vldr	s14, [ip]
 8000e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e80:	edc3 7a00 	vstr	s15, [r3]
		imu_sum.accel_y += sample->accel_y;
 8000e84:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e88:	ed9c 7a01 	vldr	s14, [ip, #4]
 8000e8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e90:	edc3 7a01 	vstr	s15, [r3, #4]
		imu_sum.accel_z += sample->accel_z;
 8000e94:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e98:	ed9c 7a02 	vldr	s14, [ip, #8]
 8000e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ea0:	edc3 7a02 	vstr	s15, [r3, #8]
		imu_sum.gyro_x  += sample->gyro_x;
 8000ea4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ea8:	ed9c 7a03 	vldr	s14, [ip, #12]
 8000eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eb0:	edc3 7a03 	vstr	s15, [r3, #12]
		imu_sum.gyro_y  += sample->gyro_y;
 8000eb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000eb8:	ed9c 7a04 	vldr	s14, [ip, #16]
 8000ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ec0:	edc3 7a04 	vstr	s15, [r3, #16]
		imu_sum.gyro_z  += sample->gyro_z;
 8000ec4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ec8:	ed9c 7a05 	vldr	s14, [ip, #20]
 8000ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ed0:	edc3 7a05 	vstr	s15, [r3, #20]
		imu_sum.temp    += sample->temp;
 8000ed4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ed8:	ed9c 7a06 	vldr	s14, [ip, #24]
 8000edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ee0:	edc3 7a06 	vstr	s15, [r3, #24]
		imu_count++;
 8000ee4:	f10e 0e01 	add.w	lr, lr, #1
 8000ee8:	4b54      	ldr	r3, [pc, #336]	@ (800103c <IMU_UpdateAverage+0x1f8>)
 8000eea:	f883 e000 	strb.w	lr, [r3]
		imu_sum.gyro_y  += sample->gyro_y;
		imu_sum.gyro_z  += sample->gyro_z;
		imu_sum.temp    += sample->temp;
	}

	imu_index = (imu_index + 1) % IMU_WINDOW_SIZE;
 8000eee:	4854      	ldr	r0, [pc, #336]	@ (8001040 <IMU_UpdateAverage+0x1fc>)
 8000ef0:	7803      	ldrb	r3, [r0, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a55      	ldr	r2, [pc, #340]	@ (800104c <IMU_UpdateAverage+0x208>)
 8000ef6:	fb82 1203 	smull	r1, r2, r2, r3
 8000efa:	f002 01fc 	and.w	r1, r2, #252	@ 0xfc
 8000efe:	eb01 02a2 	add.w	r2, r1, r2, asr #2
 8000f02:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8000f06:	7003      	strb	r3, [r0, #0]
	float div = (float)imu_count;
 8000f08:	4b4c      	ldr	r3, [pc, #304]	@ (800103c <IMU_UpdateAverage+0x1f8>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eef8 7a67 	vcvt.f32.u32	s15, s15

	imu_avg.accel_x = imu_sum.accel_x / div;
 8000f14:	4b4e      	ldr	r3, [pc, #312]	@ (8001050 <IMU_UpdateAverage+0x20c>)
 8000f16:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <IMU_UpdateAverage+0x204>)
 8000f18:	edd2 6a00 	vldr	s13, [r2]
 8000f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f20:	ed83 7a00 	vstr	s14, [r3]
	imu_avg.accel_y = imu_sum.accel_y / div;
 8000f24:	edd2 6a01 	vldr	s13, [r2, #4]
 8000f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f2c:	ed83 7a01 	vstr	s14, [r3, #4]
	imu_avg.accel_z = imu_sum.accel_z / div;
 8000f30:	edd2 6a02 	vldr	s13, [r2, #8]
 8000f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f38:	ed83 7a02 	vstr	s14, [r3, #8]
	imu_avg.gyro_x  = imu_sum.gyro_x  / div;
 8000f3c:	edd2 6a03 	vldr	s13, [r2, #12]
 8000f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f44:	ed83 7a03 	vstr	s14, [r3, #12]
	imu_avg.gyro_y  = imu_sum.gyro_y  / div;
 8000f48:	edd2 6a04 	vldr	s13, [r2, #16]
 8000f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f50:	ed83 7a04 	vstr	s14, [r3, #16]
	imu_avg.gyro_z  = imu_sum.gyro_z  / div;
 8000f54:	edd2 6a05 	vldr	s13, [r2, #20]
 8000f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f5c:	ed83 7a05 	vstr	s14, [r3, #20]
	imu_avg.temp    = imu_sum.temp    / div;
 8000f60:	edd2 6a06 	vldr	s13, [r2, #24]
 8000f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f68:	ed83 7a06 	vstr	s14, [r3, #24]
}
 8000f6c:	bd30      	pop	{r4, r5, pc}
		imu_sum.accel_x -= imu_window[imu_index].accel_x;
 8000f6e:	4b34      	ldr	r3, [pc, #208]	@ (8001040 <IMU_UpdateAverage+0x1fc>)
 8000f70:	7819      	ldrb	r1, [r3, #0]
 8000f72:	4c35      	ldr	r4, [pc, #212]	@ (8001048 <IMU_UpdateAverage+0x204>)
 8000f74:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <IMU_UpdateAverage+0x200>)
 8000f76:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000f7a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000f7e:	ed94 4a00 	vldr	s8, [r4]
 8000f82:	edd2 7a00 	vldr	s15, [r2]
 8000f86:	ee34 4a67 	vsub.f32	s8, s8, s15
		imu_sum.accel_y -= imu_window[imu_index].accel_y;
 8000f8a:	edd4 4a01 	vldr	s9, [r4, #4]
 8000f8e:	edd2 7a01 	vldr	s15, [r2, #4]
 8000f92:	ee74 4ae7 	vsub.f32	s9, s9, s15
		imu_sum.accel_z -= imu_window[imu_index].accel_z;
 8000f96:	ed94 5a02 	vldr	s10, [r4, #8]
 8000f9a:	edd2 7a02 	vldr	s15, [r2, #8]
 8000f9e:	ee35 5a67 	vsub.f32	s10, s10, s15
		imu_sum.gyro_x  -= imu_window[imu_index].gyro_x;
 8000fa2:	edd4 5a03 	vldr	s11, [r4, #12]
 8000fa6:	edd2 7a03 	vldr	s15, [r2, #12]
 8000faa:	ee75 5ae7 	vsub.f32	s11, s11, s15
		imu_sum.gyro_y  -= imu_window[imu_index].gyro_y;
 8000fae:	ed94 6a04 	vldr	s12, [r4, #16]
 8000fb2:	edd2 7a04 	vldr	s15, [r2, #16]
 8000fb6:	ee36 6a67 	vsub.f32	s12, s12, s15
		imu_sum.gyro_z  -= imu_window[imu_index].gyro_z;
 8000fba:	edd4 6a05 	vldr	s13, [r4, #20]
 8000fbe:	edd2 7a05 	vldr	s15, [r2, #20]
 8000fc2:	ee76 6ae7 	vsub.f32	s13, s13, s15
		imu_sum.temp    -= imu_window[imu_index].temp;
 8000fc6:	ed94 7a06 	vldr	s14, [r4, #24]
 8000fca:	edd2 7a06 	vldr	s15, [r2, #24]
 8000fce:	ee37 7a67 	vsub.f32	s14, s14, s15
		imu_window[imu_index] = *sample;
 8000fd2:	4696      	mov	lr, r2
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000fdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe0:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
		imu_sum.accel_x += sample->accel_x;
 8000fe4:	eddc 7a00 	vldr	s15, [ip]
 8000fe8:	ee77 7a84 	vadd.f32	s15, s15, s8
 8000fec:	edc4 7a00 	vstr	s15, [r4]
		imu_sum.accel_y += sample->accel_y;
 8000ff0:	eddc 7a01 	vldr	s15, [ip, #4]
 8000ff4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8000ff8:	edc4 7a01 	vstr	s15, [r4, #4]
		imu_sum.accel_z += sample->accel_z;
 8000ffc:	eddc 7a02 	vldr	s15, [ip, #8]
 8001000:	ee77 7a85 	vadd.f32	s15, s15, s10
 8001004:	edc4 7a02 	vstr	s15, [r4, #8]
		imu_sum.gyro_x  += sample->gyro_x;
 8001008:	eddc 7a03 	vldr	s15, [ip, #12]
 800100c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001010:	edc4 7a03 	vstr	s15, [r4, #12]
		imu_sum.gyro_y  += sample->gyro_y;
 8001014:	eddc 7a04 	vldr	s15, [ip, #16]
 8001018:	ee77 7a86 	vadd.f32	s15, s15, s12
 800101c:	edc4 7a04 	vstr	s15, [r4, #16]
		imu_sum.gyro_z  += sample->gyro_z;
 8001020:	eddc 7a05 	vldr	s15, [ip, #20]
 8001024:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001028:	edc4 7a05 	vstr	s15, [r4, #20]
		imu_sum.temp    += sample->temp;
 800102c:	eddc 7a06 	vldr	s15, [ip, #24]
 8001030:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001034:	edc4 7a06 	vstr	s15, [r4, #24]
 8001038:	e759      	b.n	8000eee <IMU_UpdateAverage+0xaa>
 800103a:	bf00      	nop
 800103c:	20000089 	.word	0x20000089
 8001040:	2000008a 	.word	0x2000008a
 8001044:	200000a8 	.word	0x200000a8
 8001048:	2000008c 	.word	0x2000008c
 800104c:	66666667 	.word	0x66666667
 8001050:	200001c0 	.word	0x200001c0

08001054 <SoftStartPWM>:
#define PWM_MAX_STEP 1  // passo máximo permitido por ciclo
#define Kp 0.2f            // ganho proporcional (ajuste conforme necessário)

void SoftStartPWM(uint32_t *current, uint32_t target)
{
	int32_t error = (int32_t)target - (int32_t)(*current);
 8001054:	6802      	ldr	r2, [r0, #0]
 8001056:	1a8b      	subs	r3, r1, r2
 8001058:	ee07 3a90 	vmov	s15, r3
	int32_t step = (int32_t)(Kp * error);
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001098 <SoftStartPWM+0x44>
 8001064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106c:	ee17 3a90 	vmov	r3, s15

	// saturação do passo
	if (step > PWM_MAX_STEP) step = PWM_MAX_STEP;
	else if (step < -PWM_MAX_STEP) step = -PWM_MAX_STEP;
 8001070:	ea43 7ce3 	orr.w	ip, r3, r3, asr #31

	*current += step;
 8001074:	f1bc 0f01 	cmp.w	ip, #1
 8001078:	bfd4      	ite	le
 800107a:	4462      	addle	r2, ip
 800107c:	3201      	addgt	r2, #1
 800107e:	6002      	str	r2, [r0, #0]

	// proteção contra overshoot (caso o passo cause ultrapassagem)
	if ((step > 0 && *current > target) || (step < 0 && *current < target)) {
 8001080:	2b00      	cmp	r3, #0
 8001082:	dd02      	ble.n	800108a <SoftStartPWM+0x36>
 8001084:	428a      	cmp	r2, r1
 8001086:	d804      	bhi.n	8001092 <SoftStartPWM+0x3e>
 8001088:	4770      	bx	lr
 800108a:	2b00      	cmp	r3, #0
 800108c:	da02      	bge.n	8001094 <SoftStartPWM+0x40>
 800108e:	428a      	cmp	r2, r1
 8001090:	d200      	bcs.n	8001094 <SoftStartPWM+0x40>
		*current = target;
 8001092:	6001      	str	r1, [r0, #0]
	}
}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	3e4ccccd 	.word	0x3e4ccccd

0800109c <UpdatePWM>:


void UpdatePWM(void)
{
 800109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SoftStartPWM((uint32_t*)&PWM_D9, PWM_D9_Target);
 800109e:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <UpdatePWM+0x4c>)
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	4f12      	ldr	r7, [pc, #72]	@ (80010ec <UpdatePWM+0x50>)
 80010a4:	4638      	mov	r0, r7
 80010a6:	f7ff ffd5 	bl	8001054 <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D6, PWM_D6_Target);
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <UpdatePWM+0x54>)
 80010ac:	6819      	ldr	r1, [r3, #0]
 80010ae:	4e11      	ldr	r6, [pc, #68]	@ (80010f4 <UpdatePWM+0x58>)
 80010b0:	4630      	mov	r0, r6
 80010b2:	f7ff ffcf 	bl	8001054 <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D5, PWM_D5_Target);
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <UpdatePWM+0x5c>)
 80010b8:	6819      	ldr	r1, [r3, #0]
 80010ba:	4d10      	ldr	r5, [pc, #64]	@ (80010fc <UpdatePWM+0x60>)
 80010bc:	4628      	mov	r0, r5
 80010be:	f7ff ffc9 	bl	8001054 <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D3, PWM_D3_Target);
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <UpdatePWM+0x64>)
 80010c4:	6819      	ldr	r1, [r3, #0]
 80010c6:	4c0f      	ldr	r4, [pc, #60]	@ (8001104 <UpdatePWM+0x68>)
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff ffc3 	bl	8001054 <SoftStartPWM>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_D9);
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <UpdatePWM+0x6c>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	6393      	str	r3, [r2, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM_D6);
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <UpdatePWM+0x70>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6831      	ldr	r1, [r6, #0]
 80010dc:	63d9      	str	r1, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_D5);
 80010de:	6829      	ldr	r1, [r5, #0]
 80010e0:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_D3);
 80010e2:	6822      	ldr	r2, [r4, #0]
 80010e4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010e8:	20000214 	.word	0x20000214
 80010ec:	20000224 	.word	0x20000224
 80010f0:	20000210 	.word	0x20000210
 80010f4:	20000220 	.word	0x20000220
 80010f8:	2000020c 	.word	0x2000020c
 80010fc:	2000021c 	.word	0x2000021c
 8001100:	20000208 	.word	0x20000208
 8001104:	20000218 	.word	0x20000218
 8001108:	20000270 	.word	0x20000270
 800110c:	200002b8 	.word	0x200002b8

08001110 <HAL_GPIO_EXTI_Callback>:

uint32_t last_button_time = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin)
 8001110:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001114:	d000      	beq.n	8001118 <HAL_GPIO_EXTI_Callback+0x8>
 8001116:	4770      	bx	lr
{
 8001118:	b510      	push	{r4, lr}
	{
		uint32_t now = HAL_GetTick();
 800111a:	f000 fdfb 	bl	8001d14 <HAL_GetTick>
 800111e:	4604      	mov	r4, r0
		if (now - last_button_time > 200) // 200 ms debounce
 8001120:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	1ac3      	subs	r3, r0, r3
 8001126:	2bc8      	cmp	r3, #200	@ 0xc8
 8001128:	d90c      	bls.n	8001144 <HAL_GPIO_EXTI_Callback+0x34>
		{
			control_enabled = !control_enabled;
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_GPIO_EXTI_Callback+0x44>)
 800112c:	7813      	ldrb	r3, [r2, #0]
 800112e:	fab3 f383 	clz	r3, r3
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	7013      	strb	r3, [r2, #0]
			if (control_enabled)
 8001136:	7813      	ldrb	r3, [r2, #0]
 8001138:	b12b      	cbz	r3, 8001146 <HAL_GPIO_EXTI_Callback+0x36>
				Debug_Send("Control Enabled\r\n");
 800113a:	4807      	ldr	r0, [pc, #28]	@ (8001158 <HAL_GPIO_EXTI_Callback+0x48>)
 800113c:	f7ff fe74 	bl	8000e28 <Debug_Send>
			else
				Debug_Send("Control Disabled\r\n");

			last_button_time = now;
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x40>)
 8001142:	601c      	str	r4, [r3, #0]
		}
	}
}
 8001144:	bd10      	pop	{r4, pc}
				Debug_Send("Control Disabled\r\n");
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001148:	f7ff fe6e 	bl	8000e28 <Debug_Send>
 800114c:	e7f8      	b.n	8001140 <HAL_GPIO_EXTI_Callback+0x30>
 800114e:	bf00      	nop
 8001150:	2000007c 	.word	0x2000007c
 8001154:	20000088 	.word	0x20000088
 8001158:	08004808 	.word	0x08004808
 800115c:	0800481c 	.word	0x0800481c

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	Debug_Send("Error_Handler\r\n");
 8001162:	4802      	ldr	r0, [pc, #8]	@ (800116c <Error_Handler+0xc>)
 8001164:	f7ff fe60 	bl	8000e28 <Debug_Send>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
	__disable_irq();
	while (1)
 800116a:	e7fe      	b.n	800116a <Error_Handler+0xa>
 800116c:	08004830 	.word	0x08004830

08001170 <MX_I2C1_Init>:
{
 8001170:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001172:	480a      	ldr	r0, [pc, #40]	@ (800119c <MX_I2C1_Init+0x2c>)
 8001174:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <MX_I2C1_Init+0x30>)
 8001176:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <MX_I2C1_Init+0x34>)
 800117a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800117c:	2300      	movs	r3, #0
 800117e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001180:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001182:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001186:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001190:	f001 fa76 	bl	8002680 <HAL_I2C_Init>
 8001194:	b900      	cbnz	r0, 8001198 <MX_I2C1_Init+0x28>
}
 8001196:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001198:	f7ff ffe2 	bl	8001160 <Error_Handler>
 800119c:	20000300 	.word	0x20000300
 80011a0:	40005400 	.word	0x40005400
 80011a4:	000186a0 	.word	0x000186a0

080011a8 <I2C_ResetBus>:
{
 80011a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011aa:	b087      	sub	sp, #28
        HAL_I2C_DeInit(&hi2c1);
 80011ac:	481a      	ldr	r0, [pc, #104]	@ (8001218 <I2C_ResetBus+0x70>)
 80011ae:	f001 fb29 	bl	8002804 <HAL_I2C_DeInit>
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	2300      	movs	r3, #0
 80011b4:	9304      	str	r3, [sp, #16]
 80011b6:	9305      	str	r3, [sp, #20]
        GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011bc:	9301      	str	r3, [sp, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011be:	2311      	movs	r3, #17
 80011c0:	9302      	str	r3, [sp, #8]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	9303      	str	r3, [sp, #12]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	a901      	add	r1, sp, #4
 80011c8:	4814      	ldr	r0, [pc, #80]	@ (800121c <I2C_ResetBus+0x74>)
 80011ca:	f000 fe27 	bl	8001e1c <HAL_GPIO_Init>
 80011ce:	2509      	movs	r5, #9
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80011d0:	4f12      	ldr	r7, [pc, #72]	@ (800121c <I2C_ResetBus+0x74>)
 80011d2:	2401      	movs	r4, #1
 80011d4:	f44f 7680 	mov.w	r6, #256	@ 0x100
 80011d8:	4622      	mov	r2, r4
 80011da:	4631      	mov	r1, r6
 80011dc:	4638      	mov	r0, r7
 80011de:	f000 ffb5 	bl	800214c <HAL_GPIO_WritePin>
                HAL_Delay(1);
 80011e2:	4620      	mov	r0, r4
 80011e4:	f000 fd9c 	bl	8001d20 <HAL_Delay>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	4631      	mov	r1, r6
 80011ec:	4638      	mov	r0, r7
 80011ee:	f000 ffad 	bl	800214c <HAL_GPIO_WritePin>
                HAL_Delay(1);
 80011f2:	4620      	mov	r0, r4
 80011f4:	f000 fd94 	bl	8001d20 <HAL_Delay>
        for (int i = 0; i < 9; i++)
 80011f8:	3d01      	subs	r5, #1
 80011fa:	d1ed      	bne.n	80011d8 <I2C_ResetBus+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <I2C_ResetBus+0x74>)
 8001204:	f000 ffa2 	bl	800214c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f000 fd89 	bl	8001d20 <HAL_Delay>
        MX_I2C1_Init();
 800120e:	f7ff ffaf 	bl	8001170 <MX_I2C1_Init>
}
 8001212:	b007      	add	sp, #28
 8001214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001216:	bf00      	nop
 8001218:	20000300 	.word	0x20000300
 800121c:	40020400 	.word	0x40020400

08001220 <SystemClock_Config>:
{
 8001220:	b500      	push	{lr}
 8001222:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001224:	2234      	movs	r2, #52	@ 0x34
 8001226:	2100      	movs	r1, #0
 8001228:	a807      	add	r0, sp, #28
 800122a:	f002 fd87 	bl	8003d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122e:	2300      	movs	r3, #0
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	9303      	str	r3, [sp, #12]
 8001234:	9304      	str	r3, [sp, #16]
 8001236:	9305      	str	r3, [sp, #20]
 8001238:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4a1f      	ldr	r2, [pc, #124]	@ (80012bc <SystemClock_Config+0x9c>)
 800123e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001240:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001244:	6411      	str	r1, [r2, #64]	@ 0x40
 8001246:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001248:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800124c:	9200      	str	r2, [sp, #0]
 800124e:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	491b      	ldr	r1, [pc, #108]	@ (80012c0 <SystemClock_Config+0xa0>)
 8001254:	680a      	ldr	r2, [r1, #0]
 8001256:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800125a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800125e:	600a      	str	r2, [r1, #0]
 8001260:	680a      	ldr	r2, [r1, #0]
 8001262:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001266:	9201      	str	r2, [sp, #4]
 8001268:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126a:	2202      	movs	r2, #2
 800126c:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126e:	2101      	movs	r1, #1
 8001270:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001272:	2110      	movs	r1, #16
 8001274:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001278:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800127a:	910f      	str	r1, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800127c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001280:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001282:	2304      	movs	r3, #4
 8001284:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001286:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001288:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	a807      	add	r0, sp, #28
 800128c:	f001 feac 	bl	8002fe8 <HAL_RCC_OscConfig>
 8001290:	b980      	cbnz	r0, 80012b4 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001292:	230f      	movs	r3, #15
 8001294:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001296:	2102      	movs	r1, #2
 8001298:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800129e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012a2:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a6:	a802      	add	r0, sp, #8
 80012a8:	f001 fd04 	bl	8002cb4 <HAL_RCC_ClockConfig>
 80012ac:	b920      	cbnz	r0, 80012b8 <SystemClock_Config+0x98>
}
 80012ae:	b015      	add	sp, #84	@ 0x54
 80012b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012b4:	f7ff ff54 	bl	8001160 <Error_Handler>
    Error_Handler();
 80012b8:	f7ff ff52 	bl	8001160 <Error_Handler>
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000
 80012c4:	00000000 	.word	0x00000000

080012c8 <main>:
{
 80012c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012cc:	ed2d 8b06 	vpush	{d8-d10}
 80012d0:	b091      	sub	sp, #68	@ 0x44
  HAL_Init();
 80012d2:	f000 fcf9 	bl	8001cc8 <HAL_Init>
  SystemClock_Config();
 80012d6:	f7ff ffa3 	bl	8001220 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	2400      	movs	r4, #0
 80012dc:	9406      	str	r4, [sp, #24]
 80012de:	9407      	str	r4, [sp, #28]
 80012e0:	9408      	str	r4, [sp, #32]
 80012e2:	9409      	str	r4, [sp, #36]	@ 0x24
 80012e4:	940a      	str	r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	9400      	str	r4, [sp, #0]
 80012e8:	4b89      	ldr	r3, [pc, #548]	@ (8001510 <main+0x248>)
 80012ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ec:	f042 0204 	orr.w	r2, r2, #4
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80012f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012f4:	f002 0204 	and.w	r2, r2, #4
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fc:	9401      	str	r4, [sp, #4]
 80012fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001300:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001304:	631a      	str	r2, [r3, #48]	@ 0x30
 8001306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001308:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800130c:	9201      	str	r2, [sp, #4]
 800130e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	9402      	str	r4, [sp, #8]
 8001312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001314:	f042 0201 	orr.w	r2, r2, #1
 8001318:	631a      	str	r2, [r3, #48]	@ 0x30
 800131a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800131c:	f002 0201 	and.w	r2, r2, #1
 8001320:	9202      	str	r2, [sp, #8]
 8001322:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	9403      	str	r4, [sp, #12]
 8001326:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001328:	f042 0202 	orr.w	r2, r2, #2
 800132c:	631a      	str	r2, [r3, #48]	@ 0x30
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	9303      	str	r3, [sp, #12]
 8001336:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001338:	4d76      	ldr	r5, [pc, #472]	@ (8001514 <main+0x24c>)
 800133a:	4622      	mov	r2, r4
 800133c:	2120      	movs	r1, #32
 800133e:	4628      	mov	r0, r5
 8001340:	f000 ff04 	bl	800214c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001348:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800134a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800134e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001352:	a906      	add	r1, sp, #24
 8001354:	4870      	ldr	r0, [pc, #448]	@ (8001518 <main+0x250>)
 8001356:	f000 fd61 	bl	8001e1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800135a:	2320      	movs	r3, #32
 800135c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001366:	a906      	add	r1, sp, #24
 8001368:	4628      	mov	r0, r5
 800136a:	f000 fd57 	bl	8001e1c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800136e:	4622      	mov	r2, r4
 8001370:	4621      	mov	r1, r4
 8001372:	2028      	movs	r0, #40	@ 0x28
 8001374:	f000 fcfa 	bl	8001d6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001378:	2028      	movs	r0, #40	@ 0x28
 800137a:	f000 fd2d 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800137e:	4867      	ldr	r0, [pc, #412]	@ (800151c <main+0x254>)
 8001380:	4b67      	ldr	r3, [pc, #412]	@ (8001520 <main+0x258>)
 8001382:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001384:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001388:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001390:	230c      	movs	r3, #12
 8001392:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001394:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001396:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001398:	f002 fbfd 	bl	8003b96 <HAL_UART_Init>
 800139c:	2800      	cmp	r0, #0
 800139e:	f040 809a 	bne.w	80014d6 <main+0x20e>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a2:	2300      	movs	r3, #0
 80013a4:	9304      	str	r3, [sp, #16]
 80013a6:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a8:	9306      	str	r3, [sp, #24]
 80013aa:	9307      	str	r3, [sp, #28]
 80013ac:	9308      	str	r3, [sp, #32]
 80013ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80013b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80013b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80013b4:	930c      	str	r3, [sp, #48]	@ 0x30
  htim2.Instance = TIM2;
 80013b6:	485b      	ldr	r0, [pc, #364]	@ (8001524 <main+0x25c>)
 80013b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013bc:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80013be:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4199;
 80013c2:	f241 0267 	movw	r2, #4199	@ 0x1067
 80013c6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013cc:	f002 f956 	bl	800367c <HAL_TIM_PWM_Init>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	f040 8082 	bne.w	80014da <main+0x212>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013dc:	a904      	add	r1, sp, #16
 80013de:	4851      	ldr	r0, [pc, #324]	@ (8001524 <main+0x25c>)
 80013e0:	f002 faa2 	bl	8003928 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d17a      	bne.n	80014de <main+0x216>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e8:	2360      	movs	r3, #96	@ 0x60
 80013ea:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	9307      	str	r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f0:	9308      	str	r3, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f2:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f4:	2204      	movs	r2, #4
 80013f6:	a906      	add	r1, sp, #24
 80013f8:	484a      	ldr	r0, [pc, #296]	@ (8001524 <main+0x25c>)
 80013fa:	f002 f99d 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d16f      	bne.n	80014e2 <main+0x21a>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001402:	2208      	movs	r2, #8
 8001404:	a906      	add	r1, sp, #24
 8001406:	4847      	ldr	r0, [pc, #284]	@ (8001524 <main+0x25c>)
 8001408:	f002 f996 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 800140c:	2800      	cmp	r0, #0
 800140e:	d16a      	bne.n	80014e6 <main+0x21e>
  HAL_TIM_MspPostInit(&htim2);
 8001410:	4844      	ldr	r0, [pc, #272]	@ (8001524 <main+0x25c>)
 8001412:	f000 fb35 	bl	8001a80 <HAL_TIM_MspPostInit>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001416:	2300      	movs	r3, #0
 8001418:	9304      	str	r3, [sp, #16]
 800141a:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141c:	9306      	str	r3, [sp, #24]
 800141e:	9307      	str	r3, [sp, #28]
 8001420:	9308      	str	r3, [sp, #32]
 8001422:	9309      	str	r3, [sp, #36]	@ 0x24
 8001424:	930a      	str	r3, [sp, #40]	@ 0x28
 8001426:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001428:	930c      	str	r3, [sp, #48]	@ 0x30
  htim3.Instance = TIM3;
 800142a:	483f      	ldr	r0, [pc, #252]	@ (8001528 <main+0x260>)
 800142c:	4a3f      	ldr	r2, [pc, #252]	@ (800152c <main+0x264>)
 800142e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8001430:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 4199;
 8001434:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001438:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143e:	f002 f91d 	bl	800367c <HAL_TIM_PWM_Init>
 8001442:	2800      	cmp	r0, #0
 8001444:	d151      	bne.n	80014ea <main+0x222>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144c:	a904      	add	r1, sp, #16
 800144e:	4836      	ldr	r0, [pc, #216]	@ (8001528 <main+0x260>)
 8001450:	f002 fa6a 	bl	8003928 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	2800      	cmp	r0, #0
 8001456:	d14a      	bne.n	80014ee <main+0x226>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001458:	2360      	movs	r3, #96	@ 0x60
 800145a:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 800145c:	2200      	movs	r2, #0
 800145e:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	9208      	str	r2, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001462:	920a      	str	r2, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001464:	a906      	add	r1, sp, #24
 8001466:	4830      	ldr	r0, [pc, #192]	@ (8001528 <main+0x260>)
 8001468:	f002 f966 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 800146c:	2800      	cmp	r0, #0
 800146e:	d140      	bne.n	80014f2 <main+0x22a>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001470:	2204      	movs	r2, #4
 8001472:	a906      	add	r1, sp, #24
 8001474:	482c      	ldr	r0, [pc, #176]	@ (8001528 <main+0x260>)
 8001476:	f002 f95f 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 800147a:	2800      	cmp	r0, #0
 800147c:	d13b      	bne.n	80014f6 <main+0x22e>
  HAL_TIM_MspPostInit(&htim3);
 800147e:	4c2a      	ldr	r4, [pc, #168]	@ (8001528 <main+0x260>)
 8001480:	4620      	mov	r0, r4
 8001482:	f000 fafd 	bl	8001a80 <HAL_TIM_MspPostInit>
  MX_I2C1_Init();
 8001486:	f7ff fe73 	bl	8001170 <MX_I2C1_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800148a:	4d26      	ldr	r5, [pc, #152]	@ (8001524 <main+0x25c>)
 800148c:	2104      	movs	r1, #4
 800148e:	4628      	mov	r0, r5
 8001490:	f002 f9d0 	bl	8003834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001494:	2108      	movs	r1, #8
 8001496:	4628      	mov	r0, r5
 8001498:	f002 f9cc 	bl	8003834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800149c:	2100      	movs	r1, #0
 800149e:	4620      	mov	r0, r4
 80014a0:	f002 f9c8 	bl	8003834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014a4:	2104      	movs	r1, #4
 80014a6:	4620      	mov	r0, r4
 80014a8:	f002 f9c4 	bl	8003834 <HAL_TIM_PWM_Start>
	Debug_Send("System Init Complete\r\n");
 80014ac:	4820      	ldr	r0, [pc, #128]	@ (8001530 <main+0x268>)
 80014ae:	f7ff fcbb 	bl	8000e28 <Debug_Send>
	MPU6050_Init(&hi2c1);
 80014b2:	4820      	ldr	r0, [pc, #128]	@ (8001534 <main+0x26c>)
 80014b4:	f000 f93a 	bl	800172c <MPU6050_Init>
	uint32_t lastBlink = 0;
 80014b8:	2500      	movs	r5, #0
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014ba:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 8001514 <main+0x24c>
                if (MPU6050_ReadAll(&hi2c1, &imu_data) != HAL_OK || HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_NONE)
 80014be:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8001544 <main+0x27c>
						imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 80014c2:	ed9f 9a1d 	vldr	s18, [pc, #116]	@ 8001538 <main+0x270>
 80014c6:	a710      	add	r7, pc, #64	@ (adr r7, 8001508 <main+0x240>)
 80014c8:	e9d7 6700 	ldrd	r6, r7, [r7]
		if (m1 > MAX_PWM) m1 = MAX_PWM; else if (m1 < MIN_PWM) m1 = MIN_PWM;
 80014cc:	eddf 8a1b 	vldr	s17, [pc, #108]	@ 800153c <main+0x274>
		if (m4 > MAX_PWM) m4 = MAX_PWM; else if (m4 < MIN_PWM) m4 = MIN_PWM;
 80014d0:	ed9f 8a1b 	vldr	s16, [pc, #108]	@ 8001540 <main+0x278>
 80014d4:	e046      	b.n	8001564 <main+0x29c>
    Error_Handler();
 80014d6:	f7ff fe43 	bl	8001160 <Error_Handler>
    Error_Handler();
 80014da:	f7ff fe41 	bl	8001160 <Error_Handler>
    Error_Handler();
 80014de:	f7ff fe3f 	bl	8001160 <Error_Handler>
    Error_Handler();
 80014e2:	f7ff fe3d 	bl	8001160 <Error_Handler>
    Error_Handler();
 80014e6:	f7ff fe3b 	bl	8001160 <Error_Handler>
    Error_Handler();
 80014ea:	f7ff fe39 	bl	8001160 <Error_Handler>
    Error_Handler();
 80014ee:	f7ff fe37 	bl	8001160 <Error_Handler>
    Error_Handler();
 80014f2:	f7ff fe35 	bl	8001160 <Error_Handler>
    Error_Handler();
 80014f6:	f7ff fe33 	bl	8001160 <Error_Handler>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014fa:	2120      	movs	r1, #32
 80014fc:	4648      	mov	r0, r9
 80014fe:	f000 fe2b 	bl	8002158 <HAL_GPIO_TogglePin>
			lastBlink = now;
 8001502:	4625      	mov	r5, r4
 8001504:	e035      	b.n	8001572 <main+0x2aa>
 8001506:	bf00      	nop
 8001508:	54442d18 	.word	0x54442d18
 800150c:	400921fb 	.word	0x400921fb
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020800 	.word	0x40020800
 800151c:	20000228 	.word	0x20000228
 8001520:	40004400 	.word	0x40004400
 8001524:	200002b8 	.word	0x200002b8
 8001528:	20000270 	.word	0x20000270
 800152c:	40000400 	.word	0x40000400
 8001530:	08004840 	.word	0x08004840
 8001534:	20000300 	.word	0x20000300
 8001538:	43340000 	.word	0x43340000
 800153c:	44fa0000 	.word	0x44fa0000
 8001540:	447a0000 	.word	0x447a0000
 8001544:	200001f8 	.word	0x200001f8
                        snprintf(buf, sizeof(buf), "I2C error:%lu\r\n", HAL_I2C_GetError(&hi2c1));
 8001548:	486c      	ldr	r0, [pc, #432]	@ (80016fc <main+0x434>)
 800154a:	f001 fbb1 	bl	8002cb0 <HAL_I2C_GetError>
 800154e:	4603      	mov	r3, r0
 8001550:	4a6b      	ldr	r2, [pc, #428]	@ (8001700 <main+0x438>)
 8001552:	2128      	movs	r1, #40	@ 0x28
 8001554:	a806      	add	r0, sp, #24
 8001556:	f002 fbbb 	bl	8003cd0 <sniprintf>
                        Debug_Send(buf);
 800155a:	a806      	add	r0, sp, #24
 800155c:	f7ff fc64 	bl	8000e28 <Debug_Send>
                        I2C_ResetBus();
 8001560:	f7ff fe22 	bl	80011a8 <I2C_ResetBus>
		uint32_t now = HAL_GetTick();
 8001564:	f000 fbd6 	bl	8001d14 <HAL_GetTick>
 8001568:	4604      	mov	r4, r0
		if (now - lastBlink >= 500)
 800156a:	1b43      	subs	r3, r0, r5
 800156c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001570:	d2c3      	bcs.n	80014fa <main+0x232>
                if (MPU6050_ReadAll(&hi2c1, &imu_data) != HAL_OK || HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_NONE)
 8001572:	4641      	mov	r1, r8
 8001574:	4861      	ldr	r0, [pc, #388]	@ (80016fc <main+0x434>)
 8001576:	f000 f93c 	bl	80017f2 <MPU6050_ReadAll>
 800157a:	2800      	cmp	r0, #0
 800157c:	d1e4      	bne.n	8001548 <main+0x280>
 800157e:	485f      	ldr	r0, [pc, #380]	@ (80016fc <main+0x434>)
 8001580:	f001 fb96 	bl	8002cb0 <HAL_I2C_GetError>
 8001584:	2800      	cmp	r0, #0
 8001586:	d1df      	bne.n	8001548 <main+0x280>
                MPU6050_ConvertToPhysical(&imu_data, &imu_phys);
 8001588:	4c5e      	ldr	r4, [pc, #376]	@ (8001704 <main+0x43c>)
 800158a:	4621      	mov	r1, r4
 800158c:	4640      	mov	r0, r8
 800158e:	f000 f975 	bl	800187c <MPU6050_ConvertToPhysical>
                IMU_UpdateAverage(&imu_phys);
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff fc56 	bl	8000e44 <IMU_UpdateAverage>
		float pitch = atanf(imu_avg.accel_y /
 8001598:	4b5b      	ldr	r3, [pc, #364]	@ (8001708 <main+0x440>)
 800159a:	ed93 0a01 	vldr	s0, [r3, #4]
				sqrtf(imu_avg.accel_x * imu_avg.accel_x +
 800159e:	edd3 9a00 	vldr	s19, [r3]
						imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 80015a2:	ed93 aa02 	vldr	s20, [r3, #8]
				sqrtf(imu_avg.accel_x * imu_avg.accel_x +
 80015a6:	ee69 7aa9 	vmul.f32	s15, s19, s19
						imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 80015aa:	ee2a 7a0a 	vmul.f32	s14, s20, s20
				sqrtf(imu_avg.accel_x * imu_avg.accel_x +
 80015ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b2:	eeb1 7ae7 	vsqrt.f32	s14, s15
		float pitch = atanf(imu_avg.accel_y /
 80015b6:	ee80 0a07 	vdiv.f32	s0, s0, s14
 80015ba:	f003 f83d 	bl	8004638 <atanf>
 80015be:	eef0 aa40 	vmov.f32	s21, s0
		float roll  = atanf(-imu_avg.accel_x / imu_avg.accel_z) * 180.0f / M_PI;
 80015c2:	eef1 9a69 	vneg.f32	s19, s19
 80015c6:	ee89 0a8a 	vdiv.f32	s0, s19, s20
 80015ca:	f003 f835 	bl	8004638 <atanf>
 80015ce:	eeb0 aa40 	vmov.f32	s20, s0
						imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 80015d2:	ee6a 7a89 	vmul.f32	s15, s21, s18
 80015d6:	ee17 0a90 	vmov	r0, s15
 80015da:	f7fe ffd5 	bl	8000588 <__aeabi_f2d>
 80015de:	4632      	mov	r2, r6
 80015e0:	463b      	mov	r3, r7
 80015e2:	f7ff f953 	bl	800088c <__aeabi_ddiv>
		float pitch = atanf(imu_avg.accel_y /
 80015e6:	f7ff fa39 	bl	8000a5c <__aeabi_d2f>
 80015ea:	ee07 0a90 	vmov	s15, r0
		float error_pitch = target_pitch - pitch;
 80015ee:	4b47      	ldr	r3, [pc, #284]	@ (800170c <main+0x444>)
 80015f0:	edd3 9a00 	vldr	s19, [r3]
 80015f4:	ee79 9ae7 	vsub.f32	s19, s19, s15
		float roll  = atanf(-imu_avg.accel_x / imu_avg.accel_z) * 180.0f / M_PI;
 80015f8:	ee6a 7a09 	vmul.f32	s15, s20, s18
 80015fc:	ee17 0a90 	vmov	r0, s15
 8001600:	f7fe ffc2 	bl	8000588 <__aeabi_f2d>
 8001604:	4632      	mov	r2, r6
 8001606:	463b      	mov	r3, r7
 8001608:	f7ff f940 	bl	800088c <__aeabi_ddiv>
 800160c:	f7ff fa26 	bl	8000a5c <__aeabi_d2f>
 8001610:	ee07 0a90 	vmov	s15, r0
		float error_roll  = target_roll - roll;
 8001614:	4b3e      	ldr	r3, [pc, #248]	@ (8001710 <main+0x448>)
 8001616:	edd3 6a00 	vldr	s13, [r3]
 800161a:	ee76 6ae7 	vsub.f32	s13, s13, s15
		float throttle = throttle_base;
 800161e:	4b3d      	ldr	r3, [pc, #244]	@ (8001714 <main+0x44c>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
		float m1 = throttle + output_pitch + output_roll;
 8001624:	ee39 7aa7 	vadd.f32	s14, s19, s15
 8001628:	ee77 5a26 	vadd.f32	s11, s14, s13
		float m2 = throttle + output_pitch - output_roll;
 800162c:	ee37 7a66 	vsub.f32	s14, s14, s13
		float m3 = throttle - output_pitch + output_roll;
 8001630:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8001634:	ee37 6aa6 	vadd.f32	s12, s15, s13
		float m4 = throttle - output_pitch - output_roll;
 8001638:	ee77 7ae6 	vsub.f32	s15, s15, s13
		if (m1 > MAX_PWM) m1 = MAX_PWM; else if (m1 < MIN_PWM) m1 = MIN_PWM;
 800163c:	eef4 5ae8 	vcmpe.f32	s11, s17
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	dc44      	bgt.n	80016d0 <main+0x408>
 8001646:	eef4 5a48 	vcmp.f32	s11, s16
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	bf48      	it	mi
 8001650:	eef0 5a48 	vmovmi.f32	s11, s16
		if (m2 > MAX_PWM) m2 = MAX_PWM; else if (m2 < MIN_PWM) m2 = MIN_PWM;
 8001654:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	dc3b      	bgt.n	80016d6 <main+0x40e>
 800165e:	eeb4 7a48 	vcmp.f32	s14, s16
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	bf48      	it	mi
 8001668:	eeb0 7a48 	vmovmi.f32	s14, s16
		if (m3 > MAX_PWM) m3 = MAX_PWM; else if (m3 < MIN_PWM) m3 = MIN_PWM;
 800166c:	eeb4 6ae8 	vcmpe.f32	s12, s17
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	dc32      	bgt.n	80016dc <main+0x414>
 8001676:	eeb4 6a48 	vcmp.f32	s12, s16
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	bf48      	it	mi
 8001680:	eeb0 6a48 	vmovmi.f32	s12, s16
		if (m4 > MAX_PWM) m4 = MAX_PWM; else if (m4 < MIN_PWM) m4 = MIN_PWM;
 8001684:	eef4 7ae8 	vcmpe.f32	s15, s17
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	dc29      	bgt.n	80016e2 <main+0x41a>
 800168e:	eef4 7a48 	vcmp.f32	s15, s16
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	bf48      	it	mi
 8001698:	eef0 7a48 	vmovmi.f32	s15, s16
		if(control_enabled)
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <main+0x450>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b313      	cbz	r3, 80016e8 <main+0x420>
		PWM_D9_Target = (uint32_t)m1;
 80016a2:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80016a6:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <main+0x454>)
 80016a8:	edc3 5a00 	vstr	s11, [r3]
		PWM_D6_Target = (uint32_t)m2;
 80016ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <main+0x458>)
 80016b2:	ed83 7a00 	vstr	s14, [r3]
		PWM_D5_Target = (uint32_t)m3;
 80016b6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80016ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <main+0x45c>)
 80016bc:	ed83 6a00 	vstr	s12, [r3]
		PWM_D3_Target = (uint32_t)m4;
 80016c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <main+0x460>)
 80016c6:	edc3 7a00 	vstr	s15, [r3]
		UpdatePWM(); // This runs as fast as possible
 80016ca:	f7ff fce7 	bl	800109c <UpdatePWM>
 80016ce:	e749      	b.n	8001564 <main+0x29c>
		if (m1 > MAX_PWM) m1 = MAX_PWM; else if (m1 < MIN_PWM) m1 = MIN_PWM;
 80016d0:	eef0 5a68 	vmov.f32	s11, s17
 80016d4:	e7be      	b.n	8001654 <main+0x38c>
		if (m2 > MAX_PWM) m2 = MAX_PWM; else if (m2 < MIN_PWM) m2 = MIN_PWM;
 80016d6:	eeb0 7a68 	vmov.f32	s14, s17
 80016da:	e7c7      	b.n	800166c <main+0x3a4>
		if (m3 > MAX_PWM) m3 = MAX_PWM; else if (m3 < MIN_PWM) m3 = MIN_PWM;
 80016dc:	eeb0 6a68 	vmov.f32	s12, s17
 80016e0:	e7d0      	b.n	8001684 <main+0x3bc>
		if (m4 > MAX_PWM) m4 = MAX_PWM; else if (m4 < MIN_PWM) m4 = MIN_PWM;
 80016e2:	eef0 7a68 	vmov.f32	s15, s17
 80016e6:	e7d9      	b.n	800169c <main+0x3d4>
			PWM_D9_Target = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	4a0c      	ldr	r2, [pc, #48]	@ (800171c <main+0x454>)
 80016ec:	6013      	str	r3, [r2, #0]
					PWM_D6_Target = 0;
 80016ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001720 <main+0x458>)
 80016f0:	6013      	str	r3, [r2, #0]
					PWM_D5_Target = 0;
 80016f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001724 <main+0x45c>)
 80016f4:	6013      	str	r3, [r2, #0]
					PWM_D3_Target = 0;
 80016f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <main+0x460>)
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e7e6      	b.n	80016ca <main+0x402>
 80016fc:	20000300 	.word	0x20000300
 8001700:	08004858 	.word	0x08004858
 8001704:	200001dc 	.word	0x200001dc
 8001708:	200001c0 	.word	0x200001c0
 800170c:	20000084 	.word	0x20000084
 8001710:	20000080 	.word	0x20000080
 8001714:	20000000 	.word	0x20000000
 8001718:	20000088 	.word	0x20000088
 800171c:	20000214 	.word	0x20000214
 8001720:	20000210 	.word	0x20000210
 8001724:	2000020c 	.word	0x2000020c
 8001728:	20000208 	.word	0x20000208

0800172c <MPU6050_Init>:
#define MPU6050_REG_ACCEL_XOUT_H 0x3B
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 800172c:	b510      	push	{r4, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	4604      	mov	r4, r0
	uint8_t data;

	/* Wake up the sensor */
	data = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	2301      	movs	r3, #1
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	f10d 0217 	add.w	r2, sp, #23
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	226b      	movs	r2, #107	@ 0x6b
 800174a:	21d0      	movs	r1, #208	@ 0xd0
 800174c:	f001 f874 	bl	8002838 <HAL_I2C_Mem_Write>
 8001750:	b110      	cbz	r0, 8001758 <MPU6050_Init+0x2c>
		return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
	data = 0x08;
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
		return HAL_ERROR;

	return HAL_OK;
}
 8001754:	b006      	add	sp, #24
 8001756:	bd10      	pop	{r4, pc}
	data = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	2301      	movs	r3, #1
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	f10d 0217 	add.w	r2, sp, #23
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	2219      	movs	r2, #25
 8001770:	21d0      	movs	r1, #208	@ 0xd0
 8001772:	4620      	mov	r0, r4
 8001774:	f001 f860 	bl	8002838 <HAL_I2C_Mem_Write>
 8001778:	b108      	cbz	r0, 800177e <MPU6050_Init+0x52>
		return HAL_ERROR;
 800177a:	2001      	movs	r0, #1
 800177c:	e7ea      	b.n	8001754 <MPU6050_Init+0x28>
	data = 0x03;
 800177e:	2303      	movs	r3, #3
 8001780:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	2301      	movs	r3, #1
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	f10d 0217 	add.w	r2, sp, #23
 8001792:	9200      	str	r2, [sp, #0]
 8001794:	221a      	movs	r2, #26
 8001796:	21d0      	movs	r1, #208	@ 0xd0
 8001798:	4620      	mov	r0, r4
 800179a:	f001 f84d 	bl	8002838 <HAL_I2C_Mem_Write>
 800179e:	b108      	cbz	r0, 80017a4 <MPU6050_Init+0x78>
		return HAL_ERROR;
 80017a0:	2001      	movs	r0, #1
 80017a2:	e7d7      	b.n	8001754 <MPU6050_Init+0x28>
	data = 0x08;
 80017a4:	2308      	movs	r3, #8
 80017a6:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	2301      	movs	r3, #1
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	f10d 0217 	add.w	r2, sp, #23
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	221b      	movs	r2, #27
 80017bc:	21d0      	movs	r1, #208	@ 0xd0
 80017be:	4620      	mov	r0, r4
 80017c0:	f001 f83a 	bl	8002838 <HAL_I2C_Mem_Write>
 80017c4:	b108      	cbz	r0, 80017ca <MPU6050_Init+0x9e>
		return HAL_ERROR;
 80017c6:	2001      	movs	r0, #1
 80017c8:	e7c4      	b.n	8001754 <MPU6050_Init+0x28>
	data = 0x08;
 80017ca:	2308      	movs	r3, #8
 80017cc:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	2301      	movs	r3, #1
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	f10d 0217 	add.w	r2, sp, #23
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	221c      	movs	r2, #28
 80017e2:	21d0      	movs	r1, #208	@ 0xd0
 80017e4:	4620      	mov	r0, r4
 80017e6:	f001 f827 	bl	8002838 <HAL_I2C_Mem_Write>
 80017ea:	3800      	subs	r0, #0
 80017ec:	bf18      	it	ne
 80017ee:	2001      	movne	r0, #1
 80017f0:	e7b0      	b.n	8001754 <MPU6050_Init+0x28>

080017f2 <MPU6050_ReadAll>:

HAL_StatusTypeDef MPU6050_ReadAll(I2C_HandleTypeDef *hi2c, MPU6050_Data_t *data)
{
 80017f2:	b510      	push	{r4, lr}
 80017f4:	b088      	sub	sp, #32
 80017f6:	460c      	mov	r4, r1
	uint8_t buf[14];
	if (HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_XOUT_H, 1, buf, sizeof(buf), HAL_MAX_DELAY) != HAL_OK)
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	230e      	movs	r3, #14
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	ab04      	add	r3, sp, #16
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	223b      	movs	r2, #59	@ 0x3b
 800180a:	21d0      	movs	r1, #208	@ 0xd0
 800180c:	f001 f8ca 	bl	80029a4 <HAL_I2C_Mem_Read>
 8001810:	bb90      	cbnz	r0, 8001878 <MPU6050_ReadAll+0x86>
		return HAL_ERROR;

	data->accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 8001812:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001816:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800181a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800181e:	8023      	strh	r3, [r4, #0]
	data->accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 8001820:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8001824:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001828:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800182c:	8063      	strh	r3, [r4, #2]
	data->accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 800182e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001832:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800183a:	80a3      	strh	r3, [r4, #4]
	data->temp    = (int16_t)(buf[6] << 8 | buf[7]);
 800183c:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001840:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001848:	81a3      	strh	r3, [r4, #12]
	data->gyro_x  = (int16_t)(buf[8] << 8 | buf[9]);
 800184a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800184e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001852:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001856:	80e3      	strh	r3, [r4, #6]
	data->gyro_y  = (int16_t)(buf[10] << 8 | buf[11]);
 8001858:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800185c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8001860:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001864:	8123      	strh	r3, [r4, #8]
	data->gyro_z  = (int16_t)(buf[12] << 8 | buf[13]);
 8001866:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800186a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800186e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001872:	8163      	strh	r3, [r4, #10]

	return HAL_OK;
}
 8001874:	b008      	add	sp, #32
 8001876:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8001878:	2001      	movs	r0, #1
 800187a:	e7fb      	b.n	8001874 <MPU6050_ReadAll+0x82>

0800187c <MPU6050_ConvertToPhysical>:
{
	const float accel_lsb = 8192.0f;   /* LSB/g for +-4g */
	const float gyro_lsb  = 65.5f;     /* LSB/(deg/s) for +-500dps */
	const float g = 9.80665f;          /* m/s^2 per g */

	out->accel_x = (raw->accel_x / accel_lsb) * g;
 800187c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001888:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001930 <MPU6050_ConvertToPhysical+0xb4>
 800188c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001890:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001934 <MPU6050_ConvertToPhysical+0xb8>
 8001894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001898:	edc1 7a00 	vstr	s15, [r1]
	out->accel_y = (raw->accel_y / accel_lsb) * g;
 800189c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b0:	edc1 7a01 	vstr	s15, [r1, #4]
	out->accel_z = (raw->accel_z / accel_lsb) * g;
 80018b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c8:	edc1 7a02 	vstr	s15, [r1, #8]

	out->gyro_x  = raw->gyro_x / gyro_lsb;
 80018cc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80018d0:	ee07 3a10 	vmov	s14, r3
 80018d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018d8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8001938 <MPU6050_ConvertToPhysical+0xbc>
 80018dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018e0:	edc1 6a03 	vstr	s13, [r1, #12]
	out->gyro_y  = raw->gyro_y / gyro_lsb;
 80018e4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80018e8:	ee07 3a10 	vmov	s14, r3
 80018ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018f4:	edc1 6a04 	vstr	s13, [r1, #16]
	out->gyro_z  = raw->gyro_z / gyro_lsb;
 80018f8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80018fc:	ee07 3a10 	vmov	s14, r3
 8001900:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001904:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001908:	edc1 6a05 	vstr	s13, [r1, #20]

	out->temp = (raw->temp / 340.0f) + 36.53f;
 800190c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8001910:	ee07 3a10 	vmov	s14, r3
 8001914:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001918:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800193c <MPU6050_ConvertToPhysical+0xc0>
 800191c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001920:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001940 <MPU6050_ConvertToPhysical+0xc4>
 8001924:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001928:	edc1 7a06 	vstr	s15, [r1, #24]
}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	39000000 	.word	0x39000000
 8001934:	411ce80a 	.word	0x411ce80a
 8001938:	42830000 	.word	0x42830000
 800193c:	43aa0000 	.word	0x43aa0000
 8001940:	42121eb8 	.word	0x42121eb8

08001944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b500      	push	{lr}
 8001946:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	2100      	movs	r1, #0
 800194a:	9100      	str	r1, [sp, #0]
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <HAL_MspInit+0x3c>)
 800194e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001950:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001954:	645a      	str	r2, [r3, #68]	@ 0x44
 8001956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001958:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	9101      	str	r1, [sp, #4]
 8001962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001964:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001968:	641a      	str	r2, [r3, #64]	@ 0x40
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001974:	2007      	movs	r0, #7
 8001976:	f000 f9e7 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	b003      	add	sp, #12
 800197c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b530      	push	{r4, r5, lr}
 8001986:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	2300      	movs	r3, #0
 800198a:	9303      	str	r3, [sp, #12]
 800198c:	9304      	str	r3, [sp, #16]
 800198e:	9305      	str	r3, [sp, #20]
 8001990:	9306      	str	r3, [sp, #24]
 8001992:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001994:	6802      	ldr	r2, [r0, #0]
 8001996:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <HAL_I2C_MspInit+0x64>)
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800199c:	b009      	add	sp, #36	@ 0x24
 800199e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	2500      	movs	r5, #0
 80019a2:	9501      	str	r5, [sp, #4]
 80019a4:	4c11      	ldr	r4, [pc, #68]	@ (80019ec <HAL_I2C_MspInit+0x68>)
 80019a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80019ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019be:	2312      	movs	r3, #18
 80019c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c6:	2304      	movs	r3, #4
 80019c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	a903      	add	r1, sp, #12
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <HAL_I2C_MspInit+0x6c>)
 80019ce:	f000 fa25 	bl	8001e1c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d2:	9502      	str	r5, [sp, #8]
 80019d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019da:	6423      	str	r3, [r4, #64]	@ 0x40
 80019dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	9b02      	ldr	r3, [sp, #8]
}
 80019e6:	e7d9      	b.n	800199c <HAL_I2C_MspInit+0x18>
 80019e8:	40005400 	.word	0x40005400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020400 	.word	0x40020400

080019f4 <HAL_I2C_MspDeInit>:
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 80019f4:	6802      	ldr	r2, [r0, #0]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_I2C_MspDeInit+0x30>)
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d000      	beq.n	80019fe <HAL_I2C_MspDeInit+0xa>
 80019fc:	4770      	bx	lr
{
 80019fe:	b510      	push	{r4, lr}
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a00:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <HAL_I2C_MspDeInit+0x34>)
 8001a02:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001a04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a08:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001a0a:	4c08      	ldr	r4, [pc, #32]	@ (8001a2c <HAL_I2C_MspDeInit+0x38>)
 8001a0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a10:	4620      	mov	r0, r4
 8001a12:	f000 faf9 	bl	8002008 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001a16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f000 faf4 	bl	8002008 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001a20:	bd10      	pop	{r4, pc}
 8001a22:	bf00      	nop
 8001a24:	40005400 	.word	0x40005400
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a30:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8001a32:	6803      	ldr	r3, [r0, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a38:	d004      	beq.n	8001a44 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a78 <HAL_TIM_PWM_MspInit+0x48>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00e      	beq.n	8001a5e <HAL_TIM_PWM_MspInit+0x2e>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a40:	b002      	add	sp, #8
 8001a42:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <HAL_TIM_PWM_MspInit+0x4c>)
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	9b00      	ldr	r3, [sp, #0]
 8001a5c:	e7f0      	b.n	8001a40 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_TIM_PWM_MspInit+0x4c>)
 8001a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a66:	f042 0202 	orr.w	r2, r2, #2
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	9b01      	ldr	r3, [sp, #4]
}
 8001a76:	e7e3      	b.n	8001a40 <HAL_TIM_PWM_MspInit+0x10>
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a80:	b530      	push	{r4, r5, lr}
 8001a82:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	2300      	movs	r3, #0
 8001a86:	9303      	str	r3, [sp, #12]
 8001a88:	9304      	str	r3, [sp, #16]
 8001a8a:	9305      	str	r3, [sp, #20]
 8001a8c:	9306      	str	r3, [sp, #24]
 8001a8e:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a96:	d004      	beq.n	8001aa2 <HAL_TIM_MspPostInit+0x22>

    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001a98:	4a23      	ldr	r2, [pc, #140]	@ (8001b28 <HAL_TIM_MspPostInit+0xa8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_TIM_MspPostInit+0x52>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a9e:	b009      	add	sp, #36	@ 0x24
 8001aa0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <HAL_TIM_MspPostInit+0xac>)
 8001aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aaa:	f042 0202 	orr.w	r2, r2, #2
 8001aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001aba:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001abe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	a903      	add	r1, sp, #12
 8001aca:	4819      	ldr	r0, [pc, #100]	@ (8001b30 <HAL_TIM_MspPostInit+0xb0>)
 8001acc:	f000 f9a6 	bl	8001e1c <HAL_GPIO_Init>
 8001ad0:	e7e5      	b.n	8001a9e <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2500      	movs	r5, #0
 8001ad4:	9501      	str	r5, [sp, #4]
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_TIM_MspPostInit+0xac>)
 8001ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ada:	f042 0204 	orr.w	r2, r2, #4
 8001ade:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae2:	f002 0204 	and.w	r2, r2, #4
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	9502      	str	r5, [sp, #8]
 8001aec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aee:	f042 0202 	orr.w	r2, r2, #2
 8001af2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2402      	movs	r4, #2
 8001b04:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b06:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	a903      	add	r1, sp, #12
 8001b0a:	480a      	ldr	r0, [pc, #40]	@ (8001b34 <HAL_TIM_MspPostInit+0xb4>)
 8001b0c:	f000 f986 	bl	8001e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b10:	2310      	movs	r3, #16
 8001b12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b1a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	a903      	add	r1, sp, #12
 8001b1e:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <HAL_TIM_MspPostInit+0xb0>)
 8001b20:	f000 f97c 	bl	8001e1c <HAL_GPIO_Init>
}
 8001b24:	e7bb      	b.n	8001a9e <HAL_TIM_MspPostInit+0x1e>
 8001b26:	bf00      	nop
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800

08001b38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b500      	push	{lr}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9303      	str	r3, [sp, #12]
 8001b40:	9304      	str	r3, [sp, #16]
 8001b42:	9305      	str	r3, [sp, #20]
 8001b44:	9306      	str	r3, [sp, #24]
 8001b46:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001b48:	6802      	ldr	r2, [r0, #0]
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_UART_MspInit+0x68>)
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d002      	beq.n	8001b56 <HAL_UART_MspInit+0x1e>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b50:	b009      	add	sp, #36	@ 0x24
 8001b52:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b56:	2100      	movs	r1, #0
 8001b58:	9101      	str	r1, [sp, #4]
 8001b5a:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8001b5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b60:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001b64:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b68:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001b6c:	9201      	str	r2, [sp, #4]
 8001b6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	9102      	str	r1, [sp, #8]
 8001b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b84:	230c      	movs	r3, #12
 8001b86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b90:	2307      	movs	r3, #7
 8001b92:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	a903      	add	r1, sp, #12
 8001b96:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <HAL_UART_MspInit+0x6c>)
 8001b98:	f000 f940 	bl	8001e1c <HAL_GPIO_Init>
}
 8001b9c:	e7d8      	b.n	8001b50 <HAL_UART_MspInit+0x18>
 8001b9e:	bf00      	nop
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler>

08001baa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <HardFault_Handler>

08001bac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler>

08001bae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler>

08001bb0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <UsageFault_Handler>

08001bb2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb2:	4770      	bx	lr

08001bb4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	4770      	bx	lr

08001bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bba:	f000 f89f 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbe:	bd08      	pop	{r3, pc}

08001bc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001bc2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bc6:	f000 fad1 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bca:	bd08      	pop	{r3, pc}

08001bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bcc:	b508      	push	{r3, lr}
 8001bce:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c04 <_sbrk+0x38>)
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	b152      	cbz	r2, 8001bec <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <_sbrk+0x38>)
 8001bd8:	6810      	ldr	r0, [r2, #0]
 8001bda:	4403      	add	r3, r0
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <_sbrk+0x3c>)
 8001bde:	490b      	ldr	r1, [pc, #44]	@ (8001c0c <_sbrk+0x40>)
 8001be0:	1a52      	subs	r2, r2, r1
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d806      	bhi.n	8001bf4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001be6:	4a07      	ldr	r2, [pc, #28]	@ (8001c04 <_sbrk+0x38>)
 8001be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001bea:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001bec:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <_sbrk+0x38>)
 8001bee:	4908      	ldr	r1, [pc, #32]	@ (8001c10 <_sbrk+0x44>)
 8001bf0:	6011      	str	r1, [r2, #0]
 8001bf2:	e7f0      	b.n	8001bd6 <_sbrk+0xa>
    errno = ENOMEM;
 8001bf4:	f002 f8aa 	bl	8003d4c <__errno>
 8001bf8:	230c      	movs	r3, #12
 8001bfa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	e7f3      	b.n	8001bea <_sbrk+0x1e>
 8001c02:	bf00      	nop
 8001c04:	20000354 	.word	0x20000354
 8001c08:	20020000 	.word	0x20020000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	200004a8 	.word	0x200004a8

08001c14 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c14:	4a03      	ldr	r2, [pc, #12]	@ (8001c24 <SystemInit+0x10>)
 8001c16:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001c1a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c1e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c2c:	f7ff fff2 	bl	8001c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c32:	490d      	ldr	r1, [pc, #52]	@ (8001c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c34:	4a0d      	ldr	r2, [pc, #52]	@ (8001c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c48:	4c0a      	ldr	r4, [pc, #40]	@ (8001c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c56:	f002 f87f 	bl	8003d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5a:	f7ff fb35 	bl	80012c8 <main>
  bx  lr    
 8001c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c6c:	080048e4 	.word	0x080048e4
  ldr r2, =_sbss
 8001c70:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c74:	200004a4 	.word	0x200004a4

08001c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC_IRQHandler>
	...

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <HAL_InitTick+0x40>)
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc0 <HAL_InitTick+0x44>)
 8001c8e:	6810      	ldr	r0, [r2, #0]
 8001c90:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c94:	f000 f8ae 	bl	8001df4 <HAL_SYSTICK_Config>
 8001c98:	b968      	cbnz	r0, 8001cb6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9a:	2c0f      	cmp	r4, #15
 8001c9c:	d901      	bls.n	8001ca2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	e00a      	b.n	8001cb8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8001caa:	f000 f85f 	bl	8001d6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_InitTick+0x48>)
 8001cb0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001cb6:	2001      	movs	r0, #1
}
 8001cb8:	bd10      	pop	{r4, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000004 	.word	0x20000004
 8001cc4:	2000000c 	.word	0x2000000c

08001cc8 <HAL_Init>:
{
 8001cc8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cca:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_Init+0x30>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cd2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cda:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ce2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f000 f82f 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff ffc6 	bl	8001c7c <HAL_InitTick>
  HAL_MspInit();
 8001cf0:	f7ff fe28 	bl	8001944 <HAL_MspInit>
}
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	bd08      	pop	{r3, pc}
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001cfc:	4a03      	ldr	r2, [pc, #12]	@ (8001d0c <HAL_IncTick+0x10>)
 8001cfe:	6811      	ldr	r1, [r2, #0]
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_IncTick+0x14>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	440b      	add	r3, r1
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000358 	.word	0x20000358
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d14:	4b01      	ldr	r3, [pc, #4]	@ (8001d1c <HAL_GetTick+0x8>)
 8001d16:	6818      	ldr	r0, [r3, #0]
}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000358 	.word	0x20000358

08001d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d20:	b538      	push	{r3, r4, r5, lr}
 8001d22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff fff6 	bl	8001d14 <HAL_GetTick>
 8001d28:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001d2e:	d002      	beq.n	8001d36 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <HAL_Delay+0x24>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d36:	f7ff ffed 	bl	8001d14 <HAL_GetTick>
 8001d3a:	1b40      	subs	r0, r0, r5
 8001d3c:	42a0      	cmp	r0, r4
 8001d3e:	d3fa      	bcc.n	8001d36 <HAL_Delay+0x16>
  {
  }
}
 8001d40:	bd38      	pop	{r3, r4, r5, pc}
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008

08001d48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4907      	ldr	r1, [pc, #28]	@ (8001d68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d4a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	0203      	lsls	r3, r0, #8
 8001d4e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d56:	0412      	lsls	r2, r2, #16
 8001d58:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001d64:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_NVIC_SetPriority+0x64>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d76:	f1c3 0c07 	rsb	ip, r3, #7
 8001d7a:	f1bc 0f04 	cmp.w	ip, #4
 8001d7e:	bf28      	it	cs
 8001d80:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d84:	f103 0e04 	add.w	lr, r3, #4
 8001d88:	f1be 0f06 	cmp.w	lr, #6
 8001d8c:	bf8c      	ite	hi
 8001d8e:	3b03      	subhi	r3, #3
 8001d90:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d92:	f04f 3eff 	mov.w	lr, #4294967295
 8001d96:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001d9a:	ea21 010c 	bic.w	r1, r1, ip
 8001d9e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	fa0e fe03 	lsl.w	lr, lr, r3
 8001da4:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001daa:	2800      	cmp	r0, #0
 8001dac:	db09      	blt.n	8001dc2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	0109      	lsls	r1, r1, #4
 8001db0:	b2c9      	uxtb	r1, r1
 8001db2:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001db6:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001dba:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001dbe:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	f000 000f 	and.w	r0, r0, #15
 8001dc6:	0109      	lsls	r1, r1, #4
 8001dc8:	b2c9      	uxtb	r1, r1
 8001dca:	4b02      	ldr	r3, [pc, #8]	@ (8001dd4 <HAL_NVIC_SetPriority+0x68>)
 8001dcc:	5419      	strb	r1, [r3, r0]
 8001dce:	e7f6      	b.n	8001dbe <HAL_NVIC_SetPriority+0x52>
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	e000ed14 	.word	0xe000ed14

08001dd8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	db07      	blt.n	8001dec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ddc:	0941      	lsrs	r1, r0, #5
 8001dde:	f000 001f 	and.w	r0, r0, #31
 8001de2:	2301      	movs	r3, #1
 8001de4:	4083      	lsls	r3, r0
 8001de6:	4a02      	ldr	r2, [pc, #8]	@ (8001df0 <HAL_NVIC_EnableIRQ+0x18>)
 8001de8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100

08001df4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	3801      	subs	r0, #1
 8001df6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001dfa:	d20b      	bcs.n	8001e14 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001e00:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <HAL_SYSTICK_Config+0x24>)
 8001e04:	21f0      	movs	r1, #240	@ 0xf0
 8001e06:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	2207      	movs	r2, #7
 8001e10:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e12:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e14:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e20:	b083      	sub	sp, #12
 8001e22:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e24:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e26:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2a:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e2c:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e30:	4c72      	ldr	r4, [pc, #456]	@ (8001ffc <HAL_GPIO_Init+0x1e0>)
 8001e32:	e04b      	b.n	8001ecc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001e34:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e36:	fa05 fa02 	lsl.w	sl, r5, r2
 8001e3a:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3e:	68cf      	ldr	r7, [r1, #12]
 8001e40:	4097      	lsls	r7, r2
 8001e42:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001e46:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e48:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e4a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4e:	684f      	ldr	r7, [r1, #4]
 8001e50:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001e54:	409f      	lsls	r7, r3
 8001e56:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001e5a:	6047      	str	r7, [r0, #4]
 8001e5c:	e044      	b.n	8001ee8 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5e:	f04f 0c00 	mov.w	ip, #0
 8001e62:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001e66:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e6a:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8001e6e:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e74:	684e      	ldr	r6, [r1, #4]
 8001e76:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	bf0c      	ite	eq
 8001e7c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001e80:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8001e84:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001e86:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e88:	684e      	ldr	r6, [r1, #4]
 8001e8a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001e8e:	bf0c      	ite	eq
 8001e90:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001e94:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8001e98:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001e9a:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9c:	684e      	ldr	r6, [r1, #4]
 8001e9e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	bf0c      	ite	eq
 8001ea4:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001ea8:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8001eac:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eae:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb0:	684e      	ldr	r6, [r1, #4]
 8001eb2:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	bf0c      	ite	eq
 8001eb8:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001ebc:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8001ec0:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	3202      	adds	r2, #2
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	f000 8094 	beq.w	8001ff4 <HAL_GPIO_Init+0x1d8>
    ioposition = 0x01U << position;
 8001ecc:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed0:	680f      	ldr	r7, [r1, #0]
 8001ed2:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8001ed6:	ea3c 0707 	bics.w	r7, ip, r7
 8001eda:	d1f2      	bne.n	8001ec2 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001edc:	684f      	ldr	r7, [r1, #4]
 8001ede:	f007 0703 	and.w	r7, r7, #3
 8001ee2:	3f01      	subs	r7, #1
 8001ee4:	2f01      	cmp	r7, #1
 8001ee6:	d9a5      	bls.n	8001e34 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee8:	684f      	ldr	r7, [r1, #4]
 8001eea:	f007 0703 	and.w	r7, r7, #3
 8001eee:	2f03      	cmp	r7, #3
 8001ef0:	d023      	beq.n	8001f3a <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 8001ef2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef4:	fa05 fc02 	lsl.w	ip, r5, r2
 8001ef8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efc:	688f      	ldr	r7, [r1, #8]
 8001efe:	4097      	lsls	r7, r2
 8001f00:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8001f04:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	684f      	ldr	r7, [r1, #4]
 8001f08:	f007 0703 	and.w	r7, r7, #3
 8001f0c:	2f02      	cmp	r7, #2
 8001f0e:	d114      	bne.n	8001f3a <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8001f10:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001f14:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001f18:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1c:	f003 0b07 	and.w	fp, r3, #7
 8001f20:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001f24:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001f28:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f2c:	690f      	ldr	r7, [r1, #16]
 8001f2e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001f32:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001f36:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8001f3a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3c:	fa05 fc02 	lsl.w	ip, r5, r2
 8001f40:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f44:	684f      	ldr	r7, [r1, #4]
 8001f46:	f007 0703 	and.w	r7, r7, #3
 8001f4a:	4097      	lsls	r7, r2
 8001f4c:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8001f50:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f52:	684f      	ldr	r7, [r1, #4]
 8001f54:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8001f58:	d0b3      	beq.n	8001ec2 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2700      	movs	r7, #0
 8001f5c:	9701      	str	r7, [sp, #4]
 8001f5e:	4e28      	ldr	r6, [pc, #160]	@ (8002000 <HAL_GPIO_Init+0x1e4>)
 8001f60:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8001f62:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8001f66:	6477      	str	r7, [r6, #68]	@ 0x44
 8001f68:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8001f6a:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 8001f6e:	9701      	str	r7, [sp, #4]
 8001f70:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f72:	f023 0703 	bic.w	r7, r3, #3
 8001f76:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001f7a:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001f7e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f82:	f003 0b03 	and.w	fp, r3, #3
 8001f86:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001f8a:	fa08 fc0b 	lsl.w	ip, r8, fp
 8001f8e:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f92:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 8001f96:	42b0      	cmp	r0, r6
 8001f98:	f43f af61 	beq.w	8001e5e <HAL_GPIO_Init+0x42>
 8001f9c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001fa0:	42b0      	cmp	r0, r6
 8001fa2:	d018      	beq.n	8001fd6 <HAL_GPIO_Init+0x1ba>
 8001fa4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001fa8:	42b0      	cmp	r0, r6
 8001faa:	d017      	beq.n	8001fdc <HAL_GPIO_Init+0x1c0>
 8001fac:	f8df c054 	ldr.w	ip, [pc, #84]	@ 8002004 <HAL_GPIO_Init+0x1e8>
 8001fb0:	4560      	cmp	r0, ip
 8001fb2:	d016      	beq.n	8001fe2 <HAL_GPIO_Init+0x1c6>
 8001fb4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001fb8:	4560      	cmp	r0, ip
 8001fba:	d015      	beq.n	8001fe8 <HAL_GPIO_Init+0x1cc>
 8001fbc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001fc0:	4560      	cmp	r0, ip
 8001fc2:	d014      	beq.n	8001fee <HAL_GPIO_Init+0x1d2>
 8001fc4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001fc8:	4560      	cmp	r0, ip
 8001fca:	bf14      	ite	ne
 8001fcc:	f04f 0c07 	movne.w	ip, #7
 8001fd0:	f04f 0c06 	moveq.w	ip, #6
 8001fd4:	e745      	b.n	8001e62 <HAL_GPIO_Init+0x46>
 8001fd6:	f04f 0c01 	mov.w	ip, #1
 8001fda:	e742      	b.n	8001e62 <HAL_GPIO_Init+0x46>
 8001fdc:	f04f 0c02 	mov.w	ip, #2
 8001fe0:	e73f      	b.n	8001e62 <HAL_GPIO_Init+0x46>
 8001fe2:	f04f 0c03 	mov.w	ip, #3
 8001fe6:	e73c      	b.n	8001e62 <HAL_GPIO_Init+0x46>
 8001fe8:	f04f 0c04 	mov.w	ip, #4
 8001fec:	e739      	b.n	8001e62 <HAL_GPIO_Init+0x46>
 8001fee:	f04f 0c05 	mov.w	ip, #5
 8001ff2:	e736      	b.n	8001e62 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001ff4:	b003      	add	sp, #12
 8001ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40013c00 	.word	0x40013c00
 8002000:	40023800 	.word	0x40023800
 8002004:	40020c00 	.word	0x40020c00

08002008 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800200c:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002010:	2701      	movs	r7, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002012:	f04f 0a0f 	mov.w	sl, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800201a:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 8002144 <HAL_GPIO_DeInit+0x13c>
 800201e:	e029      	b.n	8002074 <HAL_GPIO_DeInit+0x6c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002020:	f04f 0900 	mov.w	r9, #0
 8002024:	9d01      	ldr	r5, [sp, #4]
 8002026:	fa09 f505 	lsl.w	r5, r9, r5
 800202a:	4565      	cmp	r5, ip
 800202c:	d067      	beq.n	80020fe <HAL_GPIO_DeInit+0xf6>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202e:	6805      	ldr	r5, [r0, #0]
 8002030:	005c      	lsls	r4, r3, #1
 8002032:	fa0b f404 	lsl.w	r4, fp, r4
 8002036:	ea25 0504 	bic.w	r5, r5, r4
 800203a:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203c:	08de      	lsrs	r6, r3, #3
 800203e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8002042:	f8d6 c020 	ldr.w	ip, [r6, #32]
 8002046:	f003 0507 	and.w	r5, r3, #7
 800204a:	00ad      	lsls	r5, r5, #2
 800204c:	fa0a f505 	lsl.w	r5, sl, r5
 8002050:	ea2c 0505 	bic.w	r5, ip, r5
 8002054:	6235      	str	r5, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	68c5      	ldr	r5, [r0, #12]
 8002058:	ea25 0504 	bic.w	r5, r5, r4
 800205c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205e:	6845      	ldr	r5, [r0, #4]
 8002060:	ea25 0202 	bic.w	r2, r5, r2
 8002064:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002066:	6882      	ldr	r2, [r0, #8]
 8002068:	ea22 0204 	bic.w	r2, r2, r4
 800206c:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206e:	3301      	adds	r3, #1
 8002070:	2b10      	cmp	r3, #16
 8002072:	d061      	beq.n	8002138 <HAL_GPIO_DeInit+0x130>
    ioposition = 0x01U << position;
 8002074:	fa07 f203 	lsl.w	r2, r7, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8002078:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 800207c:	ea32 0401 	bics.w	r4, r2, r1
 8002080:	d1f5      	bne.n	800206e <HAL_GPIO_DeInit+0x66>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002082:	f023 0403 	bic.w	r4, r3, #3
 8002086:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800208a:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
 800208e:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002092:	f003 0503 	and.w	r5, r3, #3
 8002096:	00ad      	lsls	r5, r5, #2
 8002098:	9501      	str	r5, [sp, #4]
 800209a:	fa0a fe05 	lsl.w	lr, sl, r5
 800209e:	ea0e 0c0c 	and.w	ip, lr, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80020a2:	4d27      	ldr	r5, [pc, #156]	@ (8002140 <HAL_GPIO_DeInit+0x138>)
 80020a4:	42a8      	cmp	r0, r5
 80020a6:	d0bb      	beq.n	8002020 <HAL_GPIO_DeInit+0x18>
 80020a8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80020ac:	42a8      	cmp	r0, r5
 80020ae:	d018      	beq.n	80020e2 <HAL_GPIO_DeInit+0xda>
 80020b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80020b4:	42a8      	cmp	r0, r5
 80020b6:	d016      	beq.n	80020e6 <HAL_GPIO_DeInit+0xde>
 80020b8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80020bc:	42a8      	cmp	r0, r5
 80020be:	d015      	beq.n	80020ec <HAL_GPIO_DeInit+0xe4>
 80020c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80020c4:	42a8      	cmp	r0, r5
 80020c6:	d014      	beq.n	80020f2 <HAL_GPIO_DeInit+0xea>
 80020c8:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8002148 <HAL_GPIO_DeInit+0x140>
 80020cc:	4548      	cmp	r0, r9
 80020ce:	d013      	beq.n	80020f8 <HAL_GPIO_DeInit+0xf0>
 80020d0:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 80020d4:	4548      	cmp	r0, r9
 80020d6:	bf14      	ite	ne
 80020d8:	f04f 0907 	movne.w	r9, #7
 80020dc:	f04f 0906 	moveq.w	r9, #6
 80020e0:	e7a0      	b.n	8002024 <HAL_GPIO_DeInit+0x1c>
 80020e2:	46b9      	mov	r9, r7
 80020e4:	e79e      	b.n	8002024 <HAL_GPIO_DeInit+0x1c>
 80020e6:	f04f 0902 	mov.w	r9, #2
 80020ea:	e79b      	b.n	8002024 <HAL_GPIO_DeInit+0x1c>
 80020ec:	f04f 0903 	mov.w	r9, #3
 80020f0:	e798      	b.n	8002024 <HAL_GPIO_DeInit+0x1c>
 80020f2:	f04f 0904 	mov.w	r9, #4
 80020f6:	e795      	b.n	8002024 <HAL_GPIO_DeInit+0x1c>
 80020f8:	f04f 0905 	mov.w	r9, #5
 80020fc:	e792      	b.n	8002024 <HAL_GPIO_DeInit+0x1c>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020fe:	f8d8 5000 	ldr.w	r5, [r8]
 8002102:	ea25 0506 	bic.w	r5, r5, r6
 8002106:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800210a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800210e:	ea25 0506 	bic.w	r5, r5, r6
 8002112:	f8c8 5004 	str.w	r5, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002116:	f8d8 500c 	ldr.w	r5, [r8, #12]
 800211a:	ea25 0506 	bic.w	r5, r5, r6
 800211e:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002122:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8002126:	ea25 0506 	bic.w	r5, r5, r6
 800212a:	f8c8 5008 	str.w	r5, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800212e:	68a5      	ldr	r5, [r4, #8]
 8002130:	ea25 050e 	bic.w	r5, r5, lr
 8002134:	60a5      	str	r5, [r4, #8]
 8002136:	e77a      	b.n	800202e <HAL_GPIO_DeInit+0x26>
    }
  }
}
 8002138:	b003      	add	sp, #12
 800213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800213e:	bf00      	nop
 8002140:	40020000 	.word	0x40020000
 8002144:	40013c00 	.word	0x40013c00
 8002148:	40021400 	.word	0x40021400

0800214c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800214c:	b10a      	cbz	r2, 8002152 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214e:	6181      	str	r1, [r0, #24]
 8002150:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002152:	0409      	lsls	r1, r1, #16
 8002154:	6181      	str	r1, [r0, #24]
  }
}
 8002156:	4770      	bx	lr

08002158 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002158:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800215a:	ea01 0203 	and.w	r2, r1, r3
 800215e:	ea21 0103 	bic.w	r1, r1, r3
 8002162:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002166:	6181      	str	r1, [r0, #24]
}
 8002168:	4770      	bx	lr
	...

0800216c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800216c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800216e:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	4203      	tst	r3, r0
 8002174:	d100      	bne.n	8002178 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002176:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002178:	4b02      	ldr	r3, [pc, #8]	@ (8002184 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800217a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800217c:	f7fe ffc8 	bl	8001110 <HAL_GPIO_EXTI_Callback>
}
 8002180:	e7f9      	b.n	8002176 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002182:	bf00      	nop
 8002184:	40013c00 	.word	0x40013c00

08002188 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002188:	6803      	ldr	r3, [r0, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002190:	d101      	bne.n	8002196 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8002192:	2000      	movs	r0, #0
}
 8002194:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002196:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800219a:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800219c:	2300      	movs	r3, #0
 800219e:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021a0:	2220      	movs	r2, #32
 80021a2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021aa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80021ac:	f042 0204 	orr.w	r2, r2, #4
 80021b0:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80021b2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80021b6:	2001      	movs	r0, #1
 80021b8:	4770      	bx	lr

080021ba <I2C_WaitOnFlagUntilTimeout>:
{
 80021ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021be:	4605      	mov	r5, r0
 80021c0:	460c      	mov	r4, r1
 80021c2:	4616      	mov	r6, r2
 80021c4:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c6:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80021ca:	f1b8 0f01 	cmp.w	r8, #1
 80021ce:	682b      	ldr	r3, [r5, #0]
 80021d0:	bf0c      	ite	eq
 80021d2:	695b      	ldreq	r3, [r3, #20]
 80021d4:	699b      	ldrne	r3, [r3, #24]
 80021d6:	ea24 0c03 	bic.w	ip, r4, r3
 80021da:	fa1f fc8c 	uxth.w	ip, ip
 80021de:	fabc fc8c 	clz	ip, ip
 80021e2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80021e6:	4566      	cmp	r6, ip
 80021e8:	d127      	bne.n	800223a <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	f1b7 3fff 	cmp.w	r7, #4294967295
 80021ee:	d0ec      	beq.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f0:	f7ff fd90 	bl	8001d14 <HAL_GetTick>
 80021f4:	9b06      	ldr	r3, [sp, #24]
 80021f6:	1ac0      	subs	r0, r0, r3
 80021f8:	42b8      	cmp	r0, r7
 80021fa:	d801      	bhi.n	8002200 <I2C_WaitOnFlagUntilTimeout+0x46>
 80021fc:	2f00      	cmp	r7, #0
 80021fe:	d1e4      	bne.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002200:	f1b8 0f01 	cmp.w	r8, #1
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	bf0c      	ite	eq
 8002208:	695b      	ldreq	r3, [r3, #20]
 800220a:	699b      	ldrne	r3, [r3, #24]
 800220c:	ea24 0303 	bic.w	r3, r4, r3
 8002210:	b29b      	uxth	r3, r3
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	429e      	cmp	r6, r3
 800221a:	d1d6      	bne.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800221c:	2300      	movs	r3, #0
 800221e:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002220:	2220      	movs	r2, #32
 8002222:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002226:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800222a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800222c:	f042 0220 	orr.w	r2, r2, #32
 8002230:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002232:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8002236:	2001      	movs	r0, #1
 8002238:	e000      	b.n	800223c <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 800223a:	2000      	movs	r0, #0
}
 800223c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002240 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002244:	4605      	mov	r5, r0
 8002246:	460e      	mov	r6, r1
 8002248:	4617      	mov	r7, r2
 800224a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800224c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002250:	f1b8 0f01 	cmp.w	r8, #1
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	bf0c      	ite	eq
 8002258:	695c      	ldreq	r4, [r3, #20]
 800225a:	699c      	ldrne	r4, [r3, #24]
 800225c:	ea26 0404 	bic.w	r4, r6, r4
 8002260:	b2a4      	uxth	r4, r4
 8002262:	3c00      	subs	r4, #0
 8002264:	bf18      	it	ne
 8002266:	2401      	movne	r4, #1
 8002268:	2c00      	cmp	r4, #0
 800226a:	d044      	beq.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002274:	d127      	bne.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8002276:	f1b7 3fff 	cmp.w	r7, #4294967295
 800227a:	d0e9      	beq.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227c:	f7ff fd4a 	bl	8001d14 <HAL_GetTick>
 8002280:	eba0 0009 	sub.w	r0, r0, r9
 8002284:	42b8      	cmp	r0, r7
 8002286:	d801      	bhi.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8002288:	2f00      	cmp	r7, #0
 800228a:	d1e1      	bne.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800228c:	f1b8 0f01 	cmp.w	r8, #1
 8002290:	682b      	ldr	r3, [r5, #0]
 8002292:	bf0c      	ite	eq
 8002294:	695b      	ldreq	r3, [r3, #20]
 8002296:	699b      	ldrne	r3, [r3, #24]
 8002298:	ea26 0303 	bic.w	r3, r6, r3
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b00      	subs	r3, #0
 80022a0:	bf18      	it	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0d3      	beq.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022ac:	2220      	movs	r2, #32
 80022ae:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b2:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b6:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80022b8:	f042 0220 	orr.w	r2, r2, #32
 80022bc:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80022be:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
 80022c4:	e015      	b.n	80022f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022cc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022d4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022da:	2220      	movs	r2, #32
 80022dc:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e0:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e4:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80022e6:	f042 0204 	orr.w	r2, r2, #4
 80022ea:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80022ec:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80022f0:	2001      	movs	r0, #1
}
 80022f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80022f6:	2000      	movs	r0, #0
 80022f8:	e7fb      	b.n	80022f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

080022fa <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80022fa:	b570      	push	{r4, r5, r6, lr}
 80022fc:	4604      	mov	r4, r0
 80022fe:	460d      	mov	r5, r1
 8002300:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800230a:	d121      	bne.n	8002350 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff ff3b 	bl	8002188 <I2C_IsAcknowledgeFailed>
 8002312:	b9f8      	cbnz	r0, 8002354 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002314:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002318:	d0f3      	beq.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231a:	f7ff fcfb 	bl	8001d14 <HAL_GetTick>
 800231e:	1b80      	subs	r0, r0, r6
 8002320:	42a8      	cmp	r0, r5
 8002322:	d801      	bhi.n	8002328 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002324:	2d00      	cmp	r5, #0
 8002326:	d1ec      	bne.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002330:	d1e7      	bne.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002332:	2300      	movs	r3, #0
 8002334:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002336:	2220      	movs	r2, #32
 8002338:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002348:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800234c:	2001      	movs	r0, #1
 800234e:	e000      	b.n	8002352 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8002350:	2000      	movs	r0, #0
}
 8002352:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002354:	2001      	movs	r0, #1
 8002356:	e7fc      	b.n	8002352 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08002358 <I2C_RequestMemoryWrite>:
{
 8002358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800235c:	b085      	sub	sp, #20
 800235e:	4604      	mov	r4, r0
 8002360:	460d      	mov	r5, r1
 8002362:	4691      	mov	r9, r2
 8002364:	461f      	mov	r7, r3
 8002366:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800236a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236c:	6803      	ldr	r3, [r0, #0]
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002374:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002376:	9600      	str	r6, [sp, #0]
 8002378:	4643      	mov	r3, r8
 800237a:	2200      	movs	r2, #0
 800237c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002380:	f7ff ff1b 	bl	80021ba <I2C_WaitOnFlagUntilTimeout>
 8002384:	b970      	cbnz	r0, 80023a4 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 800238c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800238e:	4633      	mov	r3, r6
 8002390:	4642      	mov	r2, r8
 8002392:	4928      	ldr	r1, [pc, #160]	@ (8002434 <I2C_RequestMemoryWrite+0xdc>)
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff ff53 	bl	8002240 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800239a:	b168      	cbz	r0, 80023b8 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 800239c:	2001      	movs	r0, #1
}
 800239e:	b005      	add	sp, #20
 80023a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80023ac:	d040      	beq.n	8002430 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023b2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80023b4:	2003      	movs	r0, #3
 80023b6:	e7f2      	b.n	800239e <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b8:	2300      	movs	r3, #0
 80023ba:	9303      	str	r3, [sp, #12]
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	9203      	str	r2, [sp, #12]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	9303      	str	r3, [sp, #12]
 80023c6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c8:	4632      	mov	r2, r6
 80023ca:	4641      	mov	r1, r8
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7ff ff94 	bl	80022fa <I2C_WaitOnTXEFlagUntilTimeout>
 80023d2:	b930      	cbnz	r0, 80023e2 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023d4:	2f01      	cmp	r7, #1
 80023d6:	d110      	bne.n	80023fa <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	fa5f f689 	uxtb.w	r6, r9
 80023de:	611e      	str	r6, [r3, #16]
 80023e0:	e7dd      	b.n	800239e <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d001      	beq.n	80023ec <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
 80023ea:	e7d8      	b.n	800239e <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ec:	6822      	ldr	r2, [r4, #0]
 80023ee:	6813      	ldr	r3, [r2, #0]
 80023f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023f4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80023f6:	2001      	movs	r0, #1
 80023f8:	e7d1      	b.n	800239e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8002400:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002402:	4632      	mov	r2, r6
 8002404:	4641      	mov	r1, r8
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff ff77 	bl	80022fa <I2C_WaitOnTXEFlagUntilTimeout>
 800240c:	b920      	cbnz	r0, 8002418 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	fa5f f689 	uxtb.w	r6, r9
 8002414:	611e      	str	r6, [r3, #16]
 8002416:	e7c2      	b.n	800239e <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002418:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800241a:	2b04      	cmp	r3, #4
 800241c:	d001      	beq.n	8002422 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 800241e:	2001      	movs	r0, #1
 8002420:	e7bd      	b.n	800239e <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	6813      	ldr	r3, [r2, #0]
 8002426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800242a:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800242c:	2001      	movs	r0, #1
 800242e:	e7b6      	b.n	800239e <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8002430:	2003      	movs	r0, #3
 8002432:	e7b4      	b.n	800239e <I2C_RequestMemoryWrite+0x46>
 8002434:	00010002 	.word	0x00010002

08002438 <I2C_RequestMemoryRead>:
{
 8002438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	4616      	mov	r6, r2
 8002444:	4699      	mov	r9, r3
 8002446:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8002448:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244c:	6802      	ldr	r2, [r0, #0]
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002454:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002456:	6803      	ldr	r3, [r0, #0]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800245e:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002460:	f8cd 8000 	str.w	r8, [sp]
 8002464:	463b      	mov	r3, r7
 8002466:	2200      	movs	r2, #0
 8002468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800246c:	f7ff fea5 	bl	80021ba <I2C_WaitOnFlagUntilTimeout>
 8002470:	b980      	cbnz	r0, 8002494 <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002472:	fa5f fa85 	uxtb.w	sl, r5
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 800247c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800247e:	4643      	mov	r3, r8
 8002480:	463a      	mov	r2, r7
 8002482:	4945      	ldr	r1, [pc, #276]	@ (8002598 <I2C_RequestMemoryRead+0x160>)
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff fedb 	bl	8002240 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800248a:	b168      	cbz	r0, 80024a8 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 800248c:	2001      	movs	r0, #1
}
 800248e:	b004      	add	sp, #16
 8002490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800249c:	d077      	beq.n	800258e <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800249e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024a2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80024a4:	2003      	movs	r0, #3
 80024a6:	e7f2      	b.n	800248e <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a8:	2300      	movs	r3, #0
 80024aa:	9303      	str	r3, [sp, #12]
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	9203      	str	r2, [sp, #12]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	9303      	str	r3, [sp, #12]
 80024b6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b8:	4642      	mov	r2, r8
 80024ba:	4639      	mov	r1, r7
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff ff1c 	bl	80022fa <I2C_WaitOnTXEFlagUntilTimeout>
 80024c2:	b988      	cbnz	r0, 80024e8 <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024c4:	f1b9 0f01 	cmp.w	r9, #1
 80024c8:	d11a      	bne.n	8002500 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	b2f6      	uxtb	r6, r6
 80024ce:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d0:	4642      	mov	r2, r8
 80024d2:	4639      	mov	r1, r7
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff ff10 	bl	80022fa <I2C_WaitOnTXEFlagUntilTimeout>
 80024da:	2800      	cmp	r0, #0
 80024dc:	d030      	beq.n	8002540 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d026      	beq.n	8002532 <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
 80024e6:	e7d2      	b.n	800248e <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d001      	beq.n	80024f2 <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 80024ee:	2001      	movs	r0, #1
 80024f0:	e7cd      	b.n	800248e <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f2:	6822      	ldr	r2, [r4, #0]
 80024f4:	6813      	ldr	r3, [r2, #0]
 80024f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024fa:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80024fc:	2001      	movs	r0, #1
 80024fe:	e7c6      	b.n	800248e <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	0a32      	lsrs	r2, r6, #8
 8002504:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002506:	4642      	mov	r2, r8
 8002508:	4639      	mov	r1, r7
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff fef5 	bl	80022fa <I2C_WaitOnTXEFlagUntilTimeout>
 8002510:	b918      	cbnz	r0, 800251a <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	b2f6      	uxtb	r6, r6
 8002516:	611e      	str	r6, [r3, #16]
 8002518:	e7da      	b.n	80024d0 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800251c:	2b04      	cmp	r3, #4
 800251e:	d001      	beq.n	8002524 <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 8002520:	2001      	movs	r0, #1
 8002522:	e7b4      	b.n	800248e <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	6822      	ldr	r2, [r4, #0]
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800252c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800252e:	2001      	movs	r0, #1
 8002530:	e7ad      	b.n	800248e <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800253a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
 800253e:	e7a6      	b.n	800248e <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002540:	6822      	ldr	r2, [r4, #0]
 8002542:	6813      	ldr	r3, [r2, #0]
 8002544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002548:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800254a:	f8cd 8000 	str.w	r8, [sp]
 800254e:	463b      	mov	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002556:	4620      	mov	r0, r4
 8002558:	f7ff fe2f 	bl	80021ba <I2C_WaitOnFlagUntilTimeout>
 800255c:	b968      	cbnz	r0, 800257a <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800255e:	6822      	ldr	r2, [r4, #0]
 8002560:	f04a 0301 	orr.w	r3, sl, #1
 8002564:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002566:	4643      	mov	r3, r8
 8002568:	463a      	mov	r2, r7
 800256a:	490b      	ldr	r1, [pc, #44]	@ (8002598 <I2C_RequestMemoryRead+0x160>)
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff fe67 	bl	8002240 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002572:	3800      	subs	r0, #0
 8002574:	bf18      	it	ne
 8002576:	2001      	movne	r0, #1
 8002578:	e789      	b.n	800248e <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002582:	d006      	beq.n	8002592 <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002588:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800258a:	2003      	movs	r0, #3
 800258c:	e77f      	b.n	800248e <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 800258e:	2003      	movs	r0, #3
 8002590:	e77d      	b.n	800248e <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8002592:	2003      	movs	r0, #3
 8002594:	e77b      	b.n	800248e <I2C_RequestMemoryRead+0x56>
 8002596:	bf00      	nop
 8002598:	00010002 	.word	0x00010002

0800259c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f013 0f04 	tst.w	r3, #4
 80025ac:	d121      	bne.n	80025f2 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ae:	4620      	mov	r0, r4
 80025b0:	f7ff fdea 	bl	8002188 <I2C_IsAcknowledgeFailed>
 80025b4:	b9f8      	cbnz	r0, 80025f6 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80025ba:	d0f3      	beq.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025bc:	f7ff fbaa 	bl	8001d14 <HAL_GetTick>
 80025c0:	1b80      	subs	r0, r0, r6
 80025c2:	42a8      	cmp	r0, r5
 80025c4:	d801      	bhi.n	80025ca <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80025c6:	2d00      	cmp	r5, #0
 80025c8:	d1ec      	bne.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f013 0f04 	tst.w	r3, #4
 80025d2:	d1e7      	bne.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025d8:	2220      	movs	r2, #32
 80025da:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80025e4:	f042 0220 	orr.w	r2, r2, #32
 80025e8:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80025ea:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80025ee:	2001      	movs	r0, #1
 80025f0:	e000      	b.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80025f2:	2000      	movs	r0, #0
}
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80025f6:	2001      	movs	r0, #1
 80025f8:	e7fc      	b.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080025fa <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80025fa:	b570      	push	{r4, r5, r6, lr}
 80025fc:	4604      	mov	r4, r0
 80025fe:	460d      	mov	r5, r1
 8002600:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002602:	6803      	ldr	r3, [r0, #0]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800260a:	d01b      	beq.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  return HAL_OK;
 800260c:	2000      	movs	r0, #0
 800260e:	e00e      	b.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002610:	f06f 0210 	mvn.w	r2, #16
 8002614:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002616:	2300      	movs	r3, #0
 8002618:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	2220      	movs	r2, #32
 800261c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002620:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002624:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002626:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002628:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
}
 800262e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002638:	d010      	beq.n	800265c <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	6958      	ldr	r0, [r3, #20]
 800263e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8002642:	d11a      	bne.n	800267a <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002644:	6958      	ldr	r0, [r3, #20]
 8002646:	f010 0f10 	tst.w	r0, #16
 800264a:	d1e1      	bne.n	8002610 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264c:	f7ff fb62 	bl	8001d14 <HAL_GetTick>
 8002650:	1b80      	subs	r0, r0, r6
 8002652:	42a8      	cmp	r0, r5
 8002654:	d8ec      	bhi.n	8002630 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 8002656:	2d00      	cmp	r5, #0
 8002658:	d1ef      	bne.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 800265a:	e7e9      	b.n	8002630 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800265c:	2300      	movs	r3, #0
 800265e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002660:	2220      	movs	r2, #32
 8002662:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002666:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800266a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800266c:	f042 0220 	orr.w	r2, r2, #32
 8002670:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002672:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8002676:	2001      	movs	r0, #1
 8002678:	e7d9      	b.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
  return HAL_OK;
 800267a:	2000      	movs	r0, #0
 800267c:	e7d7      	b.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
	...

08002680 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002680:	2800      	cmp	r0, #0
 8002682:	f000 80b0 	beq.w	80027e6 <HAL_I2C_Init+0x166>
{
 8002686:	b570      	push	{r4, r5, r6, lr}
 8002688:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800268a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800268e:	2b00      	cmp	r3, #0
 8002690:	d073      	beq.n	800277a <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002692:	2324      	movs	r3, #36	@ 0x24
 8002694:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002698:	6822      	ldr	r2, [r4, #0]
 800269a:	6813      	ldr	r3, [r2, #0]
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026aa:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80026b4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b6:	f000 fbaf 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ba:	6862      	ldr	r2, [r4, #4]
 80026bc:	4b4c      	ldr	r3, [pc, #304]	@ (80027f0 <HAL_I2C_Init+0x170>)
 80026be:	429a      	cmp	r2, r3
 80026c0:	d860      	bhi.n	8002784 <HAL_I2C_Init+0x104>
 80026c2:	4b4c      	ldr	r3, [pc, #304]	@ (80027f4 <HAL_I2C_Init+0x174>)
 80026c4:	4298      	cmp	r0, r3
 80026c6:	f240 8090 	bls.w	80027ea <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 80026ca:	494b      	ldr	r1, [pc, #300]	@ (80027f8 <HAL_I2C_Init+0x178>)
 80026cc:	fba1 3100 	umull	r3, r1, r1, r0
 80026d0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026d2:	6825      	ldr	r5, [r4, #0]
 80026d4:	686a      	ldr	r2, [r5, #4]
 80026d6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80026da:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80026de:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026e0:	6821      	ldr	r1, [r4, #0]
 80026e2:	6a0a      	ldr	r2, [r1, #32]
 80026e4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80026e8:	4d41      	ldr	r5, [pc, #260]	@ (80027f0 <HAL_I2C_Init+0x170>)
 80026ea:	6866      	ldr	r6, [r4, #4]
 80026ec:	42ae      	cmp	r6, r5
 80026ee:	d84e      	bhi.n	800278e <HAL_I2C_Init+0x10e>
 80026f0:	3301      	adds	r3, #1
 80026f2:	4313      	orrs	r3, r2
 80026f4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026f6:	6821      	ldr	r1, [r4, #0]
 80026f8:	69ca      	ldr	r2, [r1, #28]
 80026fa:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80026fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002702:	6865      	ldr	r5, [r4, #4]
 8002704:	4b3a      	ldr	r3, [pc, #232]	@ (80027f0 <HAL_I2C_Init+0x170>)
 8002706:	429d      	cmp	r5, r3
 8002708:	d84b      	bhi.n	80027a2 <HAL_I2C_Init+0x122>
 800270a:	1e43      	subs	r3, r0, #1
 800270c:	006d      	lsls	r5, r5, #1
 800270e:	fbb3 f3f5 	udiv	r3, r3, r5
 8002712:	3301      	adds	r3, #1
 8002714:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002718:	4203      	tst	r3, r0
 800271a:	d05e      	beq.n	80027da <HAL_I2C_Init+0x15a>
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	431a      	orrs	r2, r3
 8002722:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002724:	6821      	ldr	r1, [r4, #0]
 8002726:	680a      	ldr	r2, [r1, #0]
 8002728:	69e3      	ldr	r3, [r4, #28]
 800272a:	6a20      	ldr	r0, [r4, #32]
 800272c:	4303      	orrs	r3, r0
 800272e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002736:	6821      	ldr	r1, [r4, #0]
 8002738:	688a      	ldr	r2, [r1, #8]
 800273a:	6923      	ldr	r3, [r4, #16]
 800273c:	68e0      	ldr	r0, [r4, #12]
 800273e:	4303      	orrs	r3, r0
 8002740:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8002744:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800274c:	6821      	ldr	r1, [r4, #0]
 800274e:	68ca      	ldr	r2, [r1, #12]
 8002750:	6963      	ldr	r3, [r4, #20]
 8002752:	69a0      	ldr	r0, [r4, #24]
 8002754:	4303      	orrs	r3, r0
 8002756:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800275e:	6822      	ldr	r2, [r4, #0]
 8002760:	6813      	ldr	r3, [r2, #0]
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002768:	2000      	movs	r0, #0
 800276a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800276c:	2320      	movs	r3, #32
 800276e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002772:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8002778:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800277a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800277e:	f7ff f901 	bl	8001984 <HAL_I2C_MspInit>
 8002782:	e786      	b.n	8002692 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002784:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_I2C_Init+0x17c>)
 8002786:	4298      	cmp	r0, r3
 8002788:	d89f      	bhi.n	80026ca <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	e7f4      	b.n	8002778 <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800278e:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002792:	fb05 f303 	mul.w	r3, r5, r3
 8002796:	4d1a      	ldr	r5, [pc, #104]	@ (8002800 <HAL_I2C_Init+0x180>)
 8002798:	fba5 5303 	umull	r5, r3, r5, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	3301      	adds	r3, #1
 80027a0:	e7a7      	b.n	80026f2 <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a2:	68a3      	ldr	r3, [r4, #8]
 80027a4:	b95b      	cbnz	r3, 80027be <HAL_I2C_Init+0x13e>
 80027a6:	1e43      	subs	r3, r0, #1
 80027a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027ac:	fbb3 f3f5 	udiv	r3, r3, r5
 80027b0:	3301      	adds	r3, #1
 80027b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b6:	b193      	cbz	r3, 80027de <HAL_I2C_Init+0x15e>
 80027b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027bc:	e7b0      	b.n	8002720 <HAL_I2C_Init+0xa0>
 80027be:	1e43      	subs	r3, r0, #1
 80027c0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80027c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80027c8:	fbb3 f3f5 	udiv	r3, r3, r5
 80027cc:	3301      	adds	r3, #1
 80027ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d2:	b133      	cbz	r3, 80027e2 <HAL_I2C_Init+0x162>
 80027d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027d8:	e7a2      	b.n	8002720 <HAL_I2C_Init+0xa0>
 80027da:	2304      	movs	r3, #4
 80027dc:	e7a0      	b.n	8002720 <HAL_I2C_Init+0xa0>
 80027de:	2301      	movs	r3, #1
 80027e0:	e79e      	b.n	8002720 <HAL_I2C_Init+0xa0>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e79c      	b.n	8002720 <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
}
 80027e8:	4770      	bx	lr
    return HAL_ERROR;
 80027ea:	2001      	movs	r0, #1
 80027ec:	e7c4      	b.n	8002778 <HAL_I2C_Init+0xf8>
 80027ee:	bf00      	nop
 80027f0:	000186a0 	.word	0x000186a0
 80027f4:	001e847f 	.word	0x001e847f
 80027f8:	431bde83 	.word	0x431bde83
 80027fc:	003d08ff 	.word	0x003d08ff
 8002800:	10624dd3 	.word	0x10624dd3

08002804 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002804:	b1a8      	cbz	r0, 8002832 <HAL_I2C_DeInit+0x2e>
{
 8002806:	b510      	push	{r4, lr}
 8002808:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800280a:	2324      	movs	r3, #36	@ 0x24
 800280c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002810:	6802      	ldr	r2, [r0, #0]
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800281a:	f7ff f8eb 	bl	80019f4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800281e:	2000      	movs	r0, #0
 8002820:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002822:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002828:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 800282c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8002830:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002832:	2001      	movs	r0, #1
}
 8002834:	4770      	bx	lr
	...

08002838 <HAL_I2C_Mem_Write>:
{
 8002838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800283c:	b083      	sub	sp, #12
 800283e:	4604      	mov	r4, r0
 8002840:	460f      	mov	r7, r1
 8002842:	4690      	mov	r8, r2
 8002844:	4699      	mov	r9, r3
 8002846:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff fa64 	bl	8001d14 <HAL_GetTick>
 800284c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800284e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002852:	b2c0      	uxtb	r0, r0
 8002854:	2820      	cmp	r0, #32
 8002856:	d003      	beq.n	8002860 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002858:	2002      	movs	r0, #2
}
 800285a:	b003      	add	sp, #12
 800285c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002860:	9500      	str	r5, [sp, #0]
 8002862:	2319      	movs	r3, #25
 8002864:	2201      	movs	r2, #1
 8002866:	494d      	ldr	r1, [pc, #308]	@ (800299c <HAL_I2C_Mem_Write+0x164>)
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff fca6 	bl	80021ba <I2C_WaitOnFlagUntilTimeout>
 800286e:	2800      	cmp	r0, #0
 8002870:	f040 808d 	bne.w	800298e <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8002874:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002878:	2b01      	cmp	r3, #1
 800287a:	f000 808a 	beq.w	8002992 <HAL_I2C_Mem_Write+0x15a>
 800287e:	2301      	movs	r3, #1
 8002880:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	f012 0f01 	tst.w	r2, #1
 800288c:	d103      	bne.n	8002896 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002896:	6822      	ldr	r2, [r4, #0]
 8002898:	6813      	ldr	r3, [r2, #0]
 800289a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800289e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028a0:	2321      	movs	r3, #33	@ 0x21
 80028a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a6:	2340      	movs	r3, #64	@ 0x40
 80028a8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80028b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80028b2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028b4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80028b8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80028bc:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028be:	4b38      	ldr	r3, [pc, #224]	@ (80029a0 <HAL_I2C_Mem_Write+0x168>)
 80028c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028c2:	9501      	str	r5, [sp, #4]
 80028c4:	9600      	str	r6, [sp, #0]
 80028c6:	464b      	mov	r3, r9
 80028c8:	4642      	mov	r2, r8
 80028ca:	4639      	mov	r1, r7
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff fd43 	bl	8002358 <I2C_RequestMemoryWrite>
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d15f      	bne.n	8002996 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 80028d6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80028d8:	b9d3      	cbnz	r3, 8002910 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028da:	462a      	mov	r2, r5
 80028dc:	4631      	mov	r1, r6
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff fe5c 	bl	800259c <I2C_WaitOnBTFFlagUntilTimeout>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	d044      	beq.n	8002972 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d03a      	beq.n	8002964 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
 80028f0:	e7b3      	b.n	800285a <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 80028f8:	2001      	movs	r0, #1
 80028fa:	e7ae      	b.n	800285a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	6813      	ldr	r3, [r2, #0]
 8002900:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002904:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8002906:	2001      	movs	r0, #1
 8002908:	e7a7      	b.n	800285a <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 800290a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0e4      	beq.n	80028da <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002910:	462a      	mov	r2, r5
 8002912:	4631      	mov	r1, r6
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff fcf0 	bl	80022fa <I2C_WaitOnTXEFlagUntilTimeout>
 800291a:	2800      	cmp	r0, #0
 800291c:	d1e9      	bne.n	80028f2 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002922:	7812      	ldrb	r2, [r2, #0]
 8002924:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002926:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800292c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	b29b      	uxth	r3, r3
 8002932:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002934:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8002936:	3901      	subs	r1, #1
 8002938:	b289      	uxth	r1, r1
 800293a:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	6951      	ldr	r1, [r2, #20]
 8002940:	f011 0f04 	tst.w	r1, #4
 8002944:	d0e1      	beq.n	800290a <HAL_I2C_Mem_Write+0xd2>
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0c7      	beq.n	80028da <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294a:	7843      	ldrb	r3, [r0, #1]
 800294c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800294e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002950:	3301      	adds	r3, #1
 8002952:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002954:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002956:	3b01      	subs	r3, #1
 8002958:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800295a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800295c:	3b01      	subs	r3, #1
 800295e:	b29b      	uxth	r3, r3
 8002960:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002962:	e7d2      	b.n	800290a <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	6822      	ldr	r2, [r4, #0]
 8002966:	6813      	ldr	r3, [r2, #0]
 8002968:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800296c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800296e:	2001      	movs	r0, #1
 8002970:	e773      	b.n	800285a <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	6822      	ldr	r2, [r4, #0]
 8002974:	6813      	ldr	r3, [r2, #0]
 8002976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800297c:	2320      	movs	r3, #32
 800297e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002982:	2300      	movs	r3, #0
 8002984:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002988:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 800298c:	e765      	b.n	800285a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800298e:	2002      	movs	r0, #2
 8002990:	e763      	b.n	800285a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8002992:	2002      	movs	r0, #2
 8002994:	e761      	b.n	800285a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002996:	2001      	movs	r0, #1
 8002998:	e75f      	b.n	800285a <HAL_I2C_Mem_Write+0x22>
 800299a:	bf00      	nop
 800299c:	00100002 	.word	0x00100002
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <HAL_I2C_Mem_Read>:
{
 80029a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029a8:	b087      	sub	sp, #28
 80029aa:	4604      	mov	r4, r0
 80029ac:	460f      	mov	r7, r1
 80029ae:	4690      	mov	r8, r2
 80029b0:	4699      	mov	r9, r3
 80029b2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff f9ae 	bl	8001d14 <HAL_GetTick>
 80029b8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ba:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80029be:	b2c0      	uxtb	r0, r0
 80029c0:	2820      	cmp	r0, #32
 80029c2:	d005      	beq.n	80029d0 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 80029c4:	f04f 0902 	mov.w	r9, #2
}
 80029c8:	4648      	mov	r0, r9
 80029ca:	b007      	add	sp, #28
 80029cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d0:	9500      	str	r5, [sp, #0]
 80029d2:	2319      	movs	r3, #25
 80029d4:	2201      	movs	r2, #1
 80029d6:	498a      	ldr	r1, [pc, #552]	@ (8002c00 <HAL_I2C_Mem_Read+0x25c>)
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff fbee 	bl	80021ba <I2C_WaitOnFlagUntilTimeout>
 80029de:	2800      	cmp	r0, #0
 80029e0:	f040 814e 	bne.w	8002c80 <HAL_I2C_Mem_Read+0x2dc>
    __HAL_LOCK(hi2c);
 80029e4:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	f000 814c 	beq.w	8002c86 <HAL_I2C_Mem_Read+0x2e2>
 80029ee:	2301      	movs	r3, #1
 80029f0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f012 0f01 	tst.w	r2, #1
 80029fc:	d103      	bne.n	8002a06 <HAL_I2C_Mem_Read+0x62>
      __HAL_I2C_ENABLE(hi2c);
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a06:	6822      	ldr	r2, [r4, #0]
 8002a08:	6813      	ldr	r3, [r2, #0]
 8002a0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a0e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a10:	2322      	movs	r3, #34	@ 0x22
 8002a12:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a16:	2340      	movs	r3, #64	@ 0x40
 8002a18:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002a20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002a22:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a24:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8002a28:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a2a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a2c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2e:	4b75      	ldr	r3, [pc, #468]	@ (8002c04 <HAL_I2C_Mem_Read+0x260>)
 8002a30:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a32:	9501      	str	r5, [sp, #4]
 8002a34:	9600      	str	r6, [sp, #0]
 8002a36:	464b      	mov	r3, r9
 8002a38:	4642      	mov	r2, r8
 8002a3a:	4639      	mov	r1, r7
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff fcfb 	bl	8002438 <I2C_RequestMemoryRead>
 8002a42:	4681      	mov	r9, r0
 8002a44:	2800      	cmp	r0, #0
 8002a46:	f040 8121 	bne.w	8002c8c <HAL_I2C_Mem_Read+0x2e8>
    if (hi2c->XferSize == 0U)
 8002a4a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002a4c:	b993      	cbnz	r3, 8002a74 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	9202      	str	r2, [sp, #8]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	9202      	str	r2, [sp, #8]
 8002a5a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a62:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 8002a64:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8101 	beq.w	8002c6e <HAL_I2C_Mem_Read+0x2ca>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6c:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002c08 <HAL_I2C_Mem_Read+0x264>
 8002a70:	2700      	movs	r7, #0
 8002a72:	e077      	b.n	8002b64 <HAL_I2C_Mem_Read+0x1c0>
    else if (hi2c->XferSize == 1U)
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d00b      	beq.n	8002a90 <HAL_I2C_Mem_Read+0xec>
    else if (hi2c->XferSize == 2U)
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d01b      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x110>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	9305      	str	r3, [sp, #20]
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	9205      	str	r2, [sp, #20]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	9305      	str	r3, [sp, #20]
 8002a8a:	9b05      	ldr	r3, [sp, #20]
    while (hi2c->XferSize > 0U)
 8002a8c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002a8e:	e7ed      	b.n	8002a6c <HAL_I2C_Mem_Read+0xc8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a90:	6822      	ldr	r2, [r4, #0]
 8002a92:	6813      	ldr	r3, [r2, #0]
 8002a94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a98:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9303      	str	r3, [sp, #12]
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	9203      	str	r2, [sp, #12]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	9203      	str	r2, [sp, #12]
 8002aa8:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e7d7      	b.n	8002a64 <HAL_I2C_Mem_Read+0xc0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab4:	6822      	ldr	r2, [r4, #0]
 8002ab6:	6813      	ldr	r3, [r2, #0]
 8002ab8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002abc:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	6813      	ldr	r3, [r2, #0]
 8002ac2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ac6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9304      	str	r3, [sp, #16]
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	9204      	str	r2, [sp, #16]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	9304      	str	r3, [sp, #16]
 8002ad6:	9b04      	ldr	r3, [sp, #16]
 8002ad8:	e7c4      	b.n	8002a64 <HAL_I2C_Mem_Read+0xc0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ada:	462a      	mov	r2, r5
 8002adc:	4631      	mov	r1, r6
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff fd8b 	bl	80025fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	f040 80d4 	bne.w	8002c92 <HAL_I2C_Mem_Read+0x2ee>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002af0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002af2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002af4:	3301      	adds	r3, #1
 8002af6:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002af8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002afa:	3b01      	subs	r3, #1
 8002afc:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002afe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002b06:	e029      	b.n	8002b5c <HAL_I2C_Mem_Read+0x1b8>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b08:	9500      	str	r5, [sp, #0]
 8002b0a:	4633      	mov	r3, r6
 8002b0c:	463a      	mov	r2, r7
 8002b0e:	4641      	mov	r1, r8
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff fb52 	bl	80021ba <I2C_WaitOnFlagUntilTimeout>
 8002b16:	2800      	cmp	r0, #0
 8002b18:	f040 80be 	bne.w	8002c98 <HAL_I2C_Mem_Read+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	6822      	ldr	r2, [r4, #0]
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b24:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b2c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002b2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b30:	1c53      	adds	r3, r2, #1
 8002b32:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002b34:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002b36:	3b01      	subs	r3, #1
 8002b38:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002b3a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002b48:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002b4e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002b54:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b5c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8085 	beq.w	8002c6e <HAL_I2C_Mem_Read+0x2ca>
      if (hi2c->XferSize <= 3U)
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d851      	bhi.n	8002c0c <HAL_I2C_Mem_Read+0x268>
        if (hi2c->XferSize == 1U)
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d0b6      	beq.n	8002ada <HAL_I2C_Mem_Read+0x136>
        else if (hi2c->XferSize == 2U)
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d0cb      	beq.n	8002b08 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b70:	9500      	str	r5, [sp, #0]
 8002b72:	4633      	mov	r3, r6
 8002b74:	463a      	mov	r2, r7
 8002b76:	4641      	mov	r1, r8
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7ff fb1e 	bl	80021ba <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	2800      	cmp	r0, #0
 8002b80:	f040 808d 	bne.w	8002c9e <HAL_I2C_Mem_Read+0x2fa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b84:	6822      	ldr	r2, [r4, #0]
 8002b86:	6813      	ldr	r3, [r2, #0]
 8002b88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b8c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b94:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002b96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b98:	3301      	adds	r3, #1
 8002b9a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002b9c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002ba2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002baa:	9500      	str	r5, [sp, #0]
 8002bac:	4633      	mov	r3, r6
 8002bae:	463a      	mov	r2, r7
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7ff fb01 	bl	80021ba <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d173      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x300>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	6813      	ldr	r3, [r2, #0]
 8002bc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bc4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002bcc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002bce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002bd0:	1c53      	adds	r3, r2, #1
 8002bd2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002bd4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002bda:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002be8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002bea:	3301      	adds	r3, #1
 8002bec:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002bee:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002bf4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002bfc:	e7ae      	b.n	8002b5c <HAL_I2C_Mem_Read+0x1b8>
 8002bfe:	bf00      	nop
 8002c00:	00100002 	.word	0x00100002
 8002c04:	ffff0000 	.word	0xffff0000
 8002c08:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0c:	462a      	mov	r2, r5
 8002c0e:	4631      	mov	r1, r6
 8002c10:	4620      	mov	r0, r4
 8002c12:	f7ff fcf2 	bl	80025fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c16:	2800      	cmp	r0, #0
 8002c18:	d147      	bne.n	8002caa <HAL_I2C_Mem_Read+0x306>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c24:	3301      	adds	r3, #1
 8002c26:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002c28:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002c30:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002c32:	3a01      	subs	r2, #1
 8002c34:	b292      	uxth	r2, r2
 8002c36:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c38:	6822      	ldr	r2, [r4, #0]
 8002c3a:	6951      	ldr	r1, [r2, #20]
 8002c3c:	f011 0f04 	tst.w	r1, #4
 8002c40:	d08c      	beq.n	8002b5c <HAL_I2C_Mem_Read+0x1b8>
          if (hi2c->XferSize == 3U)
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d00e      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c4c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002c4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c50:	3301      	adds	r3, #1
 8002c52:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002c54:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002c56:	3b01      	subs	r3, #1
 8002c58:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002c5a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002c62:	e77b      	b.n	8002b5c <HAL_I2C_Mem_Read+0x1b8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c64:	6813      	ldr	r3, [r2, #0]
 8002c66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e7eb      	b.n	8002c46 <HAL_I2C_Mem_Read+0x2a2>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c6e:	2320      	movs	r3, #32
 8002c70:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002c7a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002c7e:	e6a3      	b.n	80029c8 <HAL_I2C_Mem_Read+0x24>
      return HAL_BUSY;
 8002c80:	f04f 0902 	mov.w	r9, #2
 8002c84:	e6a0      	b.n	80029c8 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8002c86:	f04f 0902 	mov.w	r9, #2
 8002c8a:	e69d      	b.n	80029c8 <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 8002c8c:	f04f 0901 	mov.w	r9, #1
 8002c90:	e69a      	b.n	80029c8 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8002c92:	f04f 0901 	mov.w	r9, #1
 8002c96:	e697      	b.n	80029c8 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8002c98:	f04f 0901 	mov.w	r9, #1
 8002c9c:	e694      	b.n	80029c8 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8002c9e:	f04f 0901 	mov.w	r9, #1
 8002ca2:	e691      	b.n	80029c8 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8002ca4:	f04f 0901 	mov.w	r9, #1
 8002ca8:	e68e      	b.n	80029c8 <HAL_I2C_Mem_Read+0x24>
          return HAL_ERROR;
 8002caa:	f04f 0901 	mov.w	r9, #1
 8002cae:	e68b      	b.n	80029c8 <HAL_I2C_Mem_Read+0x24>

08002cb0 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8002cb0:	6c00      	ldr	r0, [r0, #64]	@ 0x40
}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	f000 809d 	beq.w	8002df4 <HAL_RCC_ClockConfig+0x140>
{
 8002cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cbe:	460d      	mov	r5, r1
 8002cc0:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc2:	4b50      	ldr	r3, [pc, #320]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	428b      	cmp	r3, r1
 8002ccc:	d208      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x2c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	b2cb      	uxtb	r3, r1
 8002cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002cd2:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd4:	6813      	ldr	r3, [r2, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	428b      	cmp	r3, r1
 8002cdc:	f040 808c 	bne.w	8002df8 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	f013 0f02 	tst.w	r3, #2
 8002ce6:	d017      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x64>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	f013 0f04 	tst.w	r3, #4
 8002cec:	d004      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cee:	4a46      	ldr	r2, [pc, #280]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002cf0:	6893      	ldr	r3, [r2, #8]
 8002cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	f013 0f08 	tst.w	r3, #8
 8002cfe:	d004      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x56>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d00:	4a41      	ldr	r2, [pc, #260]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002d02:	6893      	ldr	r3, [r2, #8]
 8002d04:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d08:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002d0c:	6893      	ldr	r3, [r2, #8]
 8002d0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d12:	68a1      	ldr	r1, [r4, #8]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	f013 0f01 	tst.w	r3, #1
 8002d1e:	d032      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d20:	6862      	ldr	r2, [r4, #4]
 8002d22:	2a01      	cmp	r2, #1
 8002d24:	d021      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d26:	1e93      	subs	r3, r2, #2
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d925      	bls.n	8002d78 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f013 0f02 	tst.w	r3, #2
 8002d34:	d062      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x148>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d36:	4934      	ldr	r1, [pc, #208]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002d38:	688b      	ldr	r3, [r1, #8]
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d42:	f7fe ffe7 	bl	8001d14 <HAL_GetTick>
 8002d46:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d48:	4f2f      	ldr	r7, [pc, #188]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4a:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	6862      	ldr	r2, [r4, #4]
 8002d56:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d5a:	d014      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe ffda 	bl	8001d14 <HAL_GetTick>
 8002d60:	1b80      	subs	r0, r0, r6
 8002d62:	4540      	cmp	r0, r8
 8002d64:	d9f3      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_TIMEOUT;
 8002d66:	2003      	movs	r0, #3
 8002d68:	e042      	b.n	8002df0 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002d72:	d1e0      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002d74:	2001      	movs	r0, #1
 8002d76:	e03b      	b.n	8002df0 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d78:	4b23      	ldr	r3, [pc, #140]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002d80:	d1d9      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002d82:	2001      	movs	r0, #1
 8002d84:	e034      	b.n	8002df0 <HAL_RCC_ClockConfig+0x13c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d86:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	42ab      	cmp	r3, r5
 8002d90:	d907      	bls.n	8002da2 <HAL_RCC_ClockConfig+0xee>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	b2ea      	uxtb	r2, r5
 8002d94:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002d96:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	42ab      	cmp	r3, r5
 8002da0:	d12e      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x14c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	f013 0f04 	tst.w	r3, #4
 8002da8:	d006      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x104>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002daa:	4a17      	ldr	r2, [pc, #92]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002dac:	6893      	ldr	r3, [r2, #8]
 8002dae:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002db2:	68e1      	ldr	r1, [r4, #12]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	f013 0f08 	tst.w	r3, #8
 8002dbe:	d007      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x11c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc0:	4a11      	ldr	r2, [pc, #68]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002dc2:	6893      	ldr	r3, [r2, #8]
 8002dc4:	6921      	ldr	r1, [r4, #16]
 8002dc6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002dca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002dce:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dd0:	f000 f842 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8002e0c <HAL_RCC_ClockConfig+0x158>)
 8002dde:	5cd3      	ldrb	r3, [r2, r3]
 8002de0:	40d8      	lsrs	r0, r3
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_ClockConfig+0x15c>)
 8002de4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002de6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_ClockConfig+0x160>)
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	f7fe ff47 	bl	8001c7c <HAL_InitTick>

  return HAL_OK;
 8002dee:	2000      	movs	r0, #0
}
 8002df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002df4:	2001      	movs	r0, #1
}
 8002df6:	4770      	bx	lr
      return HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
 8002dfa:	e7f9      	b.n	8002df0 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	e7f7      	b.n	8002df0 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8002e00:	2001      	movs	r0, #1
 8002e02:	e7f5      	b.n	8002df0 <HAL_RCC_ClockConfig+0x13c>
 8002e04:	40023c00 	.word	0x40023c00
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	08004870 	.word	0x08004870
 8002e10:	20000004 	.word	0x20000004
 8002e14:	2000000c 	.word	0x2000000c

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e18:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e20:	4a03      	ldr	r2, [pc, #12]	@ (8002e30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	4a03      	ldr	r2, [pc, #12]	@ (8002e34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e26:	6810      	ldr	r0, [r2, #0]
}
 8002e28:	40d8      	lsrs	r0, r3
 8002e2a:	4770      	bx	lr
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08004868 	.word	0x08004868
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <HAL_RCC_GetPCLK2Freq+0x14>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e40:	4a03      	ldr	r2, [pc, #12]	@ (8002e50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e42:	5cd3      	ldrb	r3, [r2, r3]
 8002e44:	4a03      	ldr	r2, [pc, #12]	@ (8002e54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e46:	6810      	ldr	r0, [r2, #0]
}
 8002e48:	40d8      	lsrs	r0, r3
 8002e4a:	4770      	bx	lr
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	08004868 	.word	0x08004868
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e5a:	4b60      	ldr	r3, [pc, #384]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d007      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x1e>
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d05f      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e6a:	485d      	ldr	r0, [pc, #372]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf18      	it	ne
 8002e72:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002e74:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e76:	4b59      	ldr	r3, [pc, #356]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002e84:	d02c      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e86:	4b55      	ldr	r3, [pc, #340]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002e88:	6858      	ldr	r0, [r3, #4]
 8002e8a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002e8e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002e92:	ebbc 0c00 	subs.w	ip, ip, r0
 8002e96:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002e9a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002e9e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002ea2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002ea6:	ebb1 010c 	subs.w	r1, r1, ip
 8002eaa:	eb63 030e 	sbc.w	r3, r3, lr
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb4:	00c9      	lsls	r1, r1, #3
 8002eb6:	eb11 0c00 	adds.w	ip, r1, r0
 8002eba:	f143 0300 	adc.w	r3, r3, #0
 8002ebe:	0259      	lsls	r1, r3, #9
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002ec6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002eca:	f7fd fe17 	bl	8000afc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ece:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8002eda:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002ede:	e7c9      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002ee2:	6858      	ldr	r0, [r3, #4]
 8002ee4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002ee8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002eec:	ebbc 0c00 	subs.w	ip, ip, r0
 8002ef0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002ef4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002ef8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002efc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002f00:	ebb1 010c 	subs.w	r1, r1, ip
 8002f04:	eb63 030e 	sbc.w	r3, r3, lr
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f0e:	00c9      	lsls	r1, r1, #3
 8002f10:	eb11 0c00 	adds.w	ip, r1, r0
 8002f14:	f143 0300 	adc.w	r3, r3, #0
 8002f18:	0299      	lsls	r1, r3, #10
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002f20:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002f24:	f7fd fdea 	bl	8000afc <__aeabi_uldivmod>
 8002f28:	e7d1      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002f38:	d02a      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002f3c:	6858      	ldr	r0, [r3, #4]
 8002f3e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002f42:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002f46:	ebbc 0c00 	subs.w	ip, ip, r0
 8002f4a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002f4e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002f52:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002f56:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002f5a:	ebb1 010c 	subs.w	r1, r1, ip
 8002f5e:	eb63 030e 	sbc.w	r3, r3, lr
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f68:	00c9      	lsls	r1, r1, #3
 8002f6a:	eb11 0c00 	adds.w	ip, r1, r0
 8002f6e:	f143 0300 	adc.w	r3, r3, #0
 8002f72:	0259      	lsls	r1, r3, #9
 8002f74:	2300      	movs	r3, #0
 8002f76:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002f7a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002f7e:	f7fd fdbd 	bl	8000afc <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8002f8a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002f8e:	e771      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f90:	4b12      	ldr	r3, [pc, #72]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002f92:	6858      	ldr	r0, [r3, #4]
 8002f94:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002f98:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002f9c:	ebbc 0c00 	subs.w	ip, ip, r0
 8002fa0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002fa4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002fa8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002fac:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002fb0:	ebb1 010c 	subs.w	r1, r1, ip
 8002fb4:	eb63 030e 	sbc.w	r3, r3, lr
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fbe:	00c9      	lsls	r1, r1, #3
 8002fc0:	eb11 0c00 	adds.w	ip, r1, r0
 8002fc4:	f143 0300 	adc.w	r3, r3, #0
 8002fc8:	0299      	lsls	r1, r3, #10
 8002fca:	2300      	movs	r3, #0
 8002fcc:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002fd0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002fd4:	f7fd fd92 	bl	8000afc <__aeabi_uldivmod>
 8002fd8:	e7d3      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x12a>
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	007a1200 	.word	0x007a1200
 8002fe4:	00f42400 	.word	0x00f42400

08002fe8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	f000 8204 	beq.w	80033f6 <HAL_RCC_OscConfig+0x40e>
{
 8002fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	6803      	ldr	r3, [r0, #0]
 8002ff8:	f013 0f01 	tst.w	r3, #1
 8002ffc:	d041      	beq.n	8003082 <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ffe:	4b9a      	ldr	r3, [pc, #616]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b04      	cmp	r3, #4
 8003008:	d032      	beq.n	8003070 <HAL_RCC_OscConfig+0x88>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800300a:	4b97      	ldr	r3, [pc, #604]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003012:	2b08      	cmp	r3, #8
 8003014:	d027      	beq.n	8003066 <HAL_RCC_OscConfig+0x7e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b94      	ldr	r3, [pc, #592]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d059      	beq.n	80030d6 <HAL_RCC_OscConfig+0xee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003022:	6863      	ldr	r3, [r4, #4]
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003028:	d05b      	beq.n	80030e2 <HAL_RCC_OscConfig+0xfa>
 800302a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800302e:	d05e      	beq.n	80030ee <HAL_RCC_OscConfig+0x106>
 8003030:	4b8d      	ldr	r3, [pc, #564]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003040:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003042:	6863      	ldr	r3, [r4, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05c      	beq.n	8003102 <HAL_RCC_OscConfig+0x11a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fe fe64 	bl	8001d14 <HAL_GetTick>
 800304c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4e86      	ldr	r6, [pc, #536]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003050:	6833      	ldr	r3, [r6, #0]
 8003052:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003056:	d114      	bne.n	8003082 <HAL_RCC_OscConfig+0x9a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe fe5c 	bl	8001d14 <HAL_GetTick>
 800305c:	1b40      	subs	r0, r0, r5
 800305e:	2864      	cmp	r0, #100	@ 0x64
 8003060:	d9f6      	bls.n	8003050 <HAL_RCC_OscConfig+0x68>
          {
            return HAL_TIMEOUT;
 8003062:	2003      	movs	r0, #3
 8003064:	e1ce      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003066:	4b80      	ldr	r3, [pc, #512]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800306e:	d0d2      	beq.n	8003016 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	4b7d      	ldr	r3, [pc, #500]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003078:	d003      	beq.n	8003082 <HAL_RCC_OscConfig+0x9a>
 800307a:	6863      	ldr	r3, [r4, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 81bc 	beq.w	80033fa <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	f013 0f02 	tst.w	r3, #2
 8003088:	d060      	beq.n	800314c <HAL_RCC_OscConfig+0x164>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800308a:	4b77      	ldr	r3, [pc, #476]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f013 0f0c 	tst.w	r3, #12
 8003092:	d04a      	beq.n	800312a <HAL_RCC_OscConfig+0x142>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003094:	4b74      	ldr	r3, [pc, #464]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
        || \
 800309c:	2b08      	cmp	r3, #8
 800309e:	d03f      	beq.n	8003120 <HAL_RCC_OscConfig+0x138>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a0:	4b71      	ldr	r3, [pc, #452]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d069      	beq.n	8003180 <HAL_RCC_OscConfig+0x198>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030ac:	68e3      	ldr	r3, [r4, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d075      	beq.n	800319e <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b2:	4b6e      	ldr	r3, [pc, #440]	@ (800326c <HAL_RCC_OscConfig+0x284>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe fe2c 	bl	8001d14 <HAL_GetTick>
 80030bc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030be:	4e6a      	ldr	r6, [pc, #424]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030c0:	6833      	ldr	r3, [r6, #0]
 80030c2:	f013 0f02 	tst.w	r3, #2
 80030c6:	d161      	bne.n	800318c <HAL_RCC_OscConfig+0x1a4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe fe24 	bl	8001d14 <HAL_GetTick>
 80030cc:	1b40      	subs	r0, r0, r5
 80030ce:	2802      	cmp	r0, #2
 80030d0:	d9f6      	bls.n	80030c0 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 80030d2:	2003      	movs	r0, #3
 80030d4:	e196      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d6:	4b64      	ldr	r3, [pc, #400]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80030de:	d0a0      	beq.n	8003022 <HAL_RCC_OscConfig+0x3a>
 80030e0:	e7c6      	b.n	8003070 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e2:	4a61      	ldr	r2, [pc, #388]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030e4:	6813      	ldr	r3, [r2, #0]
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	e7a9      	b.n	8003042 <HAL_RCC_OscConfig+0x5a>
 80030ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e79f      	b.n	8003042 <HAL_RCC_OscConfig+0x5a>
        tickstart = HAL_GetTick();
 8003102:	f7fe fe07 	bl	8001d14 <HAL_GetTick>
 8003106:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003108:	4e57      	ldr	r6, [pc, #348]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800310a:	6833      	ldr	r3, [r6, #0]
 800310c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003110:	d0b7      	beq.n	8003082 <HAL_RCC_OscConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003112:	f7fe fdff 	bl	8001d14 <HAL_GetTick>
 8003116:	1b40      	subs	r0, r0, r5
 8003118:	2864      	cmp	r0, #100	@ 0x64
 800311a:	d9f6      	bls.n	800310a <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 800311c:	2003      	movs	r0, #3
 800311e:	e171      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003120:	4b51      	ldr	r3, [pc, #324]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003128:	d1ba      	bne.n	80030a0 <HAL_RCC_OscConfig+0xb8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b4f      	ldr	r3, [pc, #316]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f013 0f02 	tst.w	r3, #2
 8003132:	d003      	beq.n	800313c <HAL_RCC_OscConfig+0x154>
 8003134:	68e3      	ldr	r3, [r4, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	f040 8161 	bne.w	80033fe <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313c:	4a4a      	ldr	r2, [pc, #296]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800313e:	6813      	ldr	r3, [r2, #0]
 8003140:	6921      	ldr	r1, [r4, #16]
 8003142:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003146:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800314a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	f013 0f08 	tst.w	r3, #8
 8003152:	d049      	beq.n	80031e8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003154:	6963      	ldr	r3, [r4, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d033      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1da>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315a:	4b44      	ldr	r3, [pc, #272]	@ (800326c <HAL_RCC_OscConfig+0x284>)
 800315c:	2201      	movs	r2, #1
 800315e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003162:	f7fe fdd7 	bl	8001d14 <HAL_GetTick>
 8003166:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003168:	4e3f      	ldr	r6, [pc, #252]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800316a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800316c:	f013 0f02 	tst.w	r3, #2
 8003170:	d13a      	bne.n	80031e8 <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003172:	f7fe fdcf 	bl	8001d14 <HAL_GetTick>
 8003176:	1b40      	subs	r0, r0, r5
 8003178:	2802      	cmp	r0, #2
 800317a:	d9f6      	bls.n	800316a <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 800317c:	2003      	movs	r0, #3
 800317e:	e141      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003180:	4b39      	ldr	r3, [pc, #228]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003188:	d190      	bne.n	80030ac <HAL_RCC_OscConfig+0xc4>
 800318a:	e7ce      	b.n	800312a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4a36      	ldr	r2, [pc, #216]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	6921      	ldr	r1, [r4, #16]
 8003192:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003196:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e7d6      	b.n	800314c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800319e:	4b33      	ldr	r3, [pc, #204]	@ (800326c <HAL_RCC_OscConfig+0x284>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031a4:	f7fe fdb6 	bl	8001d14 <HAL_GetTick>
 80031a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031aa:	4e2f      	ldr	r6, [pc, #188]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031ac:	6833      	ldr	r3, [r6, #0]
 80031ae:	f013 0f02 	tst.w	r3, #2
 80031b2:	d0cb      	beq.n	800314c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe fdae 	bl	8001d14 <HAL_GetTick>
 80031b8:	1b40      	subs	r0, r0, r5
 80031ba:	2802      	cmp	r0, #2
 80031bc:	d9f6      	bls.n	80031ac <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 80031be:	2003      	movs	r0, #3
 80031c0:	e120      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c2:	4b2a      	ldr	r3, [pc, #168]	@ (800326c <HAL_RCC_OscConfig+0x284>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7fe fda3 	bl	8001d14 <HAL_GetTick>
 80031ce:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	4e25      	ldr	r6, [pc, #148]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031d2:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80031d4:	f013 0f02 	tst.w	r3, #2
 80031d8:	d006      	beq.n	80031e8 <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031da:	f7fe fd9b 	bl	8001d14 <HAL_GetTick>
 80031de:	1b40      	subs	r0, r0, r5
 80031e0:	2802      	cmp	r0, #2
 80031e2:	d9f6      	bls.n	80031d2 <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 80031e4:	2003      	movs	r0, #3
 80031e6:	e10d      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	f013 0f04 	tst.w	r3, #4
 80031ee:	d077      	beq.n	80032e0 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80031f8:	d133      	bne.n	8003262 <HAL_RCC_OscConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003200:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003202:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003206:	641a      	str	r2, [r3, #64]	@ 0x40
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003212:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	4b16      	ldr	r3, [pc, #88]	@ (8003270 <HAL_RCC_OscConfig+0x288>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800321c:	d02a      	beq.n	8003274 <HAL_RCC_OscConfig+0x28c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321e:	68a3      	ldr	r3, [r4, #8]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d03b      	beq.n	800329c <HAL_RCC_OscConfig+0x2b4>
 8003224:	2b05      	cmp	r3, #5
 8003226:	d03f      	beq.n	80032a8 <HAL_RCC_OscConfig+0x2c0>
 8003228:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800322a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	671a      	str	r2, [r3, #112]	@ 0x70
 8003232:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003234:	f022 0204 	bic.w	r2, r2, #4
 8003238:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800323a:	68a3      	ldr	r3, [r4, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d03d      	beq.n	80032bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe fd68 	bl	8001d14 <HAL_GetTick>
 8003244:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	4f08      	ldr	r7, [pc, #32]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800324e:	f013 0f02 	tst.w	r3, #2
 8003252:	d144      	bne.n	80032de <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003254:	f7fe fd5e 	bl	8001d14 <HAL_GetTick>
 8003258:	1b80      	subs	r0, r0, r6
 800325a:	4540      	cmp	r0, r8
 800325c:	d9f6      	bls.n	800324c <HAL_RCC_OscConfig+0x264>
        {
          return HAL_TIMEOUT;
 800325e:	2003      	movs	r0, #3
 8003260:	e0d0      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 8003262:	2500      	movs	r5, #0
 8003264:	e7d6      	b.n	8003214 <HAL_RCC_OscConfig+0x22c>
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	42470000 	.word	0x42470000
 8003270:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003274:	4a6b      	ldr	r2, [pc, #428]	@ (8003424 <HAL_RCC_OscConfig+0x43c>)
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800327c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800327e:	f7fe fd49 	bl	8001d14 <HAL_GetTick>
 8003282:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	4f67      	ldr	r7, [pc, #412]	@ (8003424 <HAL_RCC_OscConfig+0x43c>)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800328c:	d1c7      	bne.n	800321e <HAL_RCC_OscConfig+0x236>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328e:	f7fe fd41 	bl	8001d14 <HAL_GetTick>
 8003292:	1b80      	subs	r0, r0, r6
 8003294:	2802      	cmp	r0, #2
 8003296:	d9f6      	bls.n	8003286 <HAL_RCC_OscConfig+0x29e>
          return HAL_TIMEOUT;
 8003298:	2003      	movs	r0, #3
 800329a:	e0b3      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	4a62      	ldr	r2, [pc, #392]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
 800329e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a6:	e7c8      	b.n	800323a <HAL_RCC_OscConfig+0x252>
 80032a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
 80032aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032ac:	f042 0204 	orr.w	r2, r2, #4
 80032b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80032b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80032ba:	e7be      	b.n	800323a <HAL_RCC_OscConfig+0x252>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fd2a 	bl	8001d14 <HAL_GetTick>
 80032c0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c2:	4f59      	ldr	r7, [pc, #356]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ca:	f013 0f02 	tst.w	r3, #2
 80032ce:	d006      	beq.n	80032de <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fe fd20 	bl	8001d14 <HAL_GetTick>
 80032d4:	1b80      	subs	r0, r0, r6
 80032d6:	4540      	cmp	r0, r8
 80032d8:	d9f6      	bls.n	80032c8 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 80032da:	2003      	movs	r0, #3
 80032dc:	e092      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032de:	b9ed      	cbnz	r5, 800331c <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e0:	69a3      	ldr	r3, [r4, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 808d 	beq.w	8003402 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	f002 020c 	and.w	r2, r2, #12
 80032f0:	2a08      	cmp	r2, #8
 80032f2:	d054      	beq.n	800339e <HAL_RCC_OscConfig+0x3b6>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d017      	beq.n	8003328 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b4c      	ldr	r3, [pc, #304]	@ (800342c <HAL_RCC_OscConfig+0x444>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe fd09 	bl	8001d14 <HAL_GetTick>
 8003302:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003304:	4d48      	ldr	r5, [pc, #288]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
 8003306:	682b      	ldr	r3, [r5, #0]
 8003308:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800330c:	d045      	beq.n	800339a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7fe fd01 	bl	8001d14 <HAL_GetTick>
 8003312:	1b00      	subs	r0, r0, r4
 8003314:	2802      	cmp	r0, #2
 8003316:	d9f6      	bls.n	8003306 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003318:	2003      	movs	r0, #3
 800331a:	e073      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800331c:	4a42      	ldr	r2, [pc, #264]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
 800331e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	@ 0x40
 8003326:	e7db      	b.n	80032e0 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8003328:	4b40      	ldr	r3, [pc, #256]	@ (800342c <HAL_RCC_OscConfig+0x444>)
 800332a:	2200      	movs	r2, #0
 800332c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800332e:	f7fe fcf1 	bl	8001d14 <HAL_GetTick>
 8003332:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003334:	4e3c      	ldr	r6, [pc, #240]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
 8003336:	6833      	ldr	r3, [r6, #0]
 8003338:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800333c:	d006      	beq.n	800334c <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7fe fce9 	bl	8001d14 <HAL_GetTick>
 8003342:	1b40      	subs	r0, r0, r5
 8003344:	2802      	cmp	r0, #2
 8003346:	d9f6      	bls.n	8003336 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8003348:	2003      	movs	r0, #3
 800334a:	e05b      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800334c:	69e3      	ldr	r3, [r4, #28]
 800334e:	6a22      	ldr	r2, [r4, #32]
 8003350:	4313      	orrs	r3, r2
 8003352:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003354:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003358:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800335a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800335e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003360:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003364:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003366:	0852      	lsrs	r2, r2, #1
 8003368:	3a01      	subs	r2, #1
 800336a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800336e:	4a2e      	ldr	r2, [pc, #184]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
 8003370:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003372:	4b2e      	ldr	r3, [pc, #184]	@ (800342c <HAL_RCC_OscConfig+0x444>)
 8003374:	2201      	movs	r2, #1
 8003376:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003378:	f7fe fccc 	bl	8001d14 <HAL_GetTick>
 800337c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4d2a      	ldr	r5, [pc, #168]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fcc4 	bl	8001d14 <HAL_GetTick>
 800338c:	1b00      	subs	r0, r0, r4
 800338e:	2802      	cmp	r0, #2
 8003390:	d9f6      	bls.n	8003380 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003392:	2003      	movs	r0, #3
 8003394:	e036      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2000      	movs	r0, #0
 8003398:	e034      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
 800339a:	2000      	movs	r0, #0
 800339c:	e032      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d033      	beq.n	800340a <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->PLLCFGR;
 80033a2:	4b21      	ldr	r3, [pc, #132]	@ (8003428 <HAL_RCC_OscConfig+0x440>)
 80033a4:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033aa:	69e2      	ldr	r2, [r4, #28]
 80033ac:	4291      	cmp	r1, r2
 80033ae:	d12e      	bne.n	800340e <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b4:	6a21      	ldr	r1, [r4, #32]
 80033b6:	428a      	cmp	r2, r1
 80033b8:	d12b      	bne.n	8003412 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033bc:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80033c0:	401a      	ands	r2, r3
 80033c2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80033c6:	d126      	bne.n	8003416 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c8:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80033cc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80033d6:	d120      	bne.n	800341a <HAL_RCC_OscConfig+0x432>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033dc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033de:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80033e2:	d11c      	bne.n	800341e <HAL_RCC_OscConfig+0x436>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033e4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80033e6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ea:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80033ee:	bf14      	ite	ne
 80033f0:	2001      	movne	r0, #1
 80033f2:	2000      	moveq	r0, #0
 80033f4:	e006      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
    return HAL_ERROR;
 80033f6:	2001      	movs	r0, #1
}
 80033f8:	4770      	bx	lr
        return HAL_ERROR;
 80033fa:	2001      	movs	r0, #1
 80033fc:	e002      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
        return HAL_ERROR;
 80033fe:	2001      	movs	r0, #1
 8003400:	e000      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 8003402:	2000      	movs	r0, #0
}
 8003404:	b002      	add	sp, #8
 8003406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800340a:	2001      	movs	r0, #1
 800340c:	e7fa      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
 800340e:	2001      	movs	r0, #1
 8003410:	e7f8      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
 8003412:	2001      	movs	r0, #1
 8003414:	e7f6      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
 8003416:	2001      	movs	r0, #1
 8003418:	e7f4      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
 800341a:	2001      	movs	r0, #1
 800341c:	e7f2      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
 800341e:	2001      	movs	r0, #1
 8003420:	e7f0      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
 8003422:	bf00      	nop
 8003424:	40007000 	.word	0x40007000
 8003428:	40023800 	.word	0x40023800
 800342c:	42470000 	.word	0x42470000

08003430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003434:	6a02      	ldr	r2, [r0, #32]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003440:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003444:	680d      	ldr	r5, [r1, #0]
 8003446:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003448:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800344c:	688d      	ldr	r5, [r1, #8]
 800344e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003450:	4d0d      	ldr	r5, [pc, #52]	@ (8003488 <TIM_OC1_SetConfig+0x58>)
 8003452:	42a8      	cmp	r0, r5
 8003454:	d003      	beq.n	800345e <TIM_OC1_SetConfig+0x2e>
 8003456:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800345a:	42a8      	cmp	r0, r5
 800345c:	d10d      	bne.n	800347a <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800345e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003462:	68cd      	ldr	r5, [r1, #12]
 8003464:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003466:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800346a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800346e:	698d      	ldr	r5, [r1, #24]
 8003470:	694e      	ldr	r6, [r1, #20]
 8003472:	ea46 0c05 	orr.w	ip, r6, r5
 8003476:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800347e:	684a      	ldr	r2, [r1, #4]
 8003480:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003482:	6203      	str	r3, [r0, #32]
}
 8003484:	bc70      	pop	{r4, r5, r6}
 8003486:	4770      	bx	lr
 8003488:	40010000 	.word	0x40010000

0800348c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003490:	6a02      	ldr	r2, [r0, #32]
 8003492:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003496:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800349c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a0:	680d      	ldr	r5, [r1, #0]
 80034a2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034a8:	688d      	ldr	r5, [r1, #8]
 80034aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ae:	4d0e      	ldr	r5, [pc, #56]	@ (80034e8 <TIM_OC3_SetConfig+0x5c>)
 80034b0:	42a8      	cmp	r0, r5
 80034b2:	d003      	beq.n	80034bc <TIM_OC3_SetConfig+0x30>
 80034b4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80034b8:	42a8      	cmp	r0, r5
 80034ba:	d10e      	bne.n	80034da <TIM_OC3_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c0:	68cd      	ldr	r5, [r1, #12]
 80034c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ca:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ce:	698d      	ldr	r5, [r1, #24]
 80034d0:	694e      	ldr	r6, [r1, #20]
 80034d2:	ea46 0c05 	orr.w	ip, r6, r5
 80034d6:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034da:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034dc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034de:	684a      	ldr	r2, [r1, #4]
 80034e0:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e2:	6203      	str	r3, [r0, #32]
}
 80034e4:	bc70      	pop	{r4, r5, r6}
 80034e6:	4770      	bx	lr
 80034e8:	40010000 	.word	0x40010000

080034ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f0:	6a02      	ldr	r2, [r0, #32]
 80034f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034f6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034fc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003500:	680d      	ldr	r5, [r1, #0]
 8003502:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003506:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800350a:	688d      	ldr	r5, [r1, #8]
 800350c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003510:	4d09      	ldr	r5, [pc, #36]	@ (8003538 <TIM_OC4_SetConfig+0x4c>)
 8003512:	42a8      	cmp	r0, r5
 8003514:	d003      	beq.n	800351e <TIM_OC4_SetConfig+0x32>
 8003516:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800351a:	42a8      	cmp	r0, r5
 800351c:	d104      	bne.n	8003528 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800351e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003522:	694d      	ldr	r5, [r1, #20]
 8003524:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003528:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800352a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800352c:	684a      	ldr	r2, [r1, #4]
 800352e:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003530:	6203      	str	r3, [r0, #32]
}
 8003532:	bc30      	pop	{r4, r5}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000

0800353c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800353c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800353e:	4a4d      	ldr	r2, [pc, #308]	@ (8003674 <TIM_Base_SetConfig+0x138>)
 8003540:	4290      	cmp	r0, r2
 8003542:	d067      	beq.n	8003614 <TIM_Base_SetConfig+0xd8>
 8003544:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003548:	d07e      	beq.n	8003648 <TIM_Base_SetConfig+0x10c>
 800354a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800354e:	4290      	cmp	r0, r2
 8003550:	d056      	beq.n	8003600 <TIM_Base_SetConfig+0xc4>
 8003552:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003556:	4290      	cmp	r0, r2
 8003558:	d057      	beq.n	800360a <TIM_Base_SetConfig+0xce>
 800355a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800355e:	4290      	cmp	r0, r2
 8003560:	f000 8083 	beq.w	800366a <TIM_Base_SetConfig+0x12e>
 8003564:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003568:	4290      	cmp	r0, r2
 800356a:	d01f      	beq.n	80035ac <TIM_Base_SetConfig+0x70>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356c:	4a42      	ldr	r2, [pc, #264]	@ (8003678 <TIM_Base_SetConfig+0x13c>)
 800356e:	4290      	cmp	r0, r2
 8003570:	d06e      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
 8003572:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003576:	4290      	cmp	r0, r2
 8003578:	d06a      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
 800357a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800357e:	4290      	cmp	r0, r2
 8003580:	d066      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
 8003582:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8003586:	4290      	cmp	r0, r2
 8003588:	d062      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
 800358a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800358e:	4290      	cmp	r0, r2
 8003590:	d05e      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
 8003592:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003596:	4290      	cmp	r0, r2
 8003598:	d05a      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800359a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800359e:	694a      	ldr	r2, [r1, #20]
 80035a0:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a2:	688a      	ldr	r2, [r1, #8]
 80035a4:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035a6:	680a      	ldr	r2, [r1, #0]
 80035a8:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035aa:	e045      	b.n	8003638 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80035b0:	684a      	ldr	r2, [r1, #4]
 80035b2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003674 <TIM_Base_SetConfig+0x138>)
 80035b6:	4290      	cmp	r0, r2
 80035b8:	d030      	beq.n	800361c <TIM_Base_SetConfig+0xe0>
 80035ba:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80035be:	d047      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
 80035c0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80035c4:	4290      	cmp	r0, r2
 80035c6:	d043      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
 80035c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035cc:	4290      	cmp	r0, r2
 80035ce:	d03f      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
 80035d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035d4:	4290      	cmp	r0, r2
 80035d6:	d03b      	beq.n	8003650 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035dc:	68ca      	ldr	r2, [r1, #12]
 80035de:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e4:	694a      	ldr	r2, [r1, #20]
 80035e6:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	688a      	ldr	r2, [r1, #8]
 80035ea:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035ec:	680a      	ldr	r2, [r1, #0]
 80035ee:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f0:	4a20      	ldr	r2, [pc, #128]	@ (8003674 <TIM_Base_SetConfig+0x138>)
 80035f2:	4290      	cmp	r0, r2
 80035f4:	d01e      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 80035f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035fa:	4290      	cmp	r0, r2
 80035fc:	d01a      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 80035fe:	e01b      	b.n	8003638 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003604:	684a      	ldr	r2, [r1, #4]
 8003606:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003608:	e022      	b.n	8003650 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800360e:	684a      	ldr	r2, [r1, #4]
 8003610:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003612:	e01d      	b.n	8003650 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003618:	684a      	ldr	r2, [r1, #4]
 800361a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800361c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003620:	68ca      	ldr	r2, [r1, #12]
 8003622:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003628:	694a      	ldr	r2, [r1, #20]
 800362a:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362c:	688a      	ldr	r2, [r1, #8]
 800362e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003630:	680a      	ldr	r2, [r1, #0]
 8003632:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	690a      	ldr	r2, [r1, #16]
 8003636:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003638:	6802      	ldr	r2, [r0, #0]
 800363a:	f042 0204 	orr.w	r2, r2, #4
 800363e:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003640:	2201      	movs	r2, #1
 8003642:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8003644:	6003      	str	r3, [r0, #0]
}
 8003646:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800364c:	684a      	ldr	r2, [r1, #4]
 800364e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003654:	68ca      	ldr	r2, [r1, #12]
 8003656:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800365c:	694a      	ldr	r2, [r1, #20]
 800365e:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003660:	688a      	ldr	r2, [r1, #8]
 8003662:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003664:	680a      	ldr	r2, [r1, #0]
 8003666:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003668:	e7e6      	b.n	8003638 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800366a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800366e:	684a      	ldr	r2, [r1, #4]
 8003670:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003672:	e7ed      	b.n	8003650 <TIM_Base_SetConfig+0x114>
 8003674:	40010000 	.word	0x40010000
 8003678:	40014000 	.word	0x40014000

0800367c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800367c:	b340      	cbz	r0, 80036d0 <HAL_TIM_PWM_Init+0x54>
{
 800367e:	b510      	push	{r4, lr}
 8003680:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003682:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003686:	b1f3      	cbz	r3, 80036c6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	2302      	movs	r3, #2
 800368a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368e:	4621      	mov	r1, r4
 8003690:	f851 0b04 	ldr.w	r0, [r1], #4
 8003694:	f7ff ff52 	bl	800353c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	2301      	movs	r3, #1
 800369a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80036a2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80036a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80036aa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036b6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80036ba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80036be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80036c2:	2000      	movs	r0, #0
}
 80036c4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80036c6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036ca:	f7fe f9b1 	bl	8001a30 <HAL_TIM_PWM_MspInit>
 80036ce:	e7db      	b.n	8003688 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80036d0:	2001      	movs	r0, #1
}
 80036d2:	4770      	bx	lr

080036d4 <TIM_OC2_SetConfig>:
{
 80036d4:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80036d6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d8:	6a02      	ldr	r2, [r0, #32]
 80036da:	f022 0210 	bic.w	r2, r2, #16
 80036de:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80036e0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80036e2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036e8:	680d      	ldr	r5, [r1, #0]
 80036ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80036ee:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036f2:	688d      	ldr	r5, [r1, #8]
 80036f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036f8:	4d0e      	ldr	r5, [pc, #56]	@ (8003734 <TIM_OC2_SetConfig+0x60>)
 80036fa:	42a8      	cmp	r0, r5
 80036fc:	d003      	beq.n	8003706 <TIM_OC2_SetConfig+0x32>
 80036fe:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003702:	42a8      	cmp	r0, r5
 8003704:	d10e      	bne.n	8003724 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800370a:	68cd      	ldr	r5, [r1, #12]
 800370c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003714:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003718:	698d      	ldr	r5, [r1, #24]
 800371a:	694e      	ldr	r6, [r1, #20]
 800371c:	ea46 0c05 	orr.w	ip, r6, r5
 8003720:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8003724:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003726:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003728:	684a      	ldr	r2, [r1, #4]
 800372a:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800372c:	6203      	str	r3, [r0, #32]
}
 800372e:	bc70      	pop	{r4, r5, r6}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000

08003738 <HAL_TIM_PWM_ConfigChannel>:
{
 8003738:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800373a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d066      	beq.n	8003810 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003742:	4604      	mov	r4, r0
 8003744:	460d      	mov	r5, r1
 8003746:	2301      	movs	r3, #1
 8003748:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800374c:	2a0c      	cmp	r2, #12
 800374e:	d85a      	bhi.n	8003806 <HAL_TIM_PWM_ConfigChannel+0xce>
 8003750:	e8df f002 	tbb	[pc, r2]
 8003754:	59595907 	.word	0x59595907
 8003758:	5959591b 	.word	0x5959591b
 800375c:	59595930 	.word	0x59595930
 8003760:	44          	.byte	0x44
 8003761:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003762:	6800      	ldr	r0, [r0, #0]
 8003764:	f7ff fe64 	bl	8003430 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	6993      	ldr	r3, [r2, #24]
 800376c:	f043 0308 	orr.w	r3, r3, #8
 8003770:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	6993      	ldr	r3, [r2, #24]
 8003776:	f023 0304 	bic.w	r3, r3, #4
 800377a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800377c:	6822      	ldr	r2, [r4, #0]
 800377e:	6993      	ldr	r3, [r2, #24]
 8003780:	6929      	ldr	r1, [r5, #16]
 8003782:	430b      	orrs	r3, r1
 8003784:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2000      	movs	r0, #0
      break;
 8003788:	e03e      	b.n	8003808 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800378a:	6800      	ldr	r0, [r0, #0]
 800378c:	f7ff ffa2 	bl	80036d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003790:	6822      	ldr	r2, [r4, #0]
 8003792:	6993      	ldr	r3, [r2, #24]
 8003794:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003798:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	6993      	ldr	r3, [r2, #24]
 800379e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037a2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037a4:	6822      	ldr	r2, [r4, #0]
 80037a6:	6993      	ldr	r3, [r2, #24]
 80037a8:	6929      	ldr	r1, [r5, #16]
 80037aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037ae:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2000      	movs	r0, #0
      break;
 80037b2:	e029      	b.n	8003808 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037b4:	6800      	ldr	r0, [r0, #0]
 80037b6:	f7ff fe69 	bl	800348c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	69d3      	ldr	r3, [r2, #28]
 80037be:	f043 0308 	orr.w	r3, r3, #8
 80037c2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037c4:	6822      	ldr	r2, [r4, #0]
 80037c6:	69d3      	ldr	r3, [r2, #28]
 80037c8:	f023 0304 	bic.w	r3, r3, #4
 80037cc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	69d3      	ldr	r3, [r2, #28]
 80037d2:	6929      	ldr	r1, [r5, #16]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2000      	movs	r0, #0
      break;
 80037da:	e015      	b.n	8003808 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037dc:	6800      	ldr	r0, [r0, #0]
 80037de:	f7ff fe85 	bl	80034ec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	69d3      	ldr	r3, [r2, #28]
 80037e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ec:	6822      	ldr	r2, [r4, #0]
 80037ee:	69d3      	ldr	r3, [r2, #28]
 80037f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037f6:	6822      	ldr	r2, [r4, #0]
 80037f8:	69d3      	ldr	r3, [r2, #28]
 80037fa:	6929      	ldr	r1, [r5, #16]
 80037fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003800:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003802:	2000      	movs	r0, #0
      break;
 8003804:	e000      	b.n	8003808 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003806:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003808:	2300      	movs	r3, #0
 800380a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800380e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003810:	2002      	movs	r0, #2
 8003812:	e7fc      	b.n	800380e <HAL_TIM_PWM_ConfigChannel+0xd6>

08003814 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003814:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003818:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800381a:	f04f 0c01 	mov.w	ip, #1
 800381e:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8003822:	ea23 030c 	bic.w	r3, r3, ip
 8003826:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003828:	6a03      	ldr	r3, [r0, #32]
 800382a:	408a      	lsls	r2, r1
 800382c:	431a      	orrs	r2, r3
 800382e:	6202      	str	r2, [r0, #32]
}
 8003830:	4770      	bx	lr
	...

08003834 <HAL_TIM_PWM_Start>:
{
 8003834:	b510      	push	{r4, lr}
 8003836:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003838:	4608      	mov	r0, r1
 800383a:	bba1      	cbnz	r1, 80038a6 <HAL_TIM_PWM_Start+0x72>
 800383c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d167      	bne.n	8003916 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003846:	2302      	movs	r3, #2
 8003848:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800384c:	2201      	movs	r2, #1
 800384e:	4601      	mov	r1, r0
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	f7ff ffdf 	bl	8003814 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	4a31      	ldr	r2, [pc, #196]	@ (8003920 <HAL_TIM_PWM_Start+0xec>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d048      	beq.n	80038f0 <HAL_TIM_PWM_Start+0xbc>
 800385e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003862:	4293      	cmp	r3, r2
 8003864:	d044      	beq.n	80038f0 <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386a:	d049      	beq.n	8003900 <HAL_TIM_PWM_Start+0xcc>
 800386c:	4a2d      	ldr	r2, [pc, #180]	@ (8003924 <HAL_TIM_PWM_Start+0xf0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d046      	beq.n	8003900 <HAL_TIM_PWM_Start+0xcc>
 8003872:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003876:	4293      	cmp	r3, r2
 8003878:	d042      	beq.n	8003900 <HAL_TIM_PWM_Start+0xcc>
 800387a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800387e:	4293      	cmp	r3, r2
 8003880:	d03e      	beq.n	8003900 <HAL_TIM_PWM_Start+0xcc>
 8003882:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003886:	4293      	cmp	r3, r2
 8003888:	d03a      	beq.n	8003900 <HAL_TIM_PWM_Start+0xcc>
 800388a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800388e:	4293      	cmp	r3, r2
 8003890:	d036      	beq.n	8003900 <HAL_TIM_PWM_Start+0xcc>
 8003892:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003896:	4293      	cmp	r3, r2
 8003898:	d032      	beq.n	8003900 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038a2:	2000      	movs	r0, #0
 80038a4:	e036      	b.n	8003914 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038a6:	2904      	cmp	r1, #4
 80038a8:	d00c      	beq.n	80038c4 <HAL_TIM_PWM_Start+0x90>
 80038aa:	2908      	cmp	r1, #8
 80038ac:	bf0c      	ite	eq
 80038ae:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 80038b2:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	bf18      	it	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	b143      	cbz	r3, 80038d2 <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 80038c0:	2001      	movs	r0, #1
 80038c2:	e027      	b.n	8003914 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038c4:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	bf18      	it	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	e7f5      	b.n	80038be <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d2:	2804      	cmp	r0, #4
 80038d4:	d008      	beq.n	80038e8 <HAL_TIM_PWM_Start+0xb4>
 80038d6:	2808      	cmp	r0, #8
 80038d8:	f04f 0302 	mov.w	r3, #2
 80038dc:	bf0c      	ite	eq
 80038de:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 80038e2:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 80038e6:	e7b1      	b.n	800384c <HAL_TIM_PWM_Start+0x18>
 80038e8:	2302      	movs	r3, #2
 80038ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80038ee:	e7ad      	b.n	800384c <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 80038f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038f6:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	4a09      	ldr	r2, [pc, #36]	@ (8003920 <HAL_TIM_PWM_Start+0xec>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d1b2      	bne.n	8003866 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	2a06      	cmp	r2, #6
 8003908:	d007      	beq.n	800391a <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003912:	2000      	movs	r0, #0
}
 8003914:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003916:	2001      	movs	r0, #1
 8003918:	e7fc      	b.n	8003914 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 800391a:	2000      	movs	r0, #0
 800391c:	e7fa      	b.n	8003914 <HAL_TIM_PWM_Start+0xe0>
 800391e:	bf00      	nop
 8003920:	40010000 	.word	0x40010000
 8003924:	40000400 	.word	0x40000400

08003928 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003928:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800392c:	2a01      	cmp	r2, #1
 800392e:	d03b      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8003930:	b430      	push	{r4, r5}
 8003932:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003934:	2201      	movs	r2, #1
 8003936:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393a:	2202      	movs	r2, #2
 800393c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003940:	6804      	ldr	r4, [r0, #0]
 8003942:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003944:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003946:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800394a:	680d      	ldr	r5, [r1, #0]
 800394c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800394e:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4c16      	ldr	r4, [pc, #88]	@ (80039ac <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8003954:	42a2      	cmp	r2, r4
 8003956:	d01a      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003958:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800395c:	d017      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800395e:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 8003962:	42a2      	cmp	r2, r4
 8003964:	d013      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003966:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800396a:	42a2      	cmp	r2, r4
 800396c:	d00f      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800396e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003972:	42a2      	cmp	r2, r4
 8003974:	d00b      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003976:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 800397a:	42a2      	cmp	r2, r4
 800397c:	d007      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800397e:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 8003982:	42a2      	cmp	r2, r4
 8003984:	d003      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003986:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 800398a:	42a2      	cmp	r2, r4
 800398c:	d104      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800398e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003992:	6849      	ldr	r1, [r1, #4]
 8003994:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003996:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800399e:	2000      	movs	r0, #0
 80039a0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80039a4:	bc30      	pop	{r4, r5}
 80039a6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80039a8:	2002      	movs	r0, #2
}
 80039aa:	4770      	bx	lr
 80039ac:	40010000 	.word	0x40010000

080039b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	f102 030c 	add.w	r3, r2, #12
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	320c      	adds	r2, #12
 80039c0:	e842 3100 	strex	r1, r3, [r2]
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d1f3      	bne.n	80039b0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	f102 0314 	add.w	r3, r2, #20
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	3214      	adds	r2, #20
 80039d8:	e842 3100 	strex	r1, r3, [r2]
 80039dc:	2900      	cmp	r1, #0
 80039de:	d1f3      	bne.n	80039c8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d005      	beq.n	80039f2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039e6:	2320      	movs	r3, #32
 80039e8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ec:	2300      	movs	r3, #0
 80039ee:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80039f0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	f102 030c 	add.w	r3, r2, #12
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	320c      	adds	r2, #12
 8003a02:	e842 3100 	strex	r1, r3, [r2]
 8003a06:	2900      	cmp	r1, #0
 8003a08:	d1f3      	bne.n	80039f2 <UART_EndRxTransfer+0x42>
 8003a0a:	e7ec      	b.n	80039e6 <UART_EndRxTransfer+0x36>

08003a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a10:	6802      	ldr	r2, [r0, #0]
 8003a12:	6913      	ldr	r3, [r2, #16]
 8003a14:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a18:	68c1      	ldr	r1, [r0, #12]
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8003a1e:	6801      	ldr	r1, [r0, #0]
 8003a20:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a22:	6883      	ldr	r3, [r0, #8]
 8003a24:	6900      	ldr	r0, [r0, #16]
 8003a26:	4303      	orrs	r3, r0
 8003a28:	6960      	ldr	r0, [r4, #20]
 8003a2a:	4303      	orrs	r3, r0
 8003a2c:	69e0      	ldr	r0, [r4, #28]
 8003a2e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003a30:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8003a34:	f022 020c 	bic.w	r2, r2, #12
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	6953      	ldr	r3, [r2, #20]
 8003a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a44:	69a1      	ldr	r1, [r4, #24]
 8003a46:	430b      	orrs	r3, r1
 8003a48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b08 <UART_SetConfig+0xfc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d006      	beq.n	8003a60 <UART_SetConfig+0x54>
 8003a52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d002      	beq.n	8003a60 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a5a:	f7ff f9dd 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8003a5e:	e001      	b.n	8003a64 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a60:	f7ff f9ea 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a64:	69e3      	ldr	r3, [r4, #28]
 8003a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a6a:	d024      	beq.n	8003ab6 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	1803      	adds	r3, r0, r0
 8003a70:	4149      	adcs	r1, r1
 8003a72:	181b      	adds	r3, r3, r0
 8003a74:	f141 0100 	adc.w	r1, r1, #0
 8003a78:	00c9      	lsls	r1, r1, #3
 8003a7a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1818      	adds	r0, r3, r0
 8003a82:	6863      	ldr	r3, [r4, #4]
 8003a84:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003a88:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003a8c:	f141 0100 	adc.w	r1, r1, #0
 8003a90:	f7fd f834 	bl	8000afc <__aeabi_uldivmod>
 8003a94:	6821      	ldr	r1, [r4, #0]
 8003a96:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <UART_SetConfig+0x100>)
 8003a98:	fba2 4300 	umull	r4, r3, r2, r0
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	2464      	movs	r4, #100	@ 0x64
 8003aa0:	fb04 0013 	mls	r0, r4, r3, r0
 8003aa4:	0100      	lsls	r0, r0, #4
 8003aa6:	3032      	adds	r0, #50	@ 0x32
 8003aa8:	fba2 2000 	umull	r2, r0, r2, r0
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8003ab2:	608b      	str	r3, [r1, #8]
  }
}
 8003ab4:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	1802      	adds	r2, r0, r0
 8003aba:	eb43 0103 	adc.w	r1, r3, r3
 8003abe:	1812      	adds	r2, r2, r0
 8003ac0:	f141 0100 	adc.w	r1, r1, #0
 8003ac4:	00c9      	lsls	r1, r1, #3
 8003ac6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aca:	00d2      	lsls	r2, r2, #3
 8003acc:	1810      	adds	r0, r2, r0
 8003ace:	f141 0100 	adc.w	r1, r1, #0
 8003ad2:	6862      	ldr	r2, [r4, #4]
 8003ad4:	1892      	adds	r2, r2, r2
 8003ad6:	415b      	adcs	r3, r3
 8003ad8:	f7fd f810 	bl	8000afc <__aeabi_uldivmod>
 8003adc:	4a0b      	ldr	r2, [pc, #44]	@ (8003b0c <UART_SetConfig+0x100>)
 8003ade:	fba2 3100 	umull	r3, r1, r2, r0
 8003ae2:	0949      	lsrs	r1, r1, #5
 8003ae4:	2364      	movs	r3, #100	@ 0x64
 8003ae6:	fb03 0311 	mls	r3, r3, r1, r0
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	3332      	adds	r3, #50	@ 0x32
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	6820      	ldr	r0, [r4, #0]
 8003af4:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003af8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b02:	4413      	add	r3, r2
 8003b04:	6083      	str	r3, [r0, #8]
 8003b06:	e7d5      	b.n	8003ab4 <UART_SetConfig+0xa8>
 8003b08:	40011000 	.word	0x40011000
 8003b0c:	51eb851f 	.word	0x51eb851f

08003b10 <UART_WaitOnFlagUntilTimeout>:
{
 8003b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b14:	b083      	sub	sp, #12
 8003b16:	4680      	mov	r8, r0
 8003b18:	460d      	mov	r5, r1
 8003b1a:	4616      	mov	r6, r2
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b20:	f8d8 3000 	ldr.w	r3, [r8]
 8003b24:	681c      	ldr	r4, [r3, #0]
 8003b26:	ea35 0404 	bics.w	r4, r5, r4
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2401      	moveq	r4, #1
 8003b2e:	2400      	movne	r4, #0
 8003b30:	42b4      	cmp	r4, r6
 8003b32:	d128      	bne.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003b38:	d0f4      	beq.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe f8eb 	bl	8001d14 <HAL_GetTick>
 8003b3e:	eba0 0009 	sub.w	r0, r0, r9
 8003b42:	42b8      	cmp	r0, r7
 8003b44:	d823      	bhi.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x7e>
 8003b46:	b327      	cbz	r7, 8003b92 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b48:	f8d8 3000 	ldr.w	r3, [r8]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	f012 0f04 	tst.w	r2, #4
 8003b52:	d0e5      	beq.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x10>
 8003b54:	2d80      	cmp	r5, #128	@ 0x80
 8003b56:	d0e3      	beq.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x10>
 8003b58:	2d40      	cmp	r5, #64	@ 0x40
 8003b5a:	d0e1      	beq.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	f012 0f08 	tst.w	r2, #8
 8003b62:	d0dd      	beq.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b64:	2400      	movs	r4, #0
 8003b66:	9401      	str	r4, [sp, #4]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	9201      	str	r2, [sp, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8003b72:	4640      	mov	r0, r8
 8003b74:	f7ff ff1c 	bl	80039b0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b78:	2308      	movs	r3, #8
 8003b7a:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003b7e:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 8003b82:	2001      	movs	r0, #1
 8003b84:	e000      	b.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8003b86:	2000      	movs	r0, #0
}
 8003b88:	b003      	add	sp, #12
 8003b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003b8e:	2003      	movs	r0, #3
 8003b90:	e7fa      	b.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x78>
 8003b92:	2003      	movs	r0, #3
 8003b94:	e7f8      	b.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x78>

08003b96 <HAL_UART_Init>:
  if (huart == NULL)
 8003b96:	b360      	cbz	r0, 8003bf2 <HAL_UART_Init+0x5c>
{
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003ba0:	b313      	cbz	r3, 8003be8 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003ba2:	2324      	movs	r3, #36	@ 0x24
 8003ba4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	68d3      	ldr	r3, [r2, #12]
 8003bac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bb0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7ff ff2a 	bl	8003a0c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb8:	6822      	ldr	r2, [r4, #0]
 8003bba:	6913      	ldr	r3, [r2, #16]
 8003bbc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003bc0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc2:	6822      	ldr	r2, [r4, #0]
 8003bc4:	6953      	ldr	r3, [r2, #20]
 8003bc6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003bca:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003bcc:	6822      	ldr	r2, [r4, #0]
 8003bce:	68d3      	ldr	r3, [r2, #12]
 8003bd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bd4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bda:	2320      	movs	r3, #32
 8003bdc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003be0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003be4:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8003be6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003be8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003bec:	f7fd ffa4 	bl	8001b38 <HAL_UART_MspInit>
 8003bf0:	e7d7      	b.n	8003ba2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003bf2:	2001      	movs	r0, #1
}
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_UART_Transmit>:
{
 8003bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfe:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d15c      	bne.n	8003cc2 <HAL_UART_Transmit+0xcc>
 8003c08:	4604      	mov	r4, r0
 8003c0a:	460d      	mov	r5, r1
 8003c0c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003c0e:	2900      	cmp	r1, #0
 8003c10:	d05b      	beq.n	8003cca <HAL_UART_Transmit+0xd4>
 8003c12:	b90a      	cbnz	r2, 8003c18 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8003c14:	2001      	movs	r0, #1
 8003c16:	e055      	b.n	8003cc4 <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1c:	2321      	movs	r3, #33	@ 0x21
 8003c1e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003c22:	f7fe f877 	bl	8001d14 <HAL_GetTick>
 8003c26:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003c28:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c2c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	68a3      	ldr	r3, [r4, #8]
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c36:	d009      	beq.n	8003c4c <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8003c38:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8003c3c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b373      	cbz	r3, 8003ca0 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c42:	f04f 0900 	mov.w	r9, #0
 8003c46:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8003c4a:	e019      	b.n	8003c80 <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	b113      	cbz	r3, 8003c56 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8003c50:	f04f 0a00 	mov.w	sl, #0
 8003c54:	e7f2      	b.n	8003c3c <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8003c56:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8003c58:	2500      	movs	r5, #0
 8003c5a:	e7ef      	b.n	8003c3c <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003c62:	2003      	movs	r0, #3
 8003c64:	e02e      	b.n	8003cc4 <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8003c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c70:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003c72:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003c74:	3a01      	subs	r2, #1
 8003c76:	b292      	uxth	r2, r2
 8003c78:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c7a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	b17b      	cbz	r3, 8003ca0 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c80:	9600      	str	r6, [sp, #0]
 8003c82:	463b      	mov	r3, r7
 8003c84:	464a      	mov	r2, r9
 8003c86:	4641      	mov	r1, r8
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7ff ff41 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d1e4      	bne.n	8003c5c <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8003c92:	2d00      	cmp	r5, #0
 8003c94:	d0e7      	beq.n	8003c66 <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003c9c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c9e:	e7e8      	b.n	8003c72 <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca0:	9600      	str	r6, [sp, #0]
 8003ca2:	463b      	mov	r3, r7
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2140      	movs	r1, #64	@ 0x40
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7ff ff31 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8003cae:	b918      	cbnz	r0, 8003cb8 <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003cb6:	e005      	b.n	8003cc4 <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 8003cb8:	2320      	movs	r3, #32
 8003cba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8003cbe:	2003      	movs	r0, #3
 8003cc0:	e000      	b.n	8003cc4 <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 8003cc2:	2002      	movs	r0, #2
}
 8003cc4:	b002      	add	sp, #8
 8003cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8003cca:	2001      	movs	r0, #1
 8003ccc:	e7fa      	b.n	8003cc4 <HAL_UART_Transmit+0xce>
	...

08003cd0 <sniprintf>:
 8003cd0:	b40c      	push	{r2, r3}
 8003cd2:	b530      	push	{r4, r5, lr}
 8003cd4:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <sniprintf+0x68>)
 8003cd6:	1e0c      	subs	r4, r1, #0
 8003cd8:	681d      	ldr	r5, [r3, #0]
 8003cda:	b09d      	sub	sp, #116	@ 0x74
 8003cdc:	da08      	bge.n	8003cf0 <sniprintf+0x20>
 8003cde:	238b      	movs	r3, #139	@ 0x8b
 8003ce0:	602b      	str	r3, [r5, #0]
 8003ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce6:	b01d      	add	sp, #116	@ 0x74
 8003ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cec:	b002      	add	sp, #8
 8003cee:	4770      	bx	lr
 8003cf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003cf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003cfe:	bf14      	ite	ne
 8003d00:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d04:	4623      	moveq	r3, r4
 8003d06:	9304      	str	r3, [sp, #16]
 8003d08:	9307      	str	r3, [sp, #28]
 8003d0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d0e:	9002      	str	r0, [sp, #8]
 8003d10:	9006      	str	r0, [sp, #24]
 8003d12:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d16:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003d18:	ab21      	add	r3, sp, #132	@ 0x84
 8003d1a:	a902      	add	r1, sp, #8
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	f000 f994 	bl	800404c <_svfiprintf_r>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	bfbc      	itt	lt
 8003d28:	238b      	movlt	r3, #139	@ 0x8b
 8003d2a:	602b      	strlt	r3, [r5, #0]
 8003d2c:	2c00      	cmp	r4, #0
 8003d2e:	d0da      	beq.n	8003ce6 <sniprintf+0x16>
 8003d30:	9b02      	ldr	r3, [sp, #8]
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e7d6      	b.n	8003ce6 <sniprintf+0x16>
 8003d38:	20000010 	.word	0x20000010

08003d3c <memset>:
 8003d3c:	4402      	add	r2, r0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d100      	bne.n	8003d46 <memset+0xa>
 8003d44:	4770      	bx	lr
 8003d46:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4a:	e7f9      	b.n	8003d40 <memset+0x4>

08003d4c <__errno>:
 8003d4c:	4b01      	ldr	r3, [pc, #4]	@ (8003d54 <__errno+0x8>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000010 	.word	0x20000010

08003d58 <__libc_init_array>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d90 <__libc_init_array+0x38>)
 8003d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003d94 <__libc_init_array+0x3c>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	2600      	movs	r6, #0
 8003d64:	42a6      	cmp	r6, r4
 8003d66:	d109      	bne.n	8003d7c <__libc_init_array+0x24>
 8003d68:	4d0b      	ldr	r5, [pc, #44]	@ (8003d98 <__libc_init_array+0x40>)
 8003d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d9c <__libc_init_array+0x44>)
 8003d6c:	f000 fd40 	bl	80047f0 <_init>
 8003d70:	1b64      	subs	r4, r4, r5
 8003d72:	10a4      	asrs	r4, r4, #2
 8003d74:	2600      	movs	r6, #0
 8003d76:	42a6      	cmp	r6, r4
 8003d78:	d105      	bne.n	8003d86 <__libc_init_array+0x2e>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d80:	4798      	blx	r3
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7ee      	b.n	8003d64 <__libc_init_array+0xc>
 8003d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8a:	4798      	blx	r3
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	e7f2      	b.n	8003d76 <__libc_init_array+0x1e>
 8003d90:	080048dc 	.word	0x080048dc
 8003d94:	080048dc 	.word	0x080048dc
 8003d98:	080048dc 	.word	0x080048dc
 8003d9c:	080048e0 	.word	0x080048e0

08003da0 <__retarget_lock_acquire_recursive>:
 8003da0:	4770      	bx	lr

08003da2 <__retarget_lock_release_recursive>:
 8003da2:	4770      	bx	lr

08003da4 <_free_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4605      	mov	r5, r0
 8003da8:	2900      	cmp	r1, #0
 8003daa:	d041      	beq.n	8003e30 <_free_r+0x8c>
 8003dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db0:	1f0c      	subs	r4, r1, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bfb8      	it	lt
 8003db6:	18e4      	addlt	r4, r4, r3
 8003db8:	f000 f8e0 	bl	8003f7c <__malloc_lock>
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e34 <_free_r+0x90>)
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	b933      	cbnz	r3, 8003dd0 <_free_r+0x2c>
 8003dc2:	6063      	str	r3, [r4, #4]
 8003dc4:	6014      	str	r4, [r2, #0]
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dcc:	f000 b8dc 	b.w	8003f88 <__malloc_unlock>
 8003dd0:	42a3      	cmp	r3, r4
 8003dd2:	d908      	bls.n	8003de6 <_free_r+0x42>
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	1821      	adds	r1, r4, r0
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	bf01      	itttt	eq
 8003ddc:	6819      	ldreq	r1, [r3, #0]
 8003dde:	685b      	ldreq	r3, [r3, #4]
 8003de0:	1809      	addeq	r1, r1, r0
 8003de2:	6021      	streq	r1, [r4, #0]
 8003de4:	e7ed      	b.n	8003dc2 <_free_r+0x1e>
 8003de6:	461a      	mov	r2, r3
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	b10b      	cbz	r3, 8003df0 <_free_r+0x4c>
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d9fa      	bls.n	8003de6 <_free_r+0x42>
 8003df0:	6811      	ldr	r1, [r2, #0]
 8003df2:	1850      	adds	r0, r2, r1
 8003df4:	42a0      	cmp	r0, r4
 8003df6:	d10b      	bne.n	8003e10 <_free_r+0x6c>
 8003df8:	6820      	ldr	r0, [r4, #0]
 8003dfa:	4401      	add	r1, r0
 8003dfc:	1850      	adds	r0, r2, r1
 8003dfe:	4283      	cmp	r3, r0
 8003e00:	6011      	str	r1, [r2, #0]
 8003e02:	d1e0      	bne.n	8003dc6 <_free_r+0x22>
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	6053      	str	r3, [r2, #4]
 8003e0a:	4408      	add	r0, r1
 8003e0c:	6010      	str	r0, [r2, #0]
 8003e0e:	e7da      	b.n	8003dc6 <_free_r+0x22>
 8003e10:	d902      	bls.n	8003e18 <_free_r+0x74>
 8003e12:	230c      	movs	r3, #12
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	e7d6      	b.n	8003dc6 <_free_r+0x22>
 8003e18:	6820      	ldr	r0, [r4, #0]
 8003e1a:	1821      	adds	r1, r4, r0
 8003e1c:	428b      	cmp	r3, r1
 8003e1e:	bf04      	itt	eq
 8003e20:	6819      	ldreq	r1, [r3, #0]
 8003e22:	685b      	ldreq	r3, [r3, #4]
 8003e24:	6063      	str	r3, [r4, #4]
 8003e26:	bf04      	itt	eq
 8003e28:	1809      	addeq	r1, r1, r0
 8003e2a:	6021      	streq	r1, [r4, #0]
 8003e2c:	6054      	str	r4, [r2, #4]
 8003e2e:	e7ca      	b.n	8003dc6 <_free_r+0x22>
 8003e30:	bd38      	pop	{r3, r4, r5, pc}
 8003e32:	bf00      	nop
 8003e34:	200004a0 	.word	0x200004a0

08003e38 <sbrk_aligned>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	4e0f      	ldr	r6, [pc, #60]	@ (8003e78 <sbrk_aligned+0x40>)
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	6831      	ldr	r1, [r6, #0]
 8003e40:	4605      	mov	r5, r0
 8003e42:	b911      	cbnz	r1, 8003e4a <sbrk_aligned+0x12>
 8003e44:	f000 fba4 	bl	8004590 <_sbrk_r>
 8003e48:	6030      	str	r0, [r6, #0]
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	f000 fb9f 	bl	8004590 <_sbrk_r>
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	d103      	bne.n	8003e5e <sbrk_aligned+0x26>
 8003e56:	f04f 34ff 	mov.w	r4, #4294967295
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	bd70      	pop	{r4, r5, r6, pc}
 8003e5e:	1cc4      	adds	r4, r0, #3
 8003e60:	f024 0403 	bic.w	r4, r4, #3
 8003e64:	42a0      	cmp	r0, r4
 8003e66:	d0f8      	beq.n	8003e5a <sbrk_aligned+0x22>
 8003e68:	1a21      	subs	r1, r4, r0
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f000 fb90 	bl	8004590 <_sbrk_r>
 8003e70:	3001      	adds	r0, #1
 8003e72:	d1f2      	bne.n	8003e5a <sbrk_aligned+0x22>
 8003e74:	e7ef      	b.n	8003e56 <sbrk_aligned+0x1e>
 8003e76:	bf00      	nop
 8003e78:	2000049c 	.word	0x2000049c

08003e7c <_malloc_r>:
 8003e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e80:	1ccd      	adds	r5, r1, #3
 8003e82:	f025 0503 	bic.w	r5, r5, #3
 8003e86:	3508      	adds	r5, #8
 8003e88:	2d0c      	cmp	r5, #12
 8003e8a:	bf38      	it	cc
 8003e8c:	250c      	movcc	r5, #12
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	4606      	mov	r6, r0
 8003e92:	db01      	blt.n	8003e98 <_malloc_r+0x1c>
 8003e94:	42a9      	cmp	r1, r5
 8003e96:	d904      	bls.n	8003ea2 <_malloc_r+0x26>
 8003e98:	230c      	movs	r3, #12
 8003e9a:	6033      	str	r3, [r6, #0]
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f78 <_malloc_r+0xfc>
 8003ea6:	f000 f869 	bl	8003f7c <__malloc_lock>
 8003eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8003eae:	461c      	mov	r4, r3
 8003eb0:	bb44      	cbnz	r4, 8003f04 <_malloc_r+0x88>
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	f7ff ffbf 	bl	8003e38 <sbrk_aligned>
 8003eba:	1c43      	adds	r3, r0, #1
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	d158      	bne.n	8003f72 <_malloc_r+0xf6>
 8003ec0:	f8d8 4000 	ldr.w	r4, [r8]
 8003ec4:	4627      	mov	r7, r4
 8003ec6:	2f00      	cmp	r7, #0
 8003ec8:	d143      	bne.n	8003f52 <_malloc_r+0xd6>
 8003eca:	2c00      	cmp	r4, #0
 8003ecc:	d04b      	beq.n	8003f66 <_malloc_r+0xea>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	4639      	mov	r1, r7
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	eb04 0903 	add.w	r9, r4, r3
 8003ed8:	f000 fb5a 	bl	8004590 <_sbrk_r>
 8003edc:	4581      	cmp	r9, r0
 8003ede:	d142      	bne.n	8003f66 <_malloc_r+0xea>
 8003ee0:	6821      	ldr	r1, [r4, #0]
 8003ee2:	1a6d      	subs	r5, r5, r1
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f7ff ffa6 	bl	8003e38 <sbrk_aligned>
 8003eec:	3001      	adds	r0, #1
 8003eee:	d03a      	beq.n	8003f66 <_malloc_r+0xea>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	442b      	add	r3, r5
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	bb62      	cbnz	r2, 8003f58 <_malloc_r+0xdc>
 8003efe:	f8c8 7000 	str.w	r7, [r8]
 8003f02:	e00f      	b.n	8003f24 <_malloc_r+0xa8>
 8003f04:	6822      	ldr	r2, [r4, #0]
 8003f06:	1b52      	subs	r2, r2, r5
 8003f08:	d420      	bmi.n	8003f4c <_malloc_r+0xd0>
 8003f0a:	2a0b      	cmp	r2, #11
 8003f0c:	d917      	bls.n	8003f3e <_malloc_r+0xc2>
 8003f0e:	1961      	adds	r1, r4, r5
 8003f10:	42a3      	cmp	r3, r4
 8003f12:	6025      	str	r5, [r4, #0]
 8003f14:	bf18      	it	ne
 8003f16:	6059      	strne	r1, [r3, #4]
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	bf08      	it	eq
 8003f1c:	f8c8 1000 	streq.w	r1, [r8]
 8003f20:	5162      	str	r2, [r4, r5]
 8003f22:	604b      	str	r3, [r1, #4]
 8003f24:	4630      	mov	r0, r6
 8003f26:	f000 f82f 	bl	8003f88 <__malloc_unlock>
 8003f2a:	f104 000b 	add.w	r0, r4, #11
 8003f2e:	1d23      	adds	r3, r4, #4
 8003f30:	f020 0007 	bic.w	r0, r0, #7
 8003f34:	1ac2      	subs	r2, r0, r3
 8003f36:	bf1c      	itt	ne
 8003f38:	1a1b      	subne	r3, r3, r0
 8003f3a:	50a3      	strne	r3, [r4, r2]
 8003f3c:	e7af      	b.n	8003e9e <_malloc_r+0x22>
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	42a3      	cmp	r3, r4
 8003f42:	bf0c      	ite	eq
 8003f44:	f8c8 2000 	streq.w	r2, [r8]
 8003f48:	605a      	strne	r2, [r3, #4]
 8003f4a:	e7eb      	b.n	8003f24 <_malloc_r+0xa8>
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	6864      	ldr	r4, [r4, #4]
 8003f50:	e7ae      	b.n	8003eb0 <_malloc_r+0x34>
 8003f52:	463c      	mov	r4, r7
 8003f54:	687f      	ldr	r7, [r7, #4]
 8003f56:	e7b6      	b.n	8003ec6 <_malloc_r+0x4a>
 8003f58:	461a      	mov	r2, r3
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	d1fb      	bne.n	8003f58 <_malloc_r+0xdc>
 8003f60:	2300      	movs	r3, #0
 8003f62:	6053      	str	r3, [r2, #4]
 8003f64:	e7de      	b.n	8003f24 <_malloc_r+0xa8>
 8003f66:	230c      	movs	r3, #12
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f000 f80c 	bl	8003f88 <__malloc_unlock>
 8003f70:	e794      	b.n	8003e9c <_malloc_r+0x20>
 8003f72:	6005      	str	r5, [r0, #0]
 8003f74:	e7d6      	b.n	8003f24 <_malloc_r+0xa8>
 8003f76:	bf00      	nop
 8003f78:	200004a0 	.word	0x200004a0

08003f7c <__malloc_lock>:
 8003f7c:	4801      	ldr	r0, [pc, #4]	@ (8003f84 <__malloc_lock+0x8>)
 8003f7e:	f7ff bf0f 	b.w	8003da0 <__retarget_lock_acquire_recursive>
 8003f82:	bf00      	nop
 8003f84:	20000498 	.word	0x20000498

08003f88 <__malloc_unlock>:
 8003f88:	4801      	ldr	r0, [pc, #4]	@ (8003f90 <__malloc_unlock+0x8>)
 8003f8a:	f7ff bf0a 	b.w	8003da2 <__retarget_lock_release_recursive>
 8003f8e:	bf00      	nop
 8003f90:	20000498 	.word	0x20000498

08003f94 <__ssputs_r>:
 8003f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	688e      	ldr	r6, [r1, #8]
 8003f9a:	461f      	mov	r7, r3
 8003f9c:	42be      	cmp	r6, r7
 8003f9e:	680b      	ldr	r3, [r1, #0]
 8003fa0:	4682      	mov	sl, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	4690      	mov	r8, r2
 8003fa6:	d82d      	bhi.n	8004004 <__ssputs_r+0x70>
 8003fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003fb0:	d026      	beq.n	8004000 <__ssputs_r+0x6c>
 8003fb2:	6965      	ldr	r5, [r4, #20]
 8003fb4:	6909      	ldr	r1, [r1, #16]
 8003fb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fba:	eba3 0901 	sub.w	r9, r3, r1
 8003fbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fc2:	1c7b      	adds	r3, r7, #1
 8003fc4:	444b      	add	r3, r9
 8003fc6:	106d      	asrs	r5, r5, #1
 8003fc8:	429d      	cmp	r5, r3
 8003fca:	bf38      	it	cc
 8003fcc:	461d      	movcc	r5, r3
 8003fce:	0553      	lsls	r3, r2, #21
 8003fd0:	d527      	bpl.n	8004022 <__ssputs_r+0x8e>
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	f7ff ff52 	bl	8003e7c <_malloc_r>
 8003fd8:	4606      	mov	r6, r0
 8003fda:	b360      	cbz	r0, 8004036 <__ssputs_r+0xa2>
 8003fdc:	6921      	ldr	r1, [r4, #16]
 8003fde:	464a      	mov	r2, r9
 8003fe0:	f000 fae6 	bl	80045b0 <memcpy>
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fee:	81a3      	strh	r3, [r4, #12]
 8003ff0:	6126      	str	r6, [r4, #16]
 8003ff2:	6165      	str	r5, [r4, #20]
 8003ff4:	444e      	add	r6, r9
 8003ff6:	eba5 0509 	sub.w	r5, r5, r9
 8003ffa:	6026      	str	r6, [r4, #0]
 8003ffc:	60a5      	str	r5, [r4, #8]
 8003ffe:	463e      	mov	r6, r7
 8004000:	42be      	cmp	r6, r7
 8004002:	d900      	bls.n	8004006 <__ssputs_r+0x72>
 8004004:	463e      	mov	r6, r7
 8004006:	6820      	ldr	r0, [r4, #0]
 8004008:	4632      	mov	r2, r6
 800400a:	4641      	mov	r1, r8
 800400c:	f000 faa6 	bl	800455c <memmove>
 8004010:	68a3      	ldr	r3, [r4, #8]
 8004012:	1b9b      	subs	r3, r3, r6
 8004014:	60a3      	str	r3, [r4, #8]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	4433      	add	r3, r6
 800401a:	6023      	str	r3, [r4, #0]
 800401c:	2000      	movs	r0, #0
 800401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004022:	462a      	mov	r2, r5
 8004024:	f000 fad2 	bl	80045cc <_realloc_r>
 8004028:	4606      	mov	r6, r0
 800402a:	2800      	cmp	r0, #0
 800402c:	d1e0      	bne.n	8003ff0 <__ssputs_r+0x5c>
 800402e:	6921      	ldr	r1, [r4, #16]
 8004030:	4650      	mov	r0, sl
 8004032:	f7ff feb7 	bl	8003da4 <_free_r>
 8004036:	230c      	movs	r3, #12
 8004038:	f8ca 3000 	str.w	r3, [sl]
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	e7e9      	b.n	800401e <__ssputs_r+0x8a>
	...

0800404c <_svfiprintf_r>:
 800404c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004050:	4698      	mov	r8, r3
 8004052:	898b      	ldrh	r3, [r1, #12]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	b09d      	sub	sp, #116	@ 0x74
 8004058:	4607      	mov	r7, r0
 800405a:	460d      	mov	r5, r1
 800405c:	4614      	mov	r4, r2
 800405e:	d510      	bpl.n	8004082 <_svfiprintf_r+0x36>
 8004060:	690b      	ldr	r3, [r1, #16]
 8004062:	b973      	cbnz	r3, 8004082 <_svfiprintf_r+0x36>
 8004064:	2140      	movs	r1, #64	@ 0x40
 8004066:	f7ff ff09 	bl	8003e7c <_malloc_r>
 800406a:	6028      	str	r0, [r5, #0]
 800406c:	6128      	str	r0, [r5, #16]
 800406e:	b930      	cbnz	r0, 800407e <_svfiprintf_r+0x32>
 8004070:	230c      	movs	r3, #12
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	f04f 30ff 	mov.w	r0, #4294967295
 8004078:	b01d      	add	sp, #116	@ 0x74
 800407a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407e:	2340      	movs	r3, #64	@ 0x40
 8004080:	616b      	str	r3, [r5, #20]
 8004082:	2300      	movs	r3, #0
 8004084:	9309      	str	r3, [sp, #36]	@ 0x24
 8004086:	2320      	movs	r3, #32
 8004088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800408c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004090:	2330      	movs	r3, #48	@ 0x30
 8004092:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004230 <_svfiprintf_r+0x1e4>
 8004096:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800409a:	f04f 0901 	mov.w	r9, #1
 800409e:	4623      	mov	r3, r4
 80040a0:	469a      	mov	sl, r3
 80040a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040a6:	b10a      	cbz	r2, 80040ac <_svfiprintf_r+0x60>
 80040a8:	2a25      	cmp	r2, #37	@ 0x25
 80040aa:	d1f9      	bne.n	80040a0 <_svfiprintf_r+0x54>
 80040ac:	ebba 0b04 	subs.w	fp, sl, r4
 80040b0:	d00b      	beq.n	80040ca <_svfiprintf_r+0x7e>
 80040b2:	465b      	mov	r3, fp
 80040b4:	4622      	mov	r2, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	4638      	mov	r0, r7
 80040ba:	f7ff ff6b 	bl	8003f94 <__ssputs_r>
 80040be:	3001      	adds	r0, #1
 80040c0:	f000 80a7 	beq.w	8004212 <_svfiprintf_r+0x1c6>
 80040c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040c6:	445a      	add	r2, fp
 80040c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80040ca:	f89a 3000 	ldrb.w	r3, [sl]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 809f 	beq.w	8004212 <_svfiprintf_r+0x1c6>
 80040d4:	2300      	movs	r3, #0
 80040d6:	f04f 32ff 	mov.w	r2, #4294967295
 80040da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040de:	f10a 0a01 	add.w	sl, sl, #1
 80040e2:	9304      	str	r3, [sp, #16]
 80040e4:	9307      	str	r3, [sp, #28]
 80040e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80040ec:	4654      	mov	r4, sl
 80040ee:	2205      	movs	r2, #5
 80040f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f4:	484e      	ldr	r0, [pc, #312]	@ (8004230 <_svfiprintf_r+0x1e4>)
 80040f6:	f7fc f893 	bl	8000220 <memchr>
 80040fa:	9a04      	ldr	r2, [sp, #16]
 80040fc:	b9d8      	cbnz	r0, 8004136 <_svfiprintf_r+0xea>
 80040fe:	06d0      	lsls	r0, r2, #27
 8004100:	bf44      	itt	mi
 8004102:	2320      	movmi	r3, #32
 8004104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004108:	0711      	lsls	r1, r2, #28
 800410a:	bf44      	itt	mi
 800410c:	232b      	movmi	r3, #43	@ 0x2b
 800410e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004112:	f89a 3000 	ldrb.w	r3, [sl]
 8004116:	2b2a      	cmp	r3, #42	@ 0x2a
 8004118:	d015      	beq.n	8004146 <_svfiprintf_r+0xfa>
 800411a:	9a07      	ldr	r2, [sp, #28]
 800411c:	4654      	mov	r4, sl
 800411e:	2000      	movs	r0, #0
 8004120:	f04f 0c0a 	mov.w	ip, #10
 8004124:	4621      	mov	r1, r4
 8004126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800412a:	3b30      	subs	r3, #48	@ 0x30
 800412c:	2b09      	cmp	r3, #9
 800412e:	d94b      	bls.n	80041c8 <_svfiprintf_r+0x17c>
 8004130:	b1b0      	cbz	r0, 8004160 <_svfiprintf_r+0x114>
 8004132:	9207      	str	r2, [sp, #28]
 8004134:	e014      	b.n	8004160 <_svfiprintf_r+0x114>
 8004136:	eba0 0308 	sub.w	r3, r0, r8
 800413a:	fa09 f303 	lsl.w	r3, r9, r3
 800413e:	4313      	orrs	r3, r2
 8004140:	9304      	str	r3, [sp, #16]
 8004142:	46a2      	mov	sl, r4
 8004144:	e7d2      	b.n	80040ec <_svfiprintf_r+0xa0>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	1d19      	adds	r1, r3, #4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	9103      	str	r1, [sp, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	bfbb      	ittet	lt
 8004152:	425b      	neglt	r3, r3
 8004154:	f042 0202 	orrlt.w	r2, r2, #2
 8004158:	9307      	strge	r3, [sp, #28]
 800415a:	9307      	strlt	r3, [sp, #28]
 800415c:	bfb8      	it	lt
 800415e:	9204      	strlt	r2, [sp, #16]
 8004160:	7823      	ldrb	r3, [r4, #0]
 8004162:	2b2e      	cmp	r3, #46	@ 0x2e
 8004164:	d10a      	bne.n	800417c <_svfiprintf_r+0x130>
 8004166:	7863      	ldrb	r3, [r4, #1]
 8004168:	2b2a      	cmp	r3, #42	@ 0x2a
 800416a:	d132      	bne.n	80041d2 <_svfiprintf_r+0x186>
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	1d1a      	adds	r2, r3, #4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	9203      	str	r2, [sp, #12]
 8004174:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004178:	3402      	adds	r4, #2
 800417a:	9305      	str	r3, [sp, #20]
 800417c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004240 <_svfiprintf_r+0x1f4>
 8004180:	7821      	ldrb	r1, [r4, #0]
 8004182:	2203      	movs	r2, #3
 8004184:	4650      	mov	r0, sl
 8004186:	f7fc f84b 	bl	8000220 <memchr>
 800418a:	b138      	cbz	r0, 800419c <_svfiprintf_r+0x150>
 800418c:	9b04      	ldr	r3, [sp, #16]
 800418e:	eba0 000a 	sub.w	r0, r0, sl
 8004192:	2240      	movs	r2, #64	@ 0x40
 8004194:	4082      	lsls	r2, r0
 8004196:	4313      	orrs	r3, r2
 8004198:	3401      	adds	r4, #1
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041a0:	4824      	ldr	r0, [pc, #144]	@ (8004234 <_svfiprintf_r+0x1e8>)
 80041a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041a6:	2206      	movs	r2, #6
 80041a8:	f7fc f83a 	bl	8000220 <memchr>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d036      	beq.n	800421e <_svfiprintf_r+0x1d2>
 80041b0:	4b21      	ldr	r3, [pc, #132]	@ (8004238 <_svfiprintf_r+0x1ec>)
 80041b2:	bb1b      	cbnz	r3, 80041fc <_svfiprintf_r+0x1b0>
 80041b4:	9b03      	ldr	r3, [sp, #12]
 80041b6:	3307      	adds	r3, #7
 80041b8:	f023 0307 	bic.w	r3, r3, #7
 80041bc:	3308      	adds	r3, #8
 80041be:	9303      	str	r3, [sp, #12]
 80041c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041c2:	4433      	add	r3, r6
 80041c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041c6:	e76a      	b.n	800409e <_svfiprintf_r+0x52>
 80041c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80041cc:	460c      	mov	r4, r1
 80041ce:	2001      	movs	r0, #1
 80041d0:	e7a8      	b.n	8004124 <_svfiprintf_r+0xd8>
 80041d2:	2300      	movs	r3, #0
 80041d4:	3401      	adds	r4, #1
 80041d6:	9305      	str	r3, [sp, #20]
 80041d8:	4619      	mov	r1, r3
 80041da:	f04f 0c0a 	mov.w	ip, #10
 80041de:	4620      	mov	r0, r4
 80041e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041e4:	3a30      	subs	r2, #48	@ 0x30
 80041e6:	2a09      	cmp	r2, #9
 80041e8:	d903      	bls.n	80041f2 <_svfiprintf_r+0x1a6>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0c6      	beq.n	800417c <_svfiprintf_r+0x130>
 80041ee:	9105      	str	r1, [sp, #20]
 80041f0:	e7c4      	b.n	800417c <_svfiprintf_r+0x130>
 80041f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041f6:	4604      	mov	r4, r0
 80041f8:	2301      	movs	r3, #1
 80041fa:	e7f0      	b.n	80041de <_svfiprintf_r+0x192>
 80041fc:	ab03      	add	r3, sp, #12
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	462a      	mov	r2, r5
 8004202:	4b0e      	ldr	r3, [pc, #56]	@ (800423c <_svfiprintf_r+0x1f0>)
 8004204:	a904      	add	r1, sp, #16
 8004206:	4638      	mov	r0, r7
 8004208:	f3af 8000 	nop.w
 800420c:	1c42      	adds	r2, r0, #1
 800420e:	4606      	mov	r6, r0
 8004210:	d1d6      	bne.n	80041c0 <_svfiprintf_r+0x174>
 8004212:	89ab      	ldrh	r3, [r5, #12]
 8004214:	065b      	lsls	r3, r3, #25
 8004216:	f53f af2d 	bmi.w	8004074 <_svfiprintf_r+0x28>
 800421a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800421c:	e72c      	b.n	8004078 <_svfiprintf_r+0x2c>
 800421e:	ab03      	add	r3, sp, #12
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	462a      	mov	r2, r5
 8004224:	4b05      	ldr	r3, [pc, #20]	@ (800423c <_svfiprintf_r+0x1f0>)
 8004226:	a904      	add	r1, sp, #16
 8004228:	4638      	mov	r0, r7
 800422a:	f000 f879 	bl	8004320 <_printf_i>
 800422e:	e7ed      	b.n	800420c <_svfiprintf_r+0x1c0>
 8004230:	08004880 	.word	0x08004880
 8004234:	0800488a 	.word	0x0800488a
 8004238:	00000000 	.word	0x00000000
 800423c:	08003f95 	.word	0x08003f95
 8004240:	08004886 	.word	0x08004886

08004244 <_printf_common>:
 8004244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	4616      	mov	r6, r2
 800424a:	4698      	mov	r8, r3
 800424c:	688a      	ldr	r2, [r1, #8]
 800424e:	690b      	ldr	r3, [r1, #16]
 8004250:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004254:	4293      	cmp	r3, r2
 8004256:	bfb8      	it	lt
 8004258:	4613      	movlt	r3, r2
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004260:	4607      	mov	r7, r0
 8004262:	460c      	mov	r4, r1
 8004264:	b10a      	cbz	r2, 800426a <_printf_common+0x26>
 8004266:	3301      	adds	r3, #1
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	0699      	lsls	r1, r3, #26
 800426e:	bf42      	ittt	mi
 8004270:	6833      	ldrmi	r3, [r6, #0]
 8004272:	3302      	addmi	r3, #2
 8004274:	6033      	strmi	r3, [r6, #0]
 8004276:	6825      	ldr	r5, [r4, #0]
 8004278:	f015 0506 	ands.w	r5, r5, #6
 800427c:	d106      	bne.n	800428c <_printf_common+0x48>
 800427e:	f104 0a19 	add.w	sl, r4, #25
 8004282:	68e3      	ldr	r3, [r4, #12]
 8004284:	6832      	ldr	r2, [r6, #0]
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	42ab      	cmp	r3, r5
 800428a:	dc26      	bgt.n	80042da <_printf_common+0x96>
 800428c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004290:	6822      	ldr	r2, [r4, #0]
 8004292:	3b00      	subs	r3, #0
 8004294:	bf18      	it	ne
 8004296:	2301      	movne	r3, #1
 8004298:	0692      	lsls	r2, r2, #26
 800429a:	d42b      	bmi.n	80042f4 <_printf_common+0xb0>
 800429c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042a0:	4641      	mov	r1, r8
 80042a2:	4638      	mov	r0, r7
 80042a4:	47c8      	blx	r9
 80042a6:	3001      	adds	r0, #1
 80042a8:	d01e      	beq.n	80042e8 <_printf_common+0xa4>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	6922      	ldr	r2, [r4, #16]
 80042ae:	f003 0306 	and.w	r3, r3, #6
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	bf02      	ittt	eq
 80042b6:	68e5      	ldreq	r5, [r4, #12]
 80042b8:	6833      	ldreq	r3, [r6, #0]
 80042ba:	1aed      	subeq	r5, r5, r3
 80042bc:	68a3      	ldr	r3, [r4, #8]
 80042be:	bf0c      	ite	eq
 80042c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042c4:	2500      	movne	r5, #0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	bfc4      	itt	gt
 80042ca:	1a9b      	subgt	r3, r3, r2
 80042cc:	18ed      	addgt	r5, r5, r3
 80042ce:	2600      	movs	r6, #0
 80042d0:	341a      	adds	r4, #26
 80042d2:	42b5      	cmp	r5, r6
 80042d4:	d11a      	bne.n	800430c <_printf_common+0xc8>
 80042d6:	2000      	movs	r0, #0
 80042d8:	e008      	b.n	80042ec <_printf_common+0xa8>
 80042da:	2301      	movs	r3, #1
 80042dc:	4652      	mov	r2, sl
 80042de:	4641      	mov	r1, r8
 80042e0:	4638      	mov	r0, r7
 80042e2:	47c8      	blx	r9
 80042e4:	3001      	adds	r0, #1
 80042e6:	d103      	bne.n	80042f0 <_printf_common+0xac>
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f0:	3501      	adds	r5, #1
 80042f2:	e7c6      	b.n	8004282 <_printf_common+0x3e>
 80042f4:	18e1      	adds	r1, r4, r3
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	2030      	movs	r0, #48	@ 0x30
 80042fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042fe:	4422      	add	r2, r4
 8004300:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004308:	3302      	adds	r3, #2
 800430a:	e7c7      	b.n	800429c <_printf_common+0x58>
 800430c:	2301      	movs	r3, #1
 800430e:	4622      	mov	r2, r4
 8004310:	4641      	mov	r1, r8
 8004312:	4638      	mov	r0, r7
 8004314:	47c8      	blx	r9
 8004316:	3001      	adds	r0, #1
 8004318:	d0e6      	beq.n	80042e8 <_printf_common+0xa4>
 800431a:	3601      	adds	r6, #1
 800431c:	e7d9      	b.n	80042d2 <_printf_common+0x8e>
	...

08004320 <_printf_i>:
 8004320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	7e0f      	ldrb	r7, [r1, #24]
 8004326:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004328:	2f78      	cmp	r7, #120	@ 0x78
 800432a:	4691      	mov	r9, r2
 800432c:	4680      	mov	r8, r0
 800432e:	460c      	mov	r4, r1
 8004330:	469a      	mov	sl, r3
 8004332:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004336:	d807      	bhi.n	8004348 <_printf_i+0x28>
 8004338:	2f62      	cmp	r7, #98	@ 0x62
 800433a:	d80a      	bhi.n	8004352 <_printf_i+0x32>
 800433c:	2f00      	cmp	r7, #0
 800433e:	f000 80d1 	beq.w	80044e4 <_printf_i+0x1c4>
 8004342:	2f58      	cmp	r7, #88	@ 0x58
 8004344:	f000 80b8 	beq.w	80044b8 <_printf_i+0x198>
 8004348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800434c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004350:	e03a      	b.n	80043c8 <_printf_i+0xa8>
 8004352:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004356:	2b15      	cmp	r3, #21
 8004358:	d8f6      	bhi.n	8004348 <_printf_i+0x28>
 800435a:	a101      	add	r1, pc, #4	@ (adr r1, 8004360 <_printf_i+0x40>)
 800435c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043cd 	.word	0x080043cd
 8004368:	08004349 	.word	0x08004349
 800436c:	08004349 	.word	0x08004349
 8004370:	08004349 	.word	0x08004349
 8004374:	08004349 	.word	0x08004349
 8004378:	080043cd 	.word	0x080043cd
 800437c:	08004349 	.word	0x08004349
 8004380:	08004349 	.word	0x08004349
 8004384:	08004349 	.word	0x08004349
 8004388:	08004349 	.word	0x08004349
 800438c:	080044cb 	.word	0x080044cb
 8004390:	080043f7 	.word	0x080043f7
 8004394:	08004485 	.word	0x08004485
 8004398:	08004349 	.word	0x08004349
 800439c:	08004349 	.word	0x08004349
 80043a0:	080044ed 	.word	0x080044ed
 80043a4:	08004349 	.word	0x08004349
 80043a8:	080043f7 	.word	0x080043f7
 80043ac:	08004349 	.word	0x08004349
 80043b0:	08004349 	.word	0x08004349
 80043b4:	0800448d 	.word	0x0800448d
 80043b8:	6833      	ldr	r3, [r6, #0]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6032      	str	r2, [r6, #0]
 80043c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043c8:	2301      	movs	r3, #1
 80043ca:	e09c      	b.n	8004506 <_printf_i+0x1e6>
 80043cc:	6833      	ldr	r3, [r6, #0]
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	1d19      	adds	r1, r3, #4
 80043d2:	6031      	str	r1, [r6, #0]
 80043d4:	0606      	lsls	r6, r0, #24
 80043d6:	d501      	bpl.n	80043dc <_printf_i+0xbc>
 80043d8:	681d      	ldr	r5, [r3, #0]
 80043da:	e003      	b.n	80043e4 <_printf_i+0xc4>
 80043dc:	0645      	lsls	r5, r0, #25
 80043de:	d5fb      	bpl.n	80043d8 <_printf_i+0xb8>
 80043e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043e4:	2d00      	cmp	r5, #0
 80043e6:	da03      	bge.n	80043f0 <_printf_i+0xd0>
 80043e8:	232d      	movs	r3, #45	@ 0x2d
 80043ea:	426d      	negs	r5, r5
 80043ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043f0:	4858      	ldr	r0, [pc, #352]	@ (8004554 <_printf_i+0x234>)
 80043f2:	230a      	movs	r3, #10
 80043f4:	e011      	b.n	800441a <_printf_i+0xfa>
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	6833      	ldr	r3, [r6, #0]
 80043fa:	0608      	lsls	r0, r1, #24
 80043fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004400:	d402      	bmi.n	8004408 <_printf_i+0xe8>
 8004402:	0649      	lsls	r1, r1, #25
 8004404:	bf48      	it	mi
 8004406:	b2ad      	uxthmi	r5, r5
 8004408:	2f6f      	cmp	r7, #111	@ 0x6f
 800440a:	4852      	ldr	r0, [pc, #328]	@ (8004554 <_printf_i+0x234>)
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	bf14      	ite	ne
 8004410:	230a      	movne	r3, #10
 8004412:	2308      	moveq	r3, #8
 8004414:	2100      	movs	r1, #0
 8004416:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800441a:	6866      	ldr	r6, [r4, #4]
 800441c:	60a6      	str	r6, [r4, #8]
 800441e:	2e00      	cmp	r6, #0
 8004420:	db05      	blt.n	800442e <_printf_i+0x10e>
 8004422:	6821      	ldr	r1, [r4, #0]
 8004424:	432e      	orrs	r6, r5
 8004426:	f021 0104 	bic.w	r1, r1, #4
 800442a:	6021      	str	r1, [r4, #0]
 800442c:	d04b      	beq.n	80044c6 <_printf_i+0x1a6>
 800442e:	4616      	mov	r6, r2
 8004430:	fbb5 f1f3 	udiv	r1, r5, r3
 8004434:	fb03 5711 	mls	r7, r3, r1, r5
 8004438:	5dc7      	ldrb	r7, [r0, r7]
 800443a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800443e:	462f      	mov	r7, r5
 8004440:	42bb      	cmp	r3, r7
 8004442:	460d      	mov	r5, r1
 8004444:	d9f4      	bls.n	8004430 <_printf_i+0x110>
 8004446:	2b08      	cmp	r3, #8
 8004448:	d10b      	bne.n	8004462 <_printf_i+0x142>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	07df      	lsls	r7, r3, #31
 800444e:	d508      	bpl.n	8004462 <_printf_i+0x142>
 8004450:	6923      	ldr	r3, [r4, #16]
 8004452:	6861      	ldr	r1, [r4, #4]
 8004454:	4299      	cmp	r1, r3
 8004456:	bfde      	ittt	le
 8004458:	2330      	movle	r3, #48	@ 0x30
 800445a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800445e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004462:	1b92      	subs	r2, r2, r6
 8004464:	6122      	str	r2, [r4, #16]
 8004466:	f8cd a000 	str.w	sl, [sp]
 800446a:	464b      	mov	r3, r9
 800446c:	aa03      	add	r2, sp, #12
 800446e:	4621      	mov	r1, r4
 8004470:	4640      	mov	r0, r8
 8004472:	f7ff fee7 	bl	8004244 <_printf_common>
 8004476:	3001      	adds	r0, #1
 8004478:	d14a      	bne.n	8004510 <_printf_i+0x1f0>
 800447a:	f04f 30ff 	mov.w	r0, #4294967295
 800447e:	b004      	add	sp, #16
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	f043 0320 	orr.w	r3, r3, #32
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	4832      	ldr	r0, [pc, #200]	@ (8004558 <_printf_i+0x238>)
 800448e:	2778      	movs	r7, #120	@ 0x78
 8004490:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	6831      	ldr	r1, [r6, #0]
 8004498:	061f      	lsls	r7, r3, #24
 800449a:	f851 5b04 	ldr.w	r5, [r1], #4
 800449e:	d402      	bmi.n	80044a6 <_printf_i+0x186>
 80044a0:	065f      	lsls	r7, r3, #25
 80044a2:	bf48      	it	mi
 80044a4:	b2ad      	uxthmi	r5, r5
 80044a6:	6031      	str	r1, [r6, #0]
 80044a8:	07d9      	lsls	r1, r3, #31
 80044aa:	bf44      	itt	mi
 80044ac:	f043 0320 	orrmi.w	r3, r3, #32
 80044b0:	6023      	strmi	r3, [r4, #0]
 80044b2:	b11d      	cbz	r5, 80044bc <_printf_i+0x19c>
 80044b4:	2310      	movs	r3, #16
 80044b6:	e7ad      	b.n	8004414 <_printf_i+0xf4>
 80044b8:	4826      	ldr	r0, [pc, #152]	@ (8004554 <_printf_i+0x234>)
 80044ba:	e7e9      	b.n	8004490 <_printf_i+0x170>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	f023 0320 	bic.w	r3, r3, #32
 80044c2:	6023      	str	r3, [r4, #0]
 80044c4:	e7f6      	b.n	80044b4 <_printf_i+0x194>
 80044c6:	4616      	mov	r6, r2
 80044c8:	e7bd      	b.n	8004446 <_printf_i+0x126>
 80044ca:	6833      	ldr	r3, [r6, #0]
 80044cc:	6825      	ldr	r5, [r4, #0]
 80044ce:	6961      	ldr	r1, [r4, #20]
 80044d0:	1d18      	adds	r0, r3, #4
 80044d2:	6030      	str	r0, [r6, #0]
 80044d4:	062e      	lsls	r6, r5, #24
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	d501      	bpl.n	80044de <_printf_i+0x1be>
 80044da:	6019      	str	r1, [r3, #0]
 80044dc:	e002      	b.n	80044e4 <_printf_i+0x1c4>
 80044de:	0668      	lsls	r0, r5, #25
 80044e0:	d5fb      	bpl.n	80044da <_printf_i+0x1ba>
 80044e2:	8019      	strh	r1, [r3, #0]
 80044e4:	2300      	movs	r3, #0
 80044e6:	6123      	str	r3, [r4, #16]
 80044e8:	4616      	mov	r6, r2
 80044ea:	e7bc      	b.n	8004466 <_printf_i+0x146>
 80044ec:	6833      	ldr	r3, [r6, #0]
 80044ee:	1d1a      	adds	r2, r3, #4
 80044f0:	6032      	str	r2, [r6, #0]
 80044f2:	681e      	ldr	r6, [r3, #0]
 80044f4:	6862      	ldr	r2, [r4, #4]
 80044f6:	2100      	movs	r1, #0
 80044f8:	4630      	mov	r0, r6
 80044fa:	f7fb fe91 	bl	8000220 <memchr>
 80044fe:	b108      	cbz	r0, 8004504 <_printf_i+0x1e4>
 8004500:	1b80      	subs	r0, r0, r6
 8004502:	6060      	str	r0, [r4, #4]
 8004504:	6863      	ldr	r3, [r4, #4]
 8004506:	6123      	str	r3, [r4, #16]
 8004508:	2300      	movs	r3, #0
 800450a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800450e:	e7aa      	b.n	8004466 <_printf_i+0x146>
 8004510:	6923      	ldr	r3, [r4, #16]
 8004512:	4632      	mov	r2, r6
 8004514:	4649      	mov	r1, r9
 8004516:	4640      	mov	r0, r8
 8004518:	47d0      	blx	sl
 800451a:	3001      	adds	r0, #1
 800451c:	d0ad      	beq.n	800447a <_printf_i+0x15a>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	079b      	lsls	r3, r3, #30
 8004522:	d413      	bmi.n	800454c <_printf_i+0x22c>
 8004524:	68e0      	ldr	r0, [r4, #12]
 8004526:	9b03      	ldr	r3, [sp, #12]
 8004528:	4298      	cmp	r0, r3
 800452a:	bfb8      	it	lt
 800452c:	4618      	movlt	r0, r3
 800452e:	e7a6      	b.n	800447e <_printf_i+0x15e>
 8004530:	2301      	movs	r3, #1
 8004532:	4632      	mov	r2, r6
 8004534:	4649      	mov	r1, r9
 8004536:	4640      	mov	r0, r8
 8004538:	47d0      	blx	sl
 800453a:	3001      	adds	r0, #1
 800453c:	d09d      	beq.n	800447a <_printf_i+0x15a>
 800453e:	3501      	adds	r5, #1
 8004540:	68e3      	ldr	r3, [r4, #12]
 8004542:	9903      	ldr	r1, [sp, #12]
 8004544:	1a5b      	subs	r3, r3, r1
 8004546:	42ab      	cmp	r3, r5
 8004548:	dcf2      	bgt.n	8004530 <_printf_i+0x210>
 800454a:	e7eb      	b.n	8004524 <_printf_i+0x204>
 800454c:	2500      	movs	r5, #0
 800454e:	f104 0619 	add.w	r6, r4, #25
 8004552:	e7f5      	b.n	8004540 <_printf_i+0x220>
 8004554:	08004891 	.word	0x08004891
 8004558:	080048a2 	.word	0x080048a2

0800455c <memmove>:
 800455c:	4288      	cmp	r0, r1
 800455e:	b510      	push	{r4, lr}
 8004560:	eb01 0402 	add.w	r4, r1, r2
 8004564:	d902      	bls.n	800456c <memmove+0x10>
 8004566:	4284      	cmp	r4, r0
 8004568:	4623      	mov	r3, r4
 800456a:	d807      	bhi.n	800457c <memmove+0x20>
 800456c:	1e43      	subs	r3, r0, #1
 800456e:	42a1      	cmp	r1, r4
 8004570:	d008      	beq.n	8004584 <memmove+0x28>
 8004572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800457a:	e7f8      	b.n	800456e <memmove+0x12>
 800457c:	4402      	add	r2, r0
 800457e:	4601      	mov	r1, r0
 8004580:	428a      	cmp	r2, r1
 8004582:	d100      	bne.n	8004586 <memmove+0x2a>
 8004584:	bd10      	pop	{r4, pc}
 8004586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800458a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800458e:	e7f7      	b.n	8004580 <memmove+0x24>

08004590 <_sbrk_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4d06      	ldr	r5, [pc, #24]	@ (80045ac <_sbrk_r+0x1c>)
 8004594:	2300      	movs	r3, #0
 8004596:	4604      	mov	r4, r0
 8004598:	4608      	mov	r0, r1
 800459a:	602b      	str	r3, [r5, #0]
 800459c:	f7fd fb16 	bl	8001bcc <_sbrk>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	d102      	bne.n	80045aa <_sbrk_r+0x1a>
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	b103      	cbz	r3, 80045aa <_sbrk_r+0x1a>
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	20000494 	.word	0x20000494

080045b0 <memcpy>:
 80045b0:	440a      	add	r2, r1
 80045b2:	4291      	cmp	r1, r2
 80045b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045b8:	d100      	bne.n	80045bc <memcpy+0xc>
 80045ba:	4770      	bx	lr
 80045bc:	b510      	push	{r4, lr}
 80045be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045c6:	4291      	cmp	r1, r2
 80045c8:	d1f9      	bne.n	80045be <memcpy+0xe>
 80045ca:	bd10      	pop	{r4, pc}

080045cc <_realloc_r>:
 80045cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d0:	4607      	mov	r7, r0
 80045d2:	4614      	mov	r4, r2
 80045d4:	460d      	mov	r5, r1
 80045d6:	b921      	cbnz	r1, 80045e2 <_realloc_r+0x16>
 80045d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045dc:	4611      	mov	r1, r2
 80045de:	f7ff bc4d 	b.w	8003e7c <_malloc_r>
 80045e2:	b92a      	cbnz	r2, 80045f0 <_realloc_r+0x24>
 80045e4:	f7ff fbde 	bl	8003da4 <_free_r>
 80045e8:	4625      	mov	r5, r4
 80045ea:	4628      	mov	r0, r5
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f0:	f000 f81a 	bl	8004628 <_malloc_usable_size_r>
 80045f4:	4284      	cmp	r4, r0
 80045f6:	4606      	mov	r6, r0
 80045f8:	d802      	bhi.n	8004600 <_realloc_r+0x34>
 80045fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045fe:	d8f4      	bhi.n	80045ea <_realloc_r+0x1e>
 8004600:	4621      	mov	r1, r4
 8004602:	4638      	mov	r0, r7
 8004604:	f7ff fc3a 	bl	8003e7c <_malloc_r>
 8004608:	4680      	mov	r8, r0
 800460a:	b908      	cbnz	r0, 8004610 <_realloc_r+0x44>
 800460c:	4645      	mov	r5, r8
 800460e:	e7ec      	b.n	80045ea <_realloc_r+0x1e>
 8004610:	42b4      	cmp	r4, r6
 8004612:	4622      	mov	r2, r4
 8004614:	4629      	mov	r1, r5
 8004616:	bf28      	it	cs
 8004618:	4632      	movcs	r2, r6
 800461a:	f7ff ffc9 	bl	80045b0 <memcpy>
 800461e:	4629      	mov	r1, r5
 8004620:	4638      	mov	r0, r7
 8004622:	f7ff fbbf 	bl	8003da4 <_free_r>
 8004626:	e7f1      	b.n	800460c <_realloc_r+0x40>

08004628 <_malloc_usable_size_r>:
 8004628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800462c:	1f18      	subs	r0, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	bfbc      	itt	lt
 8004632:	580b      	ldrlt	r3, [r1, r0]
 8004634:	18c0      	addlt	r0, r0, r3
 8004636:	4770      	bx	lr

08004638 <atanf>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	ee10 5a10 	vmov	r5, s0
 800463e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8004642:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8004646:	eef0 7a40 	vmov.f32	s15, s0
 800464a:	d310      	bcc.n	800466e <atanf+0x36>
 800464c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8004650:	d904      	bls.n	800465c <atanf+0x24>
 8004652:	ee70 7a00 	vadd.f32	s15, s0, s0
 8004656:	eeb0 0a67 	vmov.f32	s0, s15
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8004794 <atanf+0x15c>
 8004660:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004798 <atanf+0x160>
 8004664:	2d00      	cmp	r5, #0
 8004666:	bfc8      	it	gt
 8004668:	eef0 7a47 	vmovgt.f32	s15, s14
 800466c:	e7f3      	b.n	8004656 <atanf+0x1e>
 800466e:	4b4b      	ldr	r3, [pc, #300]	@ (800479c <atanf+0x164>)
 8004670:	429c      	cmp	r4, r3
 8004672:	d810      	bhi.n	8004696 <atanf+0x5e>
 8004674:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8004678:	d20a      	bcs.n	8004690 <atanf+0x58>
 800467a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80047a0 <atanf+0x168>
 800467e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8004682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004686:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468e:	dce2      	bgt.n	8004656 <atanf+0x1e>
 8004690:	f04f 33ff 	mov.w	r3, #4294967295
 8004694:	e013      	b.n	80046be <atanf+0x86>
 8004696:	f000 f8a3 	bl	80047e0 <fabsf>
 800469a:	4b42      	ldr	r3, [pc, #264]	@ (80047a4 <atanf+0x16c>)
 800469c:	429c      	cmp	r4, r3
 800469e:	d84f      	bhi.n	8004740 <atanf+0x108>
 80046a0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80046a4:	429c      	cmp	r4, r3
 80046a6:	d841      	bhi.n	800472c <atanf+0xf4>
 80046a8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80046ac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80046b0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80046b4:	2300      	movs	r3, #0
 80046b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80046ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80046c4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80047a8 <atanf+0x170>
 80046c8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80047ac <atanf+0x174>
 80046cc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80047b0 <atanf+0x178>
 80046d0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80046d4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80046d8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80047b4 <atanf+0x17c>
 80046dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80046e0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80047b8 <atanf+0x180>
 80046e4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80046e8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80047bc <atanf+0x184>
 80046ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80046f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80047c0 <atanf+0x188>
 80046f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80046f8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80047c4 <atanf+0x18c>
 80046fc:	eea6 5a87 	vfma.f32	s10, s13, s14
 8004700:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80047c8 <atanf+0x190>
 8004704:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004708:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80047cc <atanf+0x194>
 800470c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8004710:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80047d0 <atanf+0x198>
 8004714:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004718:	ee27 7a26 	vmul.f32	s14, s14, s13
 800471c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004720:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004724:	d121      	bne.n	800476a <atanf+0x132>
 8004726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800472a:	e794      	b.n	8004656 <atanf+0x1e>
 800472c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004730:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004734:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004738:	2301      	movs	r3, #1
 800473a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800473e:	e7be      	b.n	80046be <atanf+0x86>
 8004740:	4b24      	ldr	r3, [pc, #144]	@ (80047d4 <atanf+0x19c>)
 8004742:	429c      	cmp	r4, r3
 8004744:	d80b      	bhi.n	800475e <atanf+0x126>
 8004746:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800474a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800474e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004752:	2302      	movs	r3, #2
 8004754:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800475c:	e7af      	b.n	80046be <atanf+0x86>
 800475e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004762:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004766:	2303      	movs	r3, #3
 8004768:	e7a9      	b.n	80046be <atanf+0x86>
 800476a:	4a1b      	ldr	r2, [pc, #108]	@ (80047d8 <atanf+0x1a0>)
 800476c:	491b      	ldr	r1, [pc, #108]	@ (80047dc <atanf+0x1a4>)
 800476e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004772:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004776:	edd3 6a00 	vldr	s13, [r3]
 800477a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800477e:	2d00      	cmp	r5, #0
 8004780:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004784:	edd2 7a00 	vldr	s15, [r2]
 8004788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800478c:	bfb8      	it	lt
 800478e:	eef1 7a67 	vneglt.f32	s15, s15
 8004792:	e760      	b.n	8004656 <atanf+0x1e>
 8004794:	bfc90fdb 	.word	0xbfc90fdb
 8004798:	3fc90fdb 	.word	0x3fc90fdb
 800479c:	3edfffff 	.word	0x3edfffff
 80047a0:	7149f2ca 	.word	0x7149f2ca
 80047a4:	3f97ffff 	.word	0x3f97ffff
 80047a8:	3c8569d7 	.word	0x3c8569d7
 80047ac:	3d4bda59 	.word	0x3d4bda59
 80047b0:	bd6ef16b 	.word	0xbd6ef16b
 80047b4:	3d886b35 	.word	0x3d886b35
 80047b8:	3dba2e6e 	.word	0x3dba2e6e
 80047bc:	3e124925 	.word	0x3e124925
 80047c0:	3eaaaaab 	.word	0x3eaaaaab
 80047c4:	bd15a221 	.word	0xbd15a221
 80047c8:	bd9d8795 	.word	0xbd9d8795
 80047cc:	bde38e38 	.word	0xbde38e38
 80047d0:	be4ccccd 	.word	0xbe4ccccd
 80047d4:	401bffff 	.word	0x401bffff
 80047d8:	080048c4 	.word	0x080048c4
 80047dc:	080048b4 	.word	0x080048b4

080047e0 <fabsf>:
 80047e0:	ee10 3a10 	vmov	r3, s0
 80047e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047e8:	ee00 3a10 	vmov	s0, r3
 80047ec:	4770      	bx	lr
	...

080047f0 <_init>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr

080047fc <_fini>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr
