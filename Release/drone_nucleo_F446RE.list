
drone_nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039bc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003b84  08003b84  00004b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c0c  08003c0c  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c0c  08003c0c  00004c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c14  08003c14  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c14  08003c14  00004c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c18  08003c18  00004c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003c1c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000010  08003c2c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08003c2c  00005308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015219  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d9  00000000  00000000  0001a259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c89c  00000000  00000000  0001c632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00028ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf6  00000000  00000000  00029c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022297  00000000  00000000  0002a866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018373  00000000  00000000  0004cafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3693  00000000  00000000  00064e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138503  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000285c  00000000  00000000  00138548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0013ada4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003b6c 	.word	0x08003b6c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08003b6c 	.word	0x08003b6c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b988 	b.w	8000d7c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	468e      	mov	lr, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4688      	mov	r8, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d962      	bls.n	8000b60 <__udivmoddi4+0xdc>
 8000a9a:	fab2 f682 	clz	r6, r2
 8000a9e:	b14e      	cbz	r6, 8000ab4 <__udivmoddi4+0x30>
 8000aa0:	f1c6 0320 	rsb	r3, r6, #32
 8000aa4:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aac:	40b7      	lsls	r7, r6
 8000aae:	ea43 0808 	orr.w	r8, r3, r8
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	fa1f fc87 	uxth.w	ip, r7
 8000abc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac0:	0c23      	lsrs	r3, r4, #16
 8000ac2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fb01 f20c 	mul.w	r2, r1, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad8:	f080 80ea 	bcs.w	8000cb0 <__udivmoddi4+0x22c>
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f240 80e7 	bls.w	8000cb0 <__udivmoddi4+0x22c>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	1a9a      	subs	r2, r3, r2
 8000ae8:	b2a3      	uxth	r3, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000afa:	459c      	cmp	ip, r3
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x8e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b04:	f080 80d6 	bcs.w	8000cb4 <__udivmoddi4+0x230>
 8000b08:	459c      	cmp	ip, r3
 8000b0a:	f240 80d3 	bls.w	8000cb4 <__udivmoddi4+0x230>
 8000b0e:	443b      	add	r3, r7
 8000b10:	3802      	subs	r0, #2
 8000b12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b16:	eba3 030c 	sub.w	r3, r3, ip
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11d      	cbz	r5, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40f3      	lsrs	r3, r6
 8000b20:	2200      	movs	r2, #0
 8000b22:	e9c5 3200 	strd	r3, r2, [r5]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d905      	bls.n	8000b3a <__udivmoddi4+0xb6>
 8000b2e:	b10d      	cbz	r5, 8000b34 <__udivmoddi4+0xb0>
 8000b30:	e9c5 0100 	strd	r0, r1, [r5]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4608      	mov	r0, r1
 8000b38:	e7f5      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b3a:	fab3 f183 	clz	r1, r3
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d146      	bne.n	8000bd0 <__udivmoddi4+0x14c>
 8000b42:	4573      	cmp	r3, lr
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xc8>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 8105 	bhi.w	8000d56 <__udivmoddi4+0x2d2>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4690      	mov	r8, r2
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d0e5      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b5e:	e7e2      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f000 8090 	beq.w	8000c86 <__udivmoddi4+0x202>
 8000b66:	fab2 f682 	clz	r6, r2
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	f040 80a4 	bne.w	8000cb8 <__udivmoddi4+0x234>
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	0c03      	lsrs	r3, r0, #16
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	b2bc      	uxth	r4, r7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x11e>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x11c>
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f200 80e0 	bhi.w	8000d60 <__udivmoddi4+0x2dc>
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb0:	fb02 f404 	mul.w	r4, r2, r4
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x144>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x142>
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	f200 80ca 	bhi.w	8000d5a <__udivmoddi4+0x2d6>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	1b1b      	subs	r3, r3, r4
 8000bca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bd0:	f1c1 0620 	rsb	r6, r1, #32
 8000bd4:	408b      	lsls	r3, r1
 8000bd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000be0:	fa20 f306 	lsr.w	r3, r0, r6
 8000be4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bec:	4323      	orrs	r3, r4
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	fa1f fc87 	uxth.w	ip, r7
 8000bf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bfa:	0c1c      	lsrs	r4, r3, #16
 8000bfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c16:	f080 809c 	bcs.w	8000d52 <__udivmoddi4+0x2ce>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f240 8099 	bls.w	8000d52 <__udivmoddi4+0x2ce>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	fa1f fe83 	uxth.w	lr, r3
 8000c2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c30:	fb09 4413 	mls	r4, r9, r3, r4
 8000c34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x1ce>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c46:	f080 8082 	bcs.w	8000d4e <__udivmoddi4+0x2ca>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d97f      	bls.n	8000d4e <__udivmoddi4+0x2ca>
 8000c4e:	3b02      	subs	r3, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	4673      	mov	r3, lr
 8000c62:	46e1      	mov	r9, ip
 8000c64:	d362      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000c66:	d05f      	beq.n	8000d28 <__udivmoddi4+0x2a4>
 8000c68:	b15d      	cbz	r5, 8000c82 <__udivmoddi4+0x1fe>
 8000c6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c72:	fa04 f606 	lsl.w	r6, r4, r6
 8000c76:	fa22 f301 	lsr.w	r3, r2, r1
 8000c7a:	431e      	orrs	r6, r3
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c82:	2100      	movs	r1, #0
 8000c84:	e74f      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c8a:	0c01      	lsrs	r1, r0, #16
 8000c8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c96:	463b      	mov	r3, r7
 8000c98:	4638      	mov	r0, r7
 8000c9a:	463c      	mov	r4, r7
 8000c9c:	46b8      	mov	r8, r7
 8000c9e:	46be      	mov	lr, r7
 8000ca0:	2620      	movs	r6, #32
 8000ca2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ca6:	eba2 0208 	sub.w	r2, r2, r8
 8000caa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cae:	e766      	b.n	8000b7e <__udivmoddi4+0xfa>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	e718      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	e72c      	b.n	8000b12 <__udivmoddi4+0x8e>
 8000cb8:	f1c6 0220 	rsb	r2, r6, #32
 8000cbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	40b1      	lsls	r1, r6
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cde:	fb08 f904 	mul.w	r9, r8, r4
 8000ce2:	40b0      	lsls	r0, r6
 8000ce4:	4589      	cmp	r9, r1
 8000ce6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	d93e      	bls.n	8000d6c <__udivmoddi4+0x2e8>
 8000cee:	1879      	adds	r1, r7, r1
 8000cf0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cf4:	d201      	bcs.n	8000cfa <__udivmoddi4+0x276>
 8000cf6:	4589      	cmp	r9, r1
 8000cf8:	d81f      	bhi.n	8000d3a <__udivmoddi4+0x2b6>
 8000cfa:	eba1 0109 	sub.w	r1, r1, r9
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fb09 f804 	mul.w	r8, r9, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d10:	4542      	cmp	r2, r8
 8000d12:	d229      	bcs.n	8000d68 <__udivmoddi4+0x2e4>
 8000d14:	18ba      	adds	r2, r7, r2
 8000d16:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d1a:	d2c4      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d1c:	4542      	cmp	r2, r8
 8000d1e:	d2c2      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d20:	f1a9 0102 	sub.w	r1, r9, #2
 8000d24:	443a      	add	r2, r7
 8000d26:	e7be      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d28:	45f0      	cmp	r8, lr
 8000d2a:	d29d      	bcs.n	8000c68 <__udivmoddi4+0x1e4>
 8000d2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d34:	3801      	subs	r0, #1
 8000d36:	46e1      	mov	r9, ip
 8000d38:	e796      	b.n	8000c68 <__udivmoddi4+0x1e4>
 8000d3a:	eba7 0909 	sub.w	r9, r7, r9
 8000d3e:	4449      	add	r1, r9
 8000d40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d48:	fb09 f804 	mul.w	r8, r9, r4
 8000d4c:	e7db      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d4e:	4673      	mov	r3, lr
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1ce>
 8000d52:	4650      	mov	r0, sl
 8000d54:	e766      	b.n	8000c24 <__udivmoddi4+0x1a0>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e6fd      	b.n	8000b56 <__udivmoddi4+0xd2>
 8000d5a:	443b      	add	r3, r7
 8000d5c:	3a02      	subs	r2, #2
 8000d5e:	e733      	b.n	8000bc8 <__udivmoddi4+0x144>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	e71c      	b.n	8000ba2 <__udivmoddi4+0x11e>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d6c:	eba1 0109 	sub.w	r1, r1, r9
 8000d70:	46c4      	mov	ip, r8
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fb09 f804 	mul.w	r8, r9, r4
 8000d7a:	e7c4      	b.n	8000d06 <__udivmoddi4+0x282>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <Debug_Send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Send(const char *msg)
{
 8000d80:	b510      	push	{r4, lr}
 8000d82:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000d84:	f7ff fa40 	bl	8000208 <strlen>
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	b282      	uxth	r2, r0
 8000d8e:	4621      	mov	r1, r4
 8000d90:	4801      	ldr	r0, [pc, #4]	@ (8000d98 <Debug_Send+0x18>)
 8000d92:	f002 fd76 	bl	8003882 <HAL_UART_Transmit>
}
 8000d96:	bd10      	pop	{r4, pc}
 8000d98:	200001d8 	.word	0x200001d8

08000d9c <IMU_UpdateAverage>:
}

/* USER CODE BEGIN 4 */

void IMU_UpdateAverage(const MPU6050_Physical_t *sample)
{
 8000d9c:	b530      	push	{r4, r5, lr}
 8000d9e:	4684      	mov	ip, r0
	if (imu_count < IMU_WINDOW_SIZE)
 8000da0:	4b7c      	ldr	r3, [pc, #496]	@ (8000f94 <IMU_UpdateAverage+0x1f8>)
 8000da2:	f893 e000 	ldrb.w	lr, [r3]
 8000da6:	f1be 0f09 	cmp.w	lr, #9
 8000daa:	f200 808c 	bhi.w	8000ec6 <IMU_UpdateAverage+0x12a>
	{
		imu_window[imu_index] = *sample;
 8000dae:	4b7a      	ldr	r3, [pc, #488]	@ (8000f98 <IMU_UpdateAverage+0x1fc>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000db6:	4c79      	ldr	r4, [pc, #484]	@ (8000f9c <IMU_UpdateAverage+0x200>)
 8000db8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000dbc:	4605      	mov	r5, r0
 8000dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		imu_sum.accel_x += sample->accel_x;
 8000dca:	4b75      	ldr	r3, [pc, #468]	@ (8000fa0 <IMU_UpdateAverage+0x204>)
 8000dcc:	edd3 7a00 	vldr	s15, [r3]
 8000dd0:	ed9c 7a00 	vldr	s14, [ip]
 8000dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
		imu_sum.accel_y += sample->accel_y;
 8000ddc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000de0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8000de4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000de8:	edc3 7a01 	vstr	s15, [r3, #4]
		imu_sum.accel_z += sample->accel_z;
 8000dec:	edd3 7a02 	vldr	s15, [r3, #8]
 8000df0:	ed9c 7a02 	vldr	s14, [ip, #8]
 8000df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000df8:	edc3 7a02 	vstr	s15, [r3, #8]
		imu_sum.gyro_x  += sample->gyro_x;
 8000dfc:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e00:	ed9c 7a03 	vldr	s14, [ip, #12]
 8000e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e08:	edc3 7a03 	vstr	s15, [r3, #12]
		imu_sum.gyro_y  += sample->gyro_y;
 8000e0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e10:	ed9c 7a04 	vldr	s14, [ip, #16]
 8000e14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e18:	edc3 7a04 	vstr	s15, [r3, #16]
		imu_sum.gyro_z  += sample->gyro_z;
 8000e1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e20:	ed9c 7a05 	vldr	s14, [ip, #20]
 8000e24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e28:	edc3 7a05 	vstr	s15, [r3, #20]
		imu_sum.temp    += sample->temp;
 8000e2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e30:	ed9c 7a06 	vldr	s14, [ip, #24]
 8000e34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e38:	edc3 7a06 	vstr	s15, [r3, #24]
		imu_count++;
 8000e3c:	f10e 0e01 	add.w	lr, lr, #1
 8000e40:	4b54      	ldr	r3, [pc, #336]	@ (8000f94 <IMU_UpdateAverage+0x1f8>)
 8000e42:	f883 e000 	strb.w	lr, [r3]
		imu_sum.gyro_y  += sample->gyro_y;
		imu_sum.gyro_z  += sample->gyro_z;
		imu_sum.temp    += sample->temp;
	}

	imu_index = (imu_index + 1) % IMU_WINDOW_SIZE;
 8000e46:	4854      	ldr	r0, [pc, #336]	@ (8000f98 <IMU_UpdateAverage+0x1fc>)
 8000e48:	7803      	ldrb	r3, [r0, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a55      	ldr	r2, [pc, #340]	@ (8000fa4 <IMU_UpdateAverage+0x208>)
 8000e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e52:	f002 01fc 	and.w	r1, r2, #252	@ 0xfc
 8000e56:	eb01 02a2 	add.w	r2, r1, r2, asr #2
 8000e5a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8000e5e:	7003      	strb	r3, [r0, #0]
	float div = (float)imu_count;
 8000e60:	4b4c      	ldr	r3, [pc, #304]	@ (8000f94 <IMU_UpdateAverage+0x1f8>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eef8 7a67 	vcvt.f32.u32	s15, s15

	imu_avg.accel_x = imu_sum.accel_x / div;
 8000e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa8 <IMU_UpdateAverage+0x20c>)
 8000e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8000fa0 <IMU_UpdateAverage+0x204>)
 8000e70:	edd2 6a00 	vldr	s13, [r2]
 8000e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e78:	ed83 7a00 	vstr	s14, [r3]
	imu_avg.accel_y = imu_sum.accel_y / div;
 8000e7c:	edd2 6a01 	vldr	s13, [r2, #4]
 8000e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e84:	ed83 7a01 	vstr	s14, [r3, #4]
	imu_avg.accel_z = imu_sum.accel_z / div;
 8000e88:	edd2 6a02 	vldr	s13, [r2, #8]
 8000e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e90:	ed83 7a02 	vstr	s14, [r3, #8]
	imu_avg.gyro_x  = imu_sum.gyro_x  / div;
 8000e94:	edd2 6a03 	vldr	s13, [r2, #12]
 8000e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e9c:	ed83 7a03 	vstr	s14, [r3, #12]
	imu_avg.gyro_y  = imu_sum.gyro_y  / div;
 8000ea0:	edd2 6a04 	vldr	s13, [r2, #16]
 8000ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ea8:	ed83 7a04 	vstr	s14, [r3, #16]
	imu_avg.gyro_z  = imu_sum.gyro_z  / div;
 8000eac:	edd2 6a05 	vldr	s13, [r2, #20]
 8000eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000eb4:	ed83 7a05 	vstr	s14, [r3, #20]
	imu_avg.temp    = imu_sum.temp    / div;
 8000eb8:	edd2 6a06 	vldr	s13, [r2, #24]
 8000ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ec0:	ed83 7a06 	vstr	s14, [r3, #24]
}
 8000ec4:	bd30      	pop	{r4, r5, pc}
		imu_sum.accel_x -= imu_window[imu_index].accel_x;
 8000ec6:	4b34      	ldr	r3, [pc, #208]	@ (8000f98 <IMU_UpdateAverage+0x1fc>)
 8000ec8:	7819      	ldrb	r1, [r3, #0]
 8000eca:	4c35      	ldr	r4, [pc, #212]	@ (8000fa0 <IMU_UpdateAverage+0x204>)
 8000ecc:	4b33      	ldr	r3, [pc, #204]	@ (8000f9c <IMU_UpdateAverage+0x200>)
 8000ece:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000ed2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000ed6:	ed94 4a00 	vldr	s8, [r4]
 8000eda:	edd2 7a00 	vldr	s15, [r2]
 8000ede:	ee34 4a67 	vsub.f32	s8, s8, s15
		imu_sum.accel_y -= imu_window[imu_index].accel_y;
 8000ee2:	edd4 4a01 	vldr	s9, [r4, #4]
 8000ee6:	edd2 7a01 	vldr	s15, [r2, #4]
 8000eea:	ee74 4ae7 	vsub.f32	s9, s9, s15
		imu_sum.accel_z -= imu_window[imu_index].accel_z;
 8000eee:	ed94 5a02 	vldr	s10, [r4, #8]
 8000ef2:	edd2 7a02 	vldr	s15, [r2, #8]
 8000ef6:	ee35 5a67 	vsub.f32	s10, s10, s15
		imu_sum.gyro_x  -= imu_window[imu_index].gyro_x;
 8000efa:	edd4 5a03 	vldr	s11, [r4, #12]
 8000efe:	edd2 7a03 	vldr	s15, [r2, #12]
 8000f02:	ee75 5ae7 	vsub.f32	s11, s11, s15
		imu_sum.gyro_y  -= imu_window[imu_index].gyro_y;
 8000f06:	ed94 6a04 	vldr	s12, [r4, #16]
 8000f0a:	edd2 7a04 	vldr	s15, [r2, #16]
 8000f0e:	ee36 6a67 	vsub.f32	s12, s12, s15
		imu_sum.gyro_z  -= imu_window[imu_index].gyro_z;
 8000f12:	edd4 6a05 	vldr	s13, [r4, #20]
 8000f16:	edd2 7a05 	vldr	s15, [r2, #20]
 8000f1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
		imu_sum.temp    -= imu_window[imu_index].temp;
 8000f1e:	ed94 7a06 	vldr	s14, [r4, #24]
 8000f22:	edd2 7a06 	vldr	s15, [r2, #24]
 8000f26:	ee37 7a67 	vsub.f32	s14, s14, s15
		imu_window[imu_index] = *sample;
 8000f2a:	4696      	mov	lr, r2
 8000f2c:	4605      	mov	r5, r0
 8000f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f30:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000f34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f38:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
		imu_sum.accel_x += sample->accel_x;
 8000f3c:	eddc 7a00 	vldr	s15, [ip]
 8000f40:	ee77 7a84 	vadd.f32	s15, s15, s8
 8000f44:	edc4 7a00 	vstr	s15, [r4]
		imu_sum.accel_y += sample->accel_y;
 8000f48:	eddc 7a01 	vldr	s15, [ip, #4]
 8000f4c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8000f50:	edc4 7a01 	vstr	s15, [r4, #4]
		imu_sum.accel_z += sample->accel_z;
 8000f54:	eddc 7a02 	vldr	s15, [ip, #8]
 8000f58:	ee77 7a85 	vadd.f32	s15, s15, s10
 8000f5c:	edc4 7a02 	vstr	s15, [r4, #8]
		imu_sum.gyro_x  += sample->gyro_x;
 8000f60:	eddc 7a03 	vldr	s15, [ip, #12]
 8000f64:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8000f68:	edc4 7a03 	vstr	s15, [r4, #12]
		imu_sum.gyro_y  += sample->gyro_y;
 8000f6c:	eddc 7a04 	vldr	s15, [ip, #16]
 8000f70:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000f74:	edc4 7a04 	vstr	s15, [r4, #16]
		imu_sum.gyro_z  += sample->gyro_z;
 8000f78:	eddc 7a05 	vldr	s15, [ip, #20]
 8000f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000f80:	edc4 7a05 	vstr	s15, [r4, #20]
		imu_sum.temp    += sample->temp;
 8000f84:	eddc 7a06 	vldr	s15, [ip, #24]
 8000f88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f8c:	edc4 7a06 	vstr	s15, [r4, #24]
 8000f90:	e759      	b.n	8000e46 <IMU_UpdateAverage+0xaa>
 8000f92:	bf00      	nop
 8000f94:	20000039 	.word	0x20000039
 8000f98:	2000003a 	.word	0x2000003a
 8000f9c:	20000058 	.word	0x20000058
 8000fa0:	2000003c 	.word	0x2000003c
 8000fa4:	66666667 	.word	0x66666667
 8000fa8:	20000170 	.word	0x20000170

08000fac <SoftStartPWM>:

#define PWM_MAX_STEP 500  // passo máximo permitido por ciclo
#define Kp 0.2f            // ganho proporcional (ajuste conforme necessário)

void SoftStartPWM(uint32_t *current, uint32_t target)
{
 8000fac:	b410      	push	{r4}
	int32_t error = (int32_t)target - (int32_t)(*current);
 8000fae:	6802      	ldr	r2, [r0, #0]
 8000fb0:	1a8b      	subs	r3, r1, r2
 8000fb2:	ee07 3a90 	vmov	s15, r3
	int32_t step = (int32_t)(Kp * error);
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000ffc <SoftStartPWM+0x50>
 8000fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc6:	ee17 3a90 	vmov	r3, s15

	// saturação do passo
	if (step > PWM_MAX_STEP) step = PWM_MAX_STEP;
	else if (step < -PWM_MAX_STEP) step = -PWM_MAX_STEP;
 8000fca:	4c0d      	ldr	r4, [pc, #52]	@ (8001000 <SoftStartPWM+0x54>)
 8000fcc:	429c      	cmp	r4, r3
 8000fce:	bfb8      	it	lt
 8000fd0:	461c      	movlt	r4, r3

	*current += step;
 8000fd2:	f5b4 7ffa 	cmp.w	r4, #500	@ 0x1f4
 8000fd6:	bfd4      	ite	le
 8000fd8:	1912      	addle	r2, r2, r4
 8000fda:	f502 72fa 	addgt.w	r2, r2, #500	@ 0x1f4
 8000fde:	6002      	str	r2, [r0, #0]

	// proteção contra overshoot (caso o passo cause ultrapassagem)
	if ((step > 0 && *current > target) || (step < 0 && *current < target)) {
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd05      	ble.n	8000ff0 <SoftStartPWM+0x44>
 8000fe4:	428a      	cmp	r2, r1
 8000fe6:	d900      	bls.n	8000fea <SoftStartPWM+0x3e>
		*current = target;
 8000fe8:	6001      	str	r1, [r0, #0]
	}
}
 8000fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fee:	4770      	bx	lr
	if ((step > 0 && *current > target) || (step < 0 && *current < target)) {
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dafa      	bge.n	8000fea <SoftStartPWM+0x3e>
 8000ff4:	428a      	cmp	r2, r1
 8000ff6:	d2f8      	bcs.n	8000fea <SoftStartPWM+0x3e>
 8000ff8:	e7f6      	b.n	8000fe8 <SoftStartPWM+0x3c>
 8000ffa:	bf00      	nop
 8000ffc:	3e4ccccd 	.word	0x3e4ccccd
 8001000:	fffffe0c 	.word	0xfffffe0c

08001004 <UpdatePWM>:


void UpdatePWM(void)
{
 8001004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SoftStartPWM((uint32_t*)&PWM_D9, PWM_D9_Target);
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <UpdatePWM+0x4c>)
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	4f12      	ldr	r7, [pc, #72]	@ (8001054 <UpdatePWM+0x50>)
 800100c:	4638      	mov	r0, r7
 800100e:	f7ff ffcd 	bl	8000fac <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D6, PWM_D6_Target);
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <UpdatePWM+0x54>)
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	4e11      	ldr	r6, [pc, #68]	@ (800105c <UpdatePWM+0x58>)
 8001018:	4630      	mov	r0, r6
 800101a:	f7ff ffc7 	bl	8000fac <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D5, PWM_D5_Target);
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <UpdatePWM+0x5c>)
 8001020:	6819      	ldr	r1, [r3, #0]
 8001022:	4d10      	ldr	r5, [pc, #64]	@ (8001064 <UpdatePWM+0x60>)
 8001024:	4628      	mov	r0, r5
 8001026:	f7ff ffc1 	bl	8000fac <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D3, PWM_D3_Target);
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <UpdatePWM+0x64>)
 800102c:	6819      	ldr	r1, [r3, #0]
 800102e:	4c0f      	ldr	r4, [pc, #60]	@ (800106c <UpdatePWM+0x68>)
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff ffbb 	bl	8000fac <SoftStartPWM>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_D9);
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <UpdatePWM+0x6c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	6393      	str	r3, [r2, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM_D6);
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <UpdatePWM+0x70>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6831      	ldr	r1, [r6, #0]
 8001044:	63d9      	str	r1, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_D5);
 8001046:	6829      	ldr	r1, [r5, #0]
 8001048:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_D3);
 800104a:	6822      	ldr	r2, [r4, #0]
 800104c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001050:	200001c4 	.word	0x200001c4
 8001054:	200001d4 	.word	0x200001d4
 8001058:	200001c0 	.word	0x200001c0
 800105c:	200001d0 	.word	0x200001d0
 8001060:	200001bc 	.word	0x200001bc
 8001064:	200001cc 	.word	0x200001cc
 8001068:	200001b8 	.word	0x200001b8
 800106c:	200001c8 	.word	0x200001c8
 8001070:	20000220 	.word	0x20000220
 8001074:	20000268 	.word	0x20000268

08001078 <HAL_GPIO_EXTI_Callback>:

uint32_t last_button_time = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin)
 8001078:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800107c:	d000      	beq.n	8001080 <HAL_GPIO_EXTI_Callback+0x8>
 800107e:	4770      	bx	lr
{
 8001080:	b510      	push	{r4, lr}
	{
		uint32_t now = HAL_GetTick();
 8001082:	f000 fd5f 	bl	8001b44 <HAL_GetTick>
 8001086:	4604      	mov	r4, r0
		if (now - last_button_time > 200) // 200 ms debounce
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_GPIO_EXTI_Callback+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	1ac3      	subs	r3, r0, r3
 800108e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001090:	d90c      	bls.n	80010ac <HAL_GPIO_EXTI_Callback+0x34>
		{
			control_enabled = !control_enabled;
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_GPIO_EXTI_Callback+0x44>)
 8001094:	7813      	ldrb	r3, [r2, #0]
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	7013      	strb	r3, [r2, #0]
			if (control_enabled)
 800109e:	7813      	ldrb	r3, [r2, #0]
 80010a0:	b12b      	cbz	r3, 80010ae <HAL_GPIO_EXTI_Callback+0x36>
				Debug_Send("Control Enabled\r\n");
 80010a2:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <HAL_GPIO_EXTI_Callback+0x48>)
 80010a4:	f7ff fe6c 	bl	8000d80 <Debug_Send>
			else
				Debug_Send("Control Disabled\r\n");

			last_button_time = now;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GPIO_EXTI_Callback+0x40>)
 80010aa:	601c      	str	r4, [r3, #0]
		}
	}
}
 80010ac:	bd10      	pop	{r4, pc}
				Debug_Send("Control Disabled\r\n");
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80010b0:	f7ff fe66 	bl	8000d80 <Debug_Send>
 80010b4:	e7f8      	b.n	80010a8 <HAL_GPIO_EXTI_Callback+0x30>
 80010b6:	bf00      	nop
 80010b8:	2000002c 	.word	0x2000002c
 80010bc:	20000038 	.word	0x20000038
 80010c0:	08003b84 	.word	0x08003b84
 80010c4:	08003b98 	.word	0x08003b98

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	Debug_Send("Error_Handler\r\n");
 80010ca:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <Error_Handler+0xc>)
 80010cc:	f7ff fe58 	bl	8000d80 <Debug_Send>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
	__disable_irq();
	while (1)
 80010d2:	e7fe      	b.n	80010d2 <Error_Handler+0xa>
 80010d4:	08003bac 	.word	0x08003bac

080010d8 <SystemClock_Config>:
{
 80010d8:	b500      	push	{lr}
 80010da:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010dc:	2234      	movs	r2, #52	@ 0x34
 80010de:	2100      	movs	r1, #0
 80010e0:	a807      	add	r0, sp, #28
 80010e2:	f002 fc3a 	bl	800395a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e6:	2300      	movs	r3, #0
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	9303      	str	r3, [sp, #12]
 80010ec:	9304      	str	r3, [sp, #16]
 80010ee:	9305      	str	r3, [sp, #20]
 80010f0:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001174 <SystemClock_Config+0x9c>)
 80010f6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80010f8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80010fc:	6411      	str	r1, [r2, #64]	@ 0x40
 80010fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001100:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001104:	9200      	str	r2, [sp, #0]
 8001106:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	491b      	ldr	r1, [pc, #108]	@ (8001178 <SystemClock_Config+0xa0>)
 800110c:	680a      	ldr	r2, [r1, #0]
 800110e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001112:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001116:	600a      	str	r2, [r1, #0]
 8001118:	680a      	ldr	r2, [r1, #0]
 800111a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001122:	2202      	movs	r2, #2
 8001124:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001126:	2101      	movs	r1, #1
 8001128:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112a:	2110      	movs	r1, #16
 800112c:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001132:	910f      	str	r1, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001134:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001138:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800113a:	2304      	movs	r3, #4
 800113c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800113e:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001140:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001142:	a807      	add	r0, sp, #28
 8001144:	f001 fd96 	bl	8002c74 <HAL_RCC_OscConfig>
 8001148:	b980      	cbnz	r0, 800116c <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114e:	2102      	movs	r1, #2
 8001150:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001156:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800115a:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115e:	a802      	add	r0, sp, #8
 8001160:	f001 fbee 	bl	8002940 <HAL_RCC_ClockConfig>
 8001164:	b920      	cbnz	r0, 8001170 <SystemClock_Config+0x98>
}
 8001166:	b015      	add	sp, #84	@ 0x54
 8001168:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800116c:	f7ff ffac 	bl	80010c8 <Error_Handler>
    Error_Handler();
 8001170:	f7ff ffaa 	bl	80010c8 <Error_Handler>
 8001174:	40023800 	.word	0x40023800
 8001178:	40007000 	.word	0x40007000
 800117c:	00000000 	.word	0x00000000

08001180 <main>:
{
 8001180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001184:	ed2d 8b06 	vpush	{d8-d10}
 8001188:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 800118a:	f000 fcb5 	bl	8001af8 <HAL_Init>
  SystemClock_Config();
 800118e:	f7ff ffa3 	bl	80010d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	2400      	movs	r4, #0
 8001194:	9407      	str	r4, [sp, #28]
 8001196:	9408      	str	r4, [sp, #32]
 8001198:	9409      	str	r4, [sp, #36]	@ 0x24
 800119a:	940a      	str	r4, [sp, #40]	@ 0x28
 800119c:	940b      	str	r4, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	9401      	str	r4, [sp, #4]
 80011a0:	4baf      	ldr	r3, [pc, #700]	@ (8001460 <main+0x2e0>)
 80011a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011a4:	f042 0204 	orr.w	r2, r2, #4
 80011a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80011aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ac:	f002 0204 	and.w	r2, r2, #4
 80011b0:	9201      	str	r2, [sp, #4]
 80011b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b4:	9402      	str	r4, [sp, #8]
 80011b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80011be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011c0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80011c4:	9202      	str	r2, [sp, #8]
 80011c6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	9403      	str	r4, [sp, #12]
 80011ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011cc:	f042 0201 	orr.w	r2, r2, #1
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80011d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011d4:	f002 0201 	and.w	r2, r2, #1
 80011d8:	9203      	str	r2, [sp, #12]
 80011da:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	9404      	str	r4, [sp, #16]
 80011de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011e0:	f042 0202 	orr.w	r2, r2, #2
 80011e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80011e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	9304      	str	r3, [sp, #16]
 80011ee:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f0:	4d9c      	ldr	r5, [pc, #624]	@ (8001464 <main+0x2e4>)
 80011f2:	4622      	mov	r2, r4
 80011f4:	2120      	movs	r1, #32
 80011f6:	4628      	mov	r0, r5
 80011f8:	f000 fe0a 	bl	8001e10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001200:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001202:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001206:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800120a:	a907      	add	r1, sp, #28
 800120c:	4896      	ldr	r0, [pc, #600]	@ (8001468 <main+0x2e8>)
 800120e:	f000 fd09 	bl	8001c24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001212:	2320      	movs	r3, #32
 8001214:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800121e:	a907      	add	r1, sp, #28
 8001220:	4628      	mov	r0, r5
 8001222:	f000 fcff 	bl	8001c24 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001226:	4622      	mov	r2, r4
 8001228:	4621      	mov	r1, r4
 800122a:	2028      	movs	r0, #40	@ 0x28
 800122c:	f000 fca2 	bl	8001b74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001230:	2028      	movs	r0, #40	@ 0x28
 8001232:	f000 fcd5 	bl	8001be0 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001236:	488d      	ldr	r0, [pc, #564]	@ (800146c <main+0x2ec>)
 8001238:	4b8d      	ldr	r3, [pc, #564]	@ (8001470 <main+0x2f0>)
 800123a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800123c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001240:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001248:	230c      	movs	r3, #12
 800124a:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800124e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001250:	f002 fae7 	bl	8003822 <HAL_UART_Init>
 8001254:	2800      	cmp	r0, #0
 8001256:	f040 80ac 	bne.w	80013b2 <main+0x232>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	2300      	movs	r3, #0
 800125c:	9305      	str	r3, [sp, #20]
 800125e:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001260:	9307      	str	r3, [sp, #28]
 8001262:	9308      	str	r3, [sp, #32]
 8001264:	9309      	str	r3, [sp, #36]	@ 0x24
 8001266:	930a      	str	r3, [sp, #40]	@ 0x28
 8001268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800126a:	930c      	str	r3, [sp, #48]	@ 0x30
 800126c:	930d      	str	r3, [sp, #52]	@ 0x34
  htim2.Instance = TIM2;
 800126e:	4881      	ldr	r0, [pc, #516]	@ (8001474 <main+0x2f4>)
 8001270:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001274:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 83;
 8001276:	2253      	movs	r2, #83	@ 0x53
 8001278:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 19999;
 800127c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001280:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001286:	f002 f83f 	bl	8003308 <HAL_TIM_PWM_Init>
 800128a:	2800      	cmp	r0, #0
 800128c:	f040 8093 	bne.w	80013b6 <main+0x236>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001296:	a905      	add	r1, sp, #20
 8001298:	4876      	ldr	r0, [pc, #472]	@ (8001474 <main+0x2f4>)
 800129a:	f002 f98b 	bl	80035b4 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	2800      	cmp	r0, #0
 80012a0:	f040 808b 	bne.w	80013ba <main+0x23a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a4:	2360      	movs	r3, #96	@ 0x60
 80012a6:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b0:	2204      	movs	r2, #4
 80012b2:	a907      	add	r1, sp, #28
 80012b4:	486f      	ldr	r0, [pc, #444]	@ (8001474 <main+0x2f4>)
 80012b6:	f002 f885 	bl	80033c4 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d17f      	bne.n	80013be <main+0x23e>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012be:	2208      	movs	r2, #8
 80012c0:	a907      	add	r1, sp, #28
 80012c2:	486c      	ldr	r0, [pc, #432]	@ (8001474 <main+0x2f4>)
 80012c4:	f002 f87e 	bl	80033c4 <HAL_TIM_PWM_ConfigChannel>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d17a      	bne.n	80013c2 <main+0x242>
  HAL_TIM_MspPostInit(&htim2);
 80012cc:	4869      	ldr	r0, [pc, #420]	@ (8001474 <main+0x2f4>)
 80012ce:	f000 fb13 	bl	80018f8 <HAL_TIM_MspPostInit>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d2:	2300      	movs	r3, #0
 80012d4:	9305      	str	r3, [sp, #20]
 80012d6:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	9307      	str	r3, [sp, #28]
 80012da:	9308      	str	r3, [sp, #32]
 80012dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80012de:	930a      	str	r3, [sp, #40]	@ 0x28
 80012e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80012e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80012e4:	930d      	str	r3, [sp, #52]	@ 0x34
  htim3.Instance = TIM3;
 80012e6:	4864      	ldr	r0, [pc, #400]	@ (8001478 <main+0x2f8>)
 80012e8:	4a64      	ldr	r2, [pc, #400]	@ (800147c <main+0x2fc>)
 80012ea:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 83;
 80012ec:	2253      	movs	r2, #83	@ 0x53
 80012ee:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 19999;
 80012f2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80012f6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012fc:	f002 f804 	bl	8003308 <HAL_TIM_PWM_Init>
 8001300:	2800      	cmp	r0, #0
 8001302:	d160      	bne.n	80013c6 <main+0x246>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800130a:	a905      	add	r1, sp, #20
 800130c:	485a      	ldr	r0, [pc, #360]	@ (8001478 <main+0x2f8>)
 800130e:	f002 f951 	bl	80035b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	2800      	cmp	r0, #0
 8001314:	d159      	bne.n	80013ca <main+0x24a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	@ 0x60
 8001318:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800131a:	2200      	movs	r2, #0
 800131c:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001320:	920b      	str	r2, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001322:	a907      	add	r1, sp, #28
 8001324:	4854      	ldr	r0, [pc, #336]	@ (8001478 <main+0x2f8>)
 8001326:	f002 f84d 	bl	80033c4 <HAL_TIM_PWM_ConfigChannel>
 800132a:	2800      	cmp	r0, #0
 800132c:	d14f      	bne.n	80013ce <main+0x24e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132e:	2204      	movs	r2, #4
 8001330:	a907      	add	r1, sp, #28
 8001332:	4851      	ldr	r0, [pc, #324]	@ (8001478 <main+0x2f8>)
 8001334:	f002 f846 	bl	80033c4 <HAL_TIM_PWM_ConfigChannel>
 8001338:	2800      	cmp	r0, #0
 800133a:	d14a      	bne.n	80013d2 <main+0x252>
  HAL_TIM_MspPostInit(&htim3);
 800133c:	484e      	ldr	r0, [pc, #312]	@ (8001478 <main+0x2f8>)
 800133e:	f000 fadb 	bl	80018f8 <HAL_TIM_MspPostInit>
  hi2c1.Instance = I2C1;
 8001342:	484f      	ldr	r0, [pc, #316]	@ (8001480 <main+0x300>)
 8001344:	4b4f      	ldr	r3, [pc, #316]	@ (8001484 <main+0x304>)
 8001346:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001348:	4b4f      	ldr	r3, [pc, #316]	@ (8001488 <main+0x308>)
 800134a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800134c:	2300      	movs	r3, #0
 800134e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001350:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001352:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001356:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001358:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001360:	f000 fff0 	bl	8002344 <HAL_I2C_Init>
 8001364:	bbb8      	cbnz	r0, 80013d6 <main+0x256>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001366:	4c43      	ldr	r4, [pc, #268]	@ (8001474 <main+0x2f4>)
 8001368:	2104      	movs	r1, #4
 800136a:	4620      	mov	r0, r4
 800136c:	f002 f8a8 	bl	80034c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001370:	2108      	movs	r1, #8
 8001372:	4620      	mov	r0, r4
 8001374:	f002 f8a4 	bl	80034c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001378:	4c3f      	ldr	r4, [pc, #252]	@ (8001478 <main+0x2f8>)
 800137a:	2100      	movs	r1, #0
 800137c:	4620      	mov	r0, r4
 800137e:	f002 f89f 	bl	80034c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001382:	2104      	movs	r1, #4
 8001384:	4620      	mov	r0, r4
 8001386:	f002 f89b 	bl	80034c0 <HAL_TIM_PWM_Start>
	Debug_Send("System Init Complete\r\n");
 800138a:	4840      	ldr	r0, [pc, #256]	@ (800148c <main+0x30c>)
 800138c:	f7ff fcf8 	bl	8000d80 <Debug_Send>
	MPU6050_Init(&hi2c1);
 8001390:	483b      	ldr	r0, [pc, #236]	@ (8001480 <main+0x300>)
 8001392:	f000 f925 	bl	80015e0 <MPU6050_Init>
	uint32_t lastBlink = 0;
 8001396:	2600      	movs	r6, #0
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001398:	4f32      	ldr	r7, [pc, #200]	@ (8001464 <main+0x2e4>)
						imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 800139a:	ed9f 9a3d 	vldr	s18, [pc, #244]	@ 8001490 <main+0x310>
 800139e:	a52e      	add	r5, pc, #184	@ (adr r5, 8001458 <main+0x2d8>)
 80013a0:	e9d5 4500 	ldrd	r4, r5, [r5]
		float throttle = control_enabled ? throttle_base : 0.0f;
 80013a4:	f04f 0800 	mov.w	r8, #0
		if (m1 > MAX_PWM) m1 = MAX_PWM; else if (m1 < MIN_PWM) m1 = MIN_PWM;
 80013a8:	eddf 8a3a 	vldr	s17, [pc, #232]	@ 8001494 <main+0x314>
 80013ac:	ed9f 8a3a 	vldr	s16, [pc, #232]	@ 8001498 <main+0x318>
 80013b0:	e098      	b.n	80014e4 <main+0x364>
    Error_Handler();
 80013b2:	f7ff fe89 	bl	80010c8 <Error_Handler>
    Error_Handler();
 80013b6:	f7ff fe87 	bl	80010c8 <Error_Handler>
    Error_Handler();
 80013ba:	f7ff fe85 	bl	80010c8 <Error_Handler>
    Error_Handler();
 80013be:	f7ff fe83 	bl	80010c8 <Error_Handler>
    Error_Handler();
 80013c2:	f7ff fe81 	bl	80010c8 <Error_Handler>
    Error_Handler();
 80013c6:	f7ff fe7f 	bl	80010c8 <Error_Handler>
    Error_Handler();
 80013ca:	f7ff fe7d 	bl	80010c8 <Error_Handler>
    Error_Handler();
 80013ce:	f7ff fe7b 	bl	80010c8 <Error_Handler>
    Error_Handler();
 80013d2:	f7ff fe79 	bl	80010c8 <Error_Handler>
    Error_Handler();
 80013d6:	f7ff fe77 	bl	80010c8 <Error_Handler>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013da:	2120      	movs	r1, #32
 80013dc:	4638      	mov	r0, r7
 80013de:	f000 fd1d 	bl	8001e1c <HAL_GPIO_TogglePin>
			lastBlink = now;
 80013e2:	464e      	mov	r6, r9
 80013e4:	e086      	b.n	80014f4 <main+0x374>
		float throttle = control_enabled ? throttle_base : 0.0f;
 80013e6:	ee07 8a90 	vmov	s15, r8
		float m1 = throttle + output_pitch + output_roll;
 80013ea:	ee37 7aa9 	vadd.f32	s14, s15, s19
 80013ee:	ee37 6a25 	vadd.f32	s12, s14, s11
		float m2 = throttle + output_pitch - output_roll;
 80013f2:	ee37 7a65 	vsub.f32	s14, s14, s11
		float m3 = throttle - output_pitch + output_roll;
 80013f6:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80013fa:	ee77 6aa5 	vadd.f32	s13, s15, s11
		float m4 = throttle - output_pitch - output_roll;
 80013fe:	ee77 7ae5 	vsub.f32	s15, s15, s11
		if (m1 > MAX_PWM) m1 = MAX_PWM; else if (m1 < MIN_PWM) m1 = MIN_PWM;
 8001402:	eeb4 6ae8 	vcmpe.f32	s12, s17
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	dc07      	bgt.n	800141c <main+0x29c>
 800140c:	eeb4 6a48 	vcmp.f32	s12, s16
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	bf48      	it	mi
 8001416:	eeb0 6a48 	vmovmi.f32	s12, s16
 800141a:	e001      	b.n	8001420 <main+0x2a0>
 800141c:	eeb0 6a68 	vmov.f32	s12, s17
		if (m2 > MAX_PWM) m2 = MAX_PWM; else if (m2 < MIN_PWM) m2 = MIN_PWM;
 8001420:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dc07      	bgt.n	800143a <main+0x2ba>
 800142a:	eeb4 7a48 	vcmp.f32	s14, s16
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	bf48      	it	mi
 8001434:	eeb0 7a48 	vmovmi.f32	s14, s16
 8001438:	e001      	b.n	800143e <main+0x2be>
 800143a:	eeb0 7a68 	vmov.f32	s14, s17
		if (m3 > MAX_PWM) m3 = MAX_PWM; else if (m3 < MIN_PWM) m3 = MIN_PWM;
 800143e:	eef4 6ae8 	vcmpe.f32	s13, s17
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	dc29      	bgt.n	800149c <main+0x31c>
 8001448:	eef4 6a48 	vcmp.f32	s13, s16
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	bf48      	it	mi
 8001452:	eef0 6a48 	vmovmi.f32	s13, s16
 8001456:	e023      	b.n	80014a0 <main+0x320>
 8001458:	54442d18 	.word	0x54442d18
 800145c:	400921fb 	.word	0x400921fb
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020800 	.word	0x40020800
 800146c:	200001d8 	.word	0x200001d8
 8001470:	40004400 	.word	0x40004400
 8001474:	20000268 	.word	0x20000268
 8001478:	20000220 	.word	0x20000220
 800147c:	40000400 	.word	0x40000400
 8001480:	200002b0 	.word	0x200002b0
 8001484:	40005400 	.word	0x40005400
 8001488:	000186a0 	.word	0x000186a0
 800148c:	08003bbc 	.word	0x08003bbc
 8001490:	43340000 	.word	0x43340000
 8001494:	44fa0000 	.word	0x44fa0000
 8001498:	447a0000 	.word	0x447a0000
 800149c:	eef0 6a68 	vmov.f32	s13, s17
		if (m4 > MAX_PWM) m4 = MAX_PWM; else if (m4 < MIN_PWM) m4 = MIN_PWM;
 80014a0:	eef4 7ae8 	vcmpe.f32	s15, s17
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	dc7f      	bgt.n	80015aa <main+0x42a>
 80014aa:	eef4 7a48 	vcmp.f32	s15, s16
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	bf48      	it	mi
 80014b4:	eef0 7a48 	vmovmi.f32	s15, s16
		PWM_D9_Target = (uint32_t)m1;
 80014b8:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80014bc:	4b3c      	ldr	r3, [pc, #240]	@ (80015b0 <main+0x430>)
 80014be:	ed83 6a00 	vstr	s12, [r3]
		PWM_D6_Target = (uint32_t)m2;
 80014c2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80014c6:	4b3b      	ldr	r3, [pc, #236]	@ (80015b4 <main+0x434>)
 80014c8:	ed83 7a00 	vstr	s14, [r3]
		PWM_D5_Target = (uint32_t)m3;
 80014cc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80014d0:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <main+0x438>)
 80014d2:	edc3 6a00 	vstr	s13, [r3]
		PWM_D3_Target = (uint32_t)m4;
 80014d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <main+0x43c>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]
		UpdatePWM(); // This runs as fast as possible
 80014e0:	f7ff fd90 	bl	8001004 <UpdatePWM>
		uint32_t now = HAL_GetTick();
 80014e4:	f000 fb2e 	bl	8001b44 <HAL_GetTick>
 80014e8:	4681      	mov	r9, r0
		if (now - lastBlink >= 500)
 80014ea:	1b83      	subs	r3, r0, r6
 80014ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014f0:	f4bf af73 	bcs.w	80013da <main+0x25a>
		MPU6050_ReadAll(&hi2c1, &imu_data);
 80014f4:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 80015d8 <main+0x458>
 80014f8:	4651      	mov	r1, sl
 80014fa:	4831      	ldr	r0, [pc, #196]	@ (80015c0 <main+0x440>)
 80014fc:	f000 f8d3 	bl	80016a6 <MPU6050_ReadAll>
		MPU6050_ConvertToPhysical(&imu_data, &imu_phys);
 8001500:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 80015dc <main+0x45c>
 8001504:	4649      	mov	r1, r9
 8001506:	4650      	mov	r0, sl
 8001508:	f000 f912 	bl	8001730 <MPU6050_ConvertToPhysical>
		IMU_UpdateAverage(&imu_phys);
 800150c:	4648      	mov	r0, r9
 800150e:	f7ff fc45 	bl	8000d9c <IMU_UpdateAverage>
		float pitch = atanf(imu_avg.accel_y /
 8001512:	4b2c      	ldr	r3, [pc, #176]	@ (80015c4 <main+0x444>)
 8001514:	ed93 0a01 	vldr	s0, [r3, #4]
				sqrtf(imu_avg.accel_x * imu_avg.accel_x +
 8001518:	edd3 9a00 	vldr	s19, [r3]
						imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 800151c:	ed93 aa02 	vldr	s20, [r3, #8]
				sqrtf(imu_avg.accel_x * imu_avg.accel_x +
 8001520:	ee69 7aa9 	vmul.f32	s15, s19, s19
						imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 8001524:	ee2a 7a0a 	vmul.f32	s14, s20, s20
				sqrtf(imu_avg.accel_x * imu_avg.accel_x +
 8001528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152c:	eeb1 7ae7 	vsqrt.f32	s14, s15
		float pitch = atanf(imu_avg.accel_y /
 8001530:	ee80 0a07 	vdiv.f32	s0, s0, s14
 8001534:	f002 fa3e 	bl	80039b4 <atanf>
 8001538:	eef0 aa40 	vmov.f32	s21, s0
		float roll  = atanf(-imu_avg.accel_x / imu_avg.accel_z) * 180.0f / M_PI;
 800153c:	eef1 9a69 	vneg.f32	s19, s19
 8001540:	ee89 0a8a 	vdiv.f32	s0, s19, s20
 8001544:	f002 fa36 	bl	80039b4 <atanf>
 8001548:	eeb0 aa40 	vmov.f32	s20, s0
						imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 800154c:	ee6a 7a89 	vmul.f32	s15, s21, s18
 8001550:	ee17 0a90 	vmov	r0, s15
 8001554:	f7fe ffc4 	bl	80004e0 <__aeabi_f2d>
 8001558:	4622      	mov	r2, r4
 800155a:	462b      	mov	r3, r5
 800155c:	f7ff f942 	bl	80007e4 <__aeabi_ddiv>
		float pitch = atanf(imu_avg.accel_y /
 8001560:	f7ff fa28 	bl	80009b4 <__aeabi_d2f>
 8001564:	ee07 0a90 	vmov	s15, r0
		float error_pitch = target_pitch - pitch;
 8001568:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <main+0x448>)
 800156a:	edd3 9a00 	vldr	s19, [r3]
 800156e:	ee79 9ae7 	vsub.f32	s19, s19, s15
		float roll  = atanf(-imu_avg.accel_x / imu_avg.accel_z) * 180.0f / M_PI;
 8001572:	ee6a 7a09 	vmul.f32	s15, s20, s18
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe ffb1 	bl	80004e0 <__aeabi_f2d>
 800157e:	4622      	mov	r2, r4
 8001580:	462b      	mov	r3, r5
 8001582:	f7ff f92f 	bl	80007e4 <__aeabi_ddiv>
 8001586:	f7ff fa15 	bl	80009b4 <__aeabi_d2f>
 800158a:	ee07 0a90 	vmov	s15, r0
		float error_roll  = target_roll - roll;
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <main+0x44c>)
 8001590:	edd3 5a00 	vldr	s11, [r3]
 8001594:	ee75 5ae7 	vsub.f32	s11, s11, s15
		float throttle = control_enabled ? throttle_base : 0.0f;
 8001598:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <main+0x450>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f43f af22 	beq.w	80013e6 <main+0x266>
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <main+0x454>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	e71f      	b.n	80013ea <main+0x26a>
		if (m4 > MAX_PWM) m4 = MAX_PWM; else if (m4 < MIN_PWM) m4 = MIN_PWM;
 80015aa:	eef0 7a68 	vmov.f32	s15, s17
 80015ae:	e783      	b.n	80014b8 <main+0x338>
 80015b0:	200001c4 	.word	0x200001c4
 80015b4:	200001c0 	.word	0x200001c0
 80015b8:	200001bc 	.word	0x200001bc
 80015bc:	200001b8 	.word	0x200001b8
 80015c0:	200002b0 	.word	0x200002b0
 80015c4:	20000170 	.word	0x20000170
 80015c8:	20000034 	.word	0x20000034
 80015cc:	20000030 	.word	0x20000030
 80015d0:	20000038 	.word	0x20000038
 80015d4:	20000000 	.word	0x20000000
 80015d8:	200001a8 	.word	0x200001a8
 80015dc:	2000018c 	.word	0x2000018c

080015e0 <MPU6050_Init>:
#define MPU6050_REG_ACCEL_XOUT_H 0x3B
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b510      	push	{r4, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	4604      	mov	r4, r0
	uint8_t data;

	/* Wake up the sensor */
	data = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2301      	movs	r3, #1
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	f10d 0217 	add.w	r2, sp, #23
 80015fa:	9200      	str	r2, [sp, #0]
 80015fc:	226b      	movs	r2, #107	@ 0x6b
 80015fe:	21d0      	movs	r1, #208	@ 0xd0
 8001600:	f000 ff62 	bl	80024c8 <HAL_I2C_Mem_Write>
 8001604:	b110      	cbz	r0, 800160c <MPU6050_Init+0x2c>
		return HAL_ERROR;
 8001606:	2001      	movs	r0, #1
	data = 0x08;
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
		return HAL_ERROR;

	return HAL_OK;
}
 8001608:	b006      	add	sp, #24
 800160a:	bd10      	pop	{r4, pc}
	data = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	2301      	movs	r3, #1
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	f10d 0217 	add.w	r2, sp, #23
 8001620:	9200      	str	r2, [sp, #0]
 8001622:	2219      	movs	r2, #25
 8001624:	21d0      	movs	r1, #208	@ 0xd0
 8001626:	4620      	mov	r0, r4
 8001628:	f000 ff4e 	bl	80024c8 <HAL_I2C_Mem_Write>
 800162c:	b108      	cbz	r0, 8001632 <MPU6050_Init+0x52>
		return HAL_ERROR;
 800162e:	2001      	movs	r0, #1
 8001630:	e7ea      	b.n	8001608 <MPU6050_Init+0x28>
	data = 0x03;
 8001632:	2303      	movs	r3, #3
 8001634:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	2301      	movs	r3, #1
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	f10d 0217 	add.w	r2, sp, #23
 8001646:	9200      	str	r2, [sp, #0]
 8001648:	221a      	movs	r2, #26
 800164a:	21d0      	movs	r1, #208	@ 0xd0
 800164c:	4620      	mov	r0, r4
 800164e:	f000 ff3b 	bl	80024c8 <HAL_I2C_Mem_Write>
 8001652:	b108      	cbz	r0, 8001658 <MPU6050_Init+0x78>
		return HAL_ERROR;
 8001654:	2001      	movs	r0, #1
 8001656:	e7d7      	b.n	8001608 <MPU6050_Init+0x28>
	data = 0x08;
 8001658:	2308      	movs	r3, #8
 800165a:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2301      	movs	r3, #1
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	f10d 0217 	add.w	r2, sp, #23
 800166c:	9200      	str	r2, [sp, #0]
 800166e:	221b      	movs	r2, #27
 8001670:	21d0      	movs	r1, #208	@ 0xd0
 8001672:	4620      	mov	r0, r4
 8001674:	f000 ff28 	bl	80024c8 <HAL_I2C_Mem_Write>
 8001678:	b108      	cbz	r0, 800167e <MPU6050_Init+0x9e>
		return HAL_ERROR;
 800167a:	2001      	movs	r0, #1
 800167c:	e7c4      	b.n	8001608 <MPU6050_Init+0x28>
	data = 0x08;
 800167e:	2308      	movs	r3, #8
 8001680:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	2301      	movs	r3, #1
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	f10d 0217 	add.w	r2, sp, #23
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	221c      	movs	r2, #28
 8001696:	21d0      	movs	r1, #208	@ 0xd0
 8001698:	4620      	mov	r0, r4
 800169a:	f000 ff15 	bl	80024c8 <HAL_I2C_Mem_Write>
 800169e:	3800      	subs	r0, #0
 80016a0:	bf18      	it	ne
 80016a2:	2001      	movne	r0, #1
 80016a4:	e7b0      	b.n	8001608 <MPU6050_Init+0x28>

080016a6 <MPU6050_ReadAll>:

HAL_StatusTypeDef MPU6050_ReadAll(I2C_HandleTypeDef *hi2c, MPU6050_Data_t *data)
{
 80016a6:	b510      	push	{r4, lr}
 80016a8:	b088      	sub	sp, #32
 80016aa:	460c      	mov	r4, r1
	uint8_t buf[14];
	if (HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_XOUT_H, 1, buf, sizeof(buf), HAL_MAX_DELAY) != HAL_OK)
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	230e      	movs	r3, #14
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	ab04      	add	r3, sp, #16
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	223b      	movs	r2, #59	@ 0x3b
 80016be:	21d0      	movs	r1, #208	@ 0xd0
 80016c0:	f000 ffb8 	bl	8002634 <HAL_I2C_Mem_Read>
 80016c4:	bb90      	cbnz	r0, 800172c <MPU6050_ReadAll+0x86>
		return HAL_ERROR;

	data->accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 80016c6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80016ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80016ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016d2:	8023      	strh	r3, [r4, #0]
	data->accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 80016d4:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80016d8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80016dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016e0:	8063      	strh	r3, [r4, #2]
	data->accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 80016e2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80016e6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80016ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016ee:	80a3      	strh	r3, [r4, #4]
	data->temp    = (int16_t)(buf[6] << 8 | buf[7]);
 80016f0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80016f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80016f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016fc:	81a3      	strh	r3, [r4, #12]
	data->gyro_x  = (int16_t)(buf[8] << 8 | buf[9]);
 80016fe:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001702:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001706:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800170a:	80e3      	strh	r3, [r4, #6]
	data->gyro_y  = (int16_t)(buf[10] << 8 | buf[11]);
 800170c:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8001710:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8001714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001718:	8123      	strh	r3, [r4, #8]
	data->gyro_z  = (int16_t)(buf[12] << 8 | buf[13]);
 800171a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800171e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8001722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001726:	8163      	strh	r3, [r4, #10]

	return HAL_OK;
}
 8001728:	b008      	add	sp, #32
 800172a:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 800172c:	2001      	movs	r0, #1
 800172e:	e7fb      	b.n	8001728 <MPU6050_ReadAll+0x82>

08001730 <MPU6050_ConvertToPhysical>:
{
	const float accel_lsb = 8192.0f;   /* LSB/g for +-4g */
	const float gyro_lsb  = 65.5f;     /* LSB/(deg/s) for +-500dps */
	const float g = 9.80665f;          /* m/s^2 per g */

	out->accel_x = (raw->accel_x / accel_lsb) * g;
 8001730:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80017e4 <MPU6050_ConvertToPhysical+0xb4>
 8001740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001744:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80017e8 <MPU6050_ConvertToPhysical+0xb8>
 8001748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174c:	edc1 7a00 	vstr	s15, [r1]
	out->accel_y = (raw->accel_y / accel_lsb) * g;
 8001750:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	edc1 7a01 	vstr	s15, [r1, #4]
	out->accel_z = (raw->accel_z / accel_lsb) * g;
 8001768:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001774:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177c:	edc1 7a02 	vstr	s15, [r1, #8]

	out->gyro_x  = raw->gyro_x / gyro_lsb;
 8001780:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8001784:	ee07 3a10 	vmov	s14, r3
 8001788:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800178c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80017ec <MPU6050_ConvertToPhysical+0xbc>
 8001790:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001794:	edc1 6a03 	vstr	s13, [r1, #12]
	out->gyro_y  = raw->gyro_y / gyro_lsb;
 8001798:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800179c:	ee07 3a10 	vmov	s14, r3
 80017a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017a8:	edc1 6a04 	vstr	s13, [r1, #16]
	out->gyro_z  = raw->gyro_z / gyro_lsb;
 80017ac:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80017b0:	ee07 3a10 	vmov	s14, r3
 80017b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017bc:	edc1 6a05 	vstr	s13, [r1, #20]

	out->temp = (raw->temp / 340.0f) + 36.53f;
 80017c0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80017c4:	ee07 3a10 	vmov	s14, r3
 80017c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017cc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80017f0 <MPU6050_ConvertToPhysical+0xc0>
 80017d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80017f4 <MPU6050_ConvertToPhysical+0xc4>
 80017d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017dc:	edc1 7a06 	vstr	s15, [r1, #24]
}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	39000000 	.word	0x39000000
 80017e8:	411ce80a 	.word	0x411ce80a
 80017ec:	42830000 	.word	0x42830000
 80017f0:	43aa0000 	.word	0x43aa0000
 80017f4:	42121eb8 	.word	0x42121eb8

080017f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b500      	push	{lr}
 80017fa:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fc:	2100      	movs	r1, #0
 80017fe:	9100      	str	r1, [sp, #0]
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <HAL_MspInit+0x3c>)
 8001802:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001804:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001808:	645a      	str	r2, [r3, #68]	@ 0x44
 800180a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800180c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001810:	9200      	str	r2, [sp, #0]
 8001812:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	9101      	str	r1, [sp, #4]
 8001816:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001818:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001828:	2007      	movs	r0, #7
 800182a:	f000 f991 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	b003      	add	sp, #12
 8001830:	f85d fb04 	ldr.w	pc, [sp], #4
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001838:	b530      	push	{r4, r5, lr}
 800183a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	2300      	movs	r3, #0
 800183e:	9303      	str	r3, [sp, #12]
 8001840:	9304      	str	r3, [sp, #16]
 8001842:	9305      	str	r3, [sp, #20]
 8001844:	9306      	str	r3, [sp, #24]
 8001846:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001848:	6802      	ldr	r2, [r0, #0]
 800184a:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_I2C_MspInit+0x64>)
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001850:	b009      	add	sp, #36	@ 0x24
 8001852:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	2500      	movs	r5, #0
 8001856:	9501      	str	r5, [sp, #4]
 8001858:	4c11      	ldr	r4, [pc, #68]	@ (80018a0 <HAL_I2C_MspInit+0x68>)
 800185a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6323      	str	r3, [r4, #48]	@ 0x30
 8001862:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800186c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001870:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187a:	2304      	movs	r3, #4
 800187c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	a903      	add	r1, sp, #12
 8001880:	4808      	ldr	r0, [pc, #32]	@ (80018a4 <HAL_I2C_MspInit+0x6c>)
 8001882:	f000 f9cf 	bl	8001c24 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001886:	9502      	str	r5, [sp, #8]
 8001888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800188a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800188e:	6423      	str	r3, [r4, #64]	@ 0x40
 8001890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001892:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	9b02      	ldr	r3, [sp, #8]
}
 800189a:	e7d9      	b.n	8001850 <HAL_I2C_MspInit+0x18>
 800189c:	40005400 	.word	0x40005400
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020400 	.word	0x40020400

080018a8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018a8:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 80018aa:	6803      	ldr	r3, [r0, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018b0:	d004      	beq.n	80018bc <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <HAL_TIM_PWM_MspInit+0x48>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00e      	beq.n	80018d6 <HAL_TIM_PWM_MspInit+0x2e>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018b8:	b002      	add	sp, #8
 80018ba:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80018c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	9b00      	ldr	r3, [sp, #0]
 80018d4:	e7f0      	b.n	80018b8 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80018dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018de:	f042 0202 	orr.w	r2, r2, #2
 80018e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	9b01      	ldr	r3, [sp, #4]
}
 80018ee:	e7e3      	b.n	80018b8 <HAL_TIM_PWM_MspInit+0x10>
 80018f0:	40000400 	.word	0x40000400
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f8:	b530      	push	{r4, r5, lr}
 80018fa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	2300      	movs	r3, #0
 80018fe:	9303      	str	r3, [sp, #12]
 8001900:	9304      	str	r3, [sp, #16]
 8001902:	9305      	str	r3, [sp, #20]
 8001904:	9306      	str	r3, [sp, #24]
 8001906:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 8001908:	6803      	ldr	r3, [r0, #0]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800190e:	d004      	beq.n	800191a <HAL_TIM_MspPostInit+0x22>

    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001910:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <HAL_TIM_MspPostInit+0xa8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d019      	beq.n	800194a <HAL_TIM_MspPostInit+0x52>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001916:	b009      	add	sp, #36	@ 0x24
 8001918:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <HAL_TIM_MspPostInit+0xac>)
 8001920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001922:	f042 0202 	orr.w	r2, r2, #2
 8001926:	631a      	str	r2, [r3, #48]	@ 0x30
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001932:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001936:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800193c:	2301      	movs	r3, #1
 800193e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	a903      	add	r1, sp, #12
 8001942:	4819      	ldr	r0, [pc, #100]	@ (80019a8 <HAL_TIM_MspPostInit+0xb0>)
 8001944:	f000 f96e 	bl	8001c24 <HAL_GPIO_Init>
 8001948:	e7e5      	b.n	8001916 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2500      	movs	r5, #0
 800194c:	9501      	str	r5, [sp, #4]
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_TIM_MspPostInit+0xac>)
 8001950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001952:	f042 0204 	orr.w	r2, r2, #4
 8001956:	631a      	str	r2, [r3, #48]	@ 0x30
 8001958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800195a:	f002 0204 	and.w	r2, r2, #4
 800195e:	9201      	str	r2, [sp, #4]
 8001960:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	9502      	str	r5, [sp, #8]
 8001964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001966:	f042 0202 	orr.w	r2, r2, #2
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	9302      	str	r3, [sp, #8]
 8001974:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2402      	movs	r4, #2
 800197c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800197e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001980:	a903      	add	r1, sp, #12
 8001982:	480a      	ldr	r0, [pc, #40]	@ (80019ac <HAL_TIM_MspPostInit+0xb4>)
 8001984:	f000 f94e 	bl	8001c24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001988:	2310      	movs	r3, #16
 800198a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001992:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	a903      	add	r1, sp, #12
 8001996:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <HAL_TIM_MspPostInit+0xb0>)
 8001998:	f000 f944 	bl	8001c24 <HAL_GPIO_Init>
}
 800199c:	e7bb      	b.n	8001916 <HAL_TIM_MspPostInit+0x1e>
 800199e:	bf00      	nop
 80019a0:	40000400 	.word	0x40000400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800

080019b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b0:	b500      	push	{lr}
 80019b2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	2300      	movs	r3, #0
 80019b6:	9303      	str	r3, [sp, #12]
 80019b8:	9304      	str	r3, [sp, #16]
 80019ba:	9305      	str	r3, [sp, #20]
 80019bc:	9306      	str	r3, [sp, #24]
 80019be:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80019c0:	6802      	ldr	r2, [r0, #0]
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_UART_MspInit+0x68>)
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d002      	beq.n	80019ce <HAL_UART_MspInit+0x1e>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80019c8:	b009      	add	sp, #36	@ 0x24
 80019ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ce:	2100      	movs	r1, #0
 80019d0:	9101      	str	r1, [sp, #4]
 80019d2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80019d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019d8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80019dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80019de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80019e4:	9201      	str	r2, [sp, #4]
 80019e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	9102      	str	r1, [sp, #8]
 80019ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019fc:	230c      	movs	r3, #12
 80019fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	a903      	add	r1, sp, #12
 8001a0e:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <HAL_UART_MspInit+0x6c>)
 8001a10:	f000 f908 	bl	8001c24 <HAL_GPIO_Init>
}
 8001a14:	e7d8      	b.n	80019c8 <HAL_UART_MspInit+0x18>
 8001a16:	bf00      	nop
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	40020000 	.word	0x40020000

08001a20 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler>

08001a22 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler>

08001a24 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <MemManage_Handler>

08001a26 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler>

08001a28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler>

08001a2a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	4770      	bx	lr

08001a2e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a32:	f000 f87b 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a36:	bd08      	pop	{r3, pc}

08001a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a3a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a3e:	f000 f9f7 	bl	8001e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a42:	bd08      	pop	{r3, pc}

08001a44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a44:	4a03      	ldr	r2, [pc, #12]	@ (8001a54 <SystemInit+0x10>)
 8001a46:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001a4a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a5c:	f7ff fff2 	bl	8001a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a86:	f001 ff71 	bl	800396c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff fb79 	bl	8001180 <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a9c:	08003c1c 	.word	0x08003c1c
  ldr r2, =_sbss
 8001aa0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001aa4:	20000308 	.word	0x20000308

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_InitTick+0x40>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001abc:	4a0c      	ldr	r2, [pc, #48]	@ (8001af0 <HAL_InitTick+0x44>)
 8001abe:	6810      	ldr	r0, [r2, #0]
 8001ac0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ac4:	f000 f89a 	bl	8001bfc <HAL_SYSTICK_Config>
 8001ac8:	b968      	cbnz	r0, 8001ae6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	2c0f      	cmp	r4, #15
 8001acc:	d901      	bls.n	8001ad2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001ace:	2001      	movs	r0, #1
 8001ad0:	e00a      	b.n	8001ae8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ada:	f000 f84b 	bl	8001b74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_InitTick+0x48>)
 8001ae0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001ae6:	2001      	movs	r0, #1
}
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	bf00      	nop
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000004 	.word	0x20000004
 8001af4:	2000000c 	.word	0x2000000c

08001af8 <HAL_Init>:
{
 8001af8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_Init+0x30>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b0a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b12:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f81b 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ffc6 	bl	8001aac <HAL_InitTick>
  HAL_MspInit();
 8001b20:	f7ff fe6a 	bl	80017f8 <HAL_MspInit>
}
 8001b24:	2000      	movs	r0, #0
 8001b26:	bd08      	pop	{r3, pc}
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b2c:	4a03      	ldr	r2, [pc, #12]	@ (8001b3c <HAL_IncTick+0x10>)
 8001b2e:	6811      	ldr	r1, [r2, #0]
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <HAL_IncTick+0x14>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	440b      	add	r3, r1
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000304 	.word	0x20000304
 8001b40:	20000008 	.word	0x20000008

08001b44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b44:	4b01      	ldr	r3, [pc, #4]	@ (8001b4c <HAL_GetTick+0x8>)
 8001b46:	6818      	ldr	r0, [r3, #0]
}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000304 	.word	0x20000304

08001b50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b52:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	0203      	lsls	r3, r0, #8
 8001b56:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b5e:	0412      	lsls	r2, r2, #16
 8001b60:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001b6c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b74:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b76:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_NVIC_SetPriority+0x64>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7e:	f1c3 0c07 	rsb	ip, r3, #7
 8001b82:	f1bc 0f04 	cmp.w	ip, #4
 8001b86:	bf28      	it	cs
 8001b88:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8c:	f103 0e04 	add.w	lr, r3, #4
 8001b90:	f1be 0f06 	cmp.w	lr, #6
 8001b94:	bf8c      	ite	hi
 8001b96:	3b03      	subhi	r3, #3
 8001b98:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9a:	f04f 3eff 	mov.w	lr, #4294967295
 8001b9e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001ba2:	ea21 010c 	bic.w	r1, r1, ip
 8001ba6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	fa0e fe03 	lsl.w	lr, lr, r3
 8001bac:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	db09      	blt.n	8001bca <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	0109      	lsls	r1, r1, #4
 8001bb8:	b2c9      	uxtb	r1, r1
 8001bba:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001bbe:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001bc2:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	f000 000f 	and.w	r0, r0, #15
 8001bce:	0109      	lsls	r1, r1, #4
 8001bd0:	b2c9      	uxtb	r1, r1
 8001bd2:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <HAL_NVIC_SetPriority+0x68>)
 8001bd4:	5419      	strb	r1, [r3, r0]
 8001bd6:	e7f6      	b.n	8001bc6 <HAL_NVIC_SetPriority+0x52>
 8001bd8:	e000ed00 	.word	0xe000ed00
 8001bdc:	e000ed14 	.word	0xe000ed14

08001be0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001be0:	2800      	cmp	r0, #0
 8001be2:	db07      	blt.n	8001bf4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be4:	0941      	lsrs	r1, r0, #5
 8001be6:	f000 001f 	and.w	r0, r0, #31
 8001bea:	2301      	movs	r3, #1
 8001bec:	4083      	lsls	r3, r0
 8001bee:	4a02      	ldr	r2, [pc, #8]	@ (8001bf8 <HAL_NVIC_EnableIRQ+0x18>)
 8001bf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	3801      	subs	r0, #1
 8001bfe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001c02:	d20b      	bcs.n	8001c1c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c04:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001c08:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	4a05      	ldr	r2, [pc, #20]	@ (8001c20 <HAL_SYSTICK_Config+0x24>)
 8001c0c:	21f0      	movs	r1, #240	@ 0xf0
 8001c0e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c12:	2000      	movs	r0, #0
 8001c14:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	2207      	movs	r2, #7
 8001c18:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c1c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2c:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c2e:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c32:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c34:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c38:	4c72      	ldr	r4, [pc, #456]	@ (8001e04 <HAL_GPIO_Init+0x1e0>)
 8001c3a:	e04b      	b.n	8001cd4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001c3c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c3e:	fa05 fa02 	lsl.w	sl, r5, r2
 8001c42:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	68cf      	ldr	r7, [r1, #12]
 8001c48:	4097      	lsls	r7, r2
 8001c4a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001c4e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c50:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c52:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c56:	684f      	ldr	r7, [r1, #4]
 8001c58:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001c5c:	409f      	lsls	r7, r3
 8001c5e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001c62:	6047      	str	r7, [r0, #4]
 8001c64:	e044      	b.n	8001cf0 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c66:	f04f 0c00 	mov.w	ip, #0
 8001c6a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001c6e:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c72:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8001c76:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7c:	684e      	ldr	r6, [r1, #4]
 8001c7e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001c82:	bf0c      	ite	eq
 8001c84:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001c88:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8001c8c:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001c8e:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c90:	684e      	ldr	r6, [r1, #4]
 8001c92:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001c96:	bf0c      	ite	eq
 8001c98:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001c9c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8001ca0:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001ca2:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca4:	684e      	ldr	r6, [r1, #4]
 8001ca6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001caa:	bf0c      	ite	eq
 8001cac:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001cb0:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8001cb4:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb6:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb8:	684e      	ldr	r6, [r1, #4]
 8001cba:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	bf0c      	ite	eq
 8001cc0:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001cc4:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8001cc8:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	3301      	adds	r3, #1
 8001ccc:	3202      	adds	r2, #2
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	f000 8094 	beq.w	8001dfc <HAL_GPIO_Init+0x1d8>
    ioposition = 0x01U << position;
 8001cd4:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd8:	680f      	ldr	r7, [r1, #0]
 8001cda:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8001cde:	ea3c 0707 	bics.w	r7, ip, r7
 8001ce2:	d1f2      	bne.n	8001cca <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce4:	684f      	ldr	r7, [r1, #4]
 8001ce6:	f007 0703 	and.w	r7, r7, #3
 8001cea:	3f01      	subs	r7, #1
 8001cec:	2f01      	cmp	r7, #1
 8001cee:	d9a5      	bls.n	8001c3c <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf0:	684f      	ldr	r7, [r1, #4]
 8001cf2:	f007 0703 	and.w	r7, r7, #3
 8001cf6:	2f03      	cmp	r7, #3
 8001cf8:	d023      	beq.n	8001d42 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 8001cfa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfc:	fa05 fc02 	lsl.w	ip, r5, r2
 8001d00:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	688f      	ldr	r7, [r1, #8]
 8001d06:	4097      	lsls	r7, r2
 8001d08:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8001d0c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	684f      	ldr	r7, [r1, #4]
 8001d10:	f007 0703 	and.w	r7, r7, #3
 8001d14:	2f02      	cmp	r7, #2
 8001d16:	d114      	bne.n	8001d42 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001d1c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001d20:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d24:	f003 0b07 	and.w	fp, r3, #7
 8001d28:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001d2c:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001d30:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d34:	690f      	ldr	r7, [r1, #16]
 8001d36:	fa07 f70b 	lsl.w	r7, r7, fp
 8001d3a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001d3e:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8001d42:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d44:	fa05 fc02 	lsl.w	ip, r5, r2
 8001d48:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4c:	684f      	ldr	r7, [r1, #4]
 8001d4e:	f007 0703 	and.w	r7, r7, #3
 8001d52:	4097      	lsls	r7, r2
 8001d54:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8001d58:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d5a:	684f      	ldr	r7, [r1, #4]
 8001d5c:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8001d60:	d0b3      	beq.n	8001cca <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2700      	movs	r7, #0
 8001d64:	9701      	str	r7, [sp, #4]
 8001d66:	4e28      	ldr	r6, [pc, #160]	@ (8001e08 <HAL_GPIO_Init+0x1e4>)
 8001d68:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8001d6a:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8001d6e:	6477      	str	r7, [r6, #68]	@ 0x44
 8001d70:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8001d72:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 8001d76:	9701      	str	r7, [sp, #4]
 8001d78:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7a:	f023 0703 	bic.w	r7, r3, #3
 8001d7e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001d82:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001d86:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8a:	f003 0b03 	and.w	fp, r3, #3
 8001d8e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001d92:	fa08 fc0b 	lsl.w	ip, r8, fp
 8001d96:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9a:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 8001d9e:	42b0      	cmp	r0, r6
 8001da0:	f43f af61 	beq.w	8001c66 <HAL_GPIO_Init+0x42>
 8001da4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001da8:	42b0      	cmp	r0, r6
 8001daa:	d018      	beq.n	8001dde <HAL_GPIO_Init+0x1ba>
 8001dac:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001db0:	42b0      	cmp	r0, r6
 8001db2:	d017      	beq.n	8001de4 <HAL_GPIO_Init+0x1c0>
 8001db4:	f8df c054 	ldr.w	ip, [pc, #84]	@ 8001e0c <HAL_GPIO_Init+0x1e8>
 8001db8:	4560      	cmp	r0, ip
 8001dba:	d016      	beq.n	8001dea <HAL_GPIO_Init+0x1c6>
 8001dbc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001dc0:	4560      	cmp	r0, ip
 8001dc2:	d015      	beq.n	8001df0 <HAL_GPIO_Init+0x1cc>
 8001dc4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001dc8:	4560      	cmp	r0, ip
 8001dca:	d014      	beq.n	8001df6 <HAL_GPIO_Init+0x1d2>
 8001dcc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001dd0:	4560      	cmp	r0, ip
 8001dd2:	bf14      	ite	ne
 8001dd4:	f04f 0c07 	movne.w	ip, #7
 8001dd8:	f04f 0c06 	moveq.w	ip, #6
 8001ddc:	e745      	b.n	8001c6a <HAL_GPIO_Init+0x46>
 8001dde:	f04f 0c01 	mov.w	ip, #1
 8001de2:	e742      	b.n	8001c6a <HAL_GPIO_Init+0x46>
 8001de4:	f04f 0c02 	mov.w	ip, #2
 8001de8:	e73f      	b.n	8001c6a <HAL_GPIO_Init+0x46>
 8001dea:	f04f 0c03 	mov.w	ip, #3
 8001dee:	e73c      	b.n	8001c6a <HAL_GPIO_Init+0x46>
 8001df0:	f04f 0c04 	mov.w	ip, #4
 8001df4:	e739      	b.n	8001c6a <HAL_GPIO_Init+0x46>
 8001df6:	f04f 0c05 	mov.w	ip, #5
 8001dfa:	e736      	b.n	8001c6a <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001dfc:	b003      	add	sp, #12
 8001dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e02:	bf00      	nop
 8001e04:	40013c00 	.word	0x40013c00
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020c00 	.word	0x40020c00

08001e10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	b10a      	cbz	r2, 8001e16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e12:	6181      	str	r1, [r0, #24]
 8001e14:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e16:	0409      	lsls	r1, r1, #16
 8001e18:	6181      	str	r1, [r0, #24]
  }
}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e1c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e1e:	ea01 0203 	and.w	r2, r1, r3
 8001e22:	ea21 0103 	bic.w	r1, r1, r3
 8001e26:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001e2a:	6181      	str	r1, [r0, #24]
}
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e30:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e32:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4203      	tst	r3, r0
 8001e38:	d100      	bne.n	8001e3c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001e3a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3c:	4b02      	ldr	r3, [pc, #8]	@ (8001e48 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001e3e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e40:	f7ff f91a 	bl	8001078 <HAL_GPIO_EXTI_Callback>
}
 8001e44:	e7f9      	b.n	8001e3a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001e46:	bf00      	nop
 8001e48:	40013c00 	.word	0x40013c00

08001e4c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e4c:	6803      	ldr	r3, [r0, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001e54:	d101      	bne.n	8001e5a <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001e56:	2000      	movs	r0, #0
}
 8001e58:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e5e:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e64:	2220      	movs	r2, #32
 8001e66:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e6a:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e6e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001e70:	f042 0204 	orr.w	r2, r2, #4
 8001e74:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8001e76:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	4770      	bx	lr

08001e7e <I2C_WaitOnFlagUntilTimeout>:
{
 8001e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e82:	4605      	mov	r5, r0
 8001e84:	460c      	mov	r4, r1
 8001e86:	4616      	mov	r6, r2
 8001e88:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e8a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001e8e:	f1b8 0f01 	cmp.w	r8, #1
 8001e92:	682b      	ldr	r3, [r5, #0]
 8001e94:	bf0c      	ite	eq
 8001e96:	695b      	ldreq	r3, [r3, #20]
 8001e98:	699b      	ldrne	r3, [r3, #24]
 8001e9a:	ea24 0c03 	bic.w	ip, r4, r3
 8001e9e:	fa1f fc8c 	uxth.w	ip, ip
 8001ea2:	fabc fc8c 	clz	ip, ip
 8001ea6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001eaa:	4566      	cmp	r6, ip
 8001eac:	d127      	bne.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 8001eae:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001eb2:	d0ec      	beq.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb4:	f7ff fe46 	bl	8001b44 <HAL_GetTick>
 8001eb8:	9b06      	ldr	r3, [sp, #24]
 8001eba:	1ac0      	subs	r0, r0, r3
 8001ebc:	42b8      	cmp	r0, r7
 8001ebe:	d801      	bhi.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x46>
 8001ec0:	2f00      	cmp	r7, #0
 8001ec2:	d1e4      	bne.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ec4:	f1b8 0f01 	cmp.w	r8, #1
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	bf0c      	ite	eq
 8001ecc:	695b      	ldreq	r3, [r3, #20]
 8001ece:	699b      	ldrne	r3, [r3, #24]
 8001ed0:	ea24 0303 	bic.w	r3, r4, r3
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	429e      	cmp	r6, r3
 8001ede:	d1d6      	bne.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001eea:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001eee:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001ef0:	f042 0220 	orr.w	r2, r2, #32
 8001ef4:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ef6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001efa:	2001      	movs	r0, #1
 8001efc:	e000      	b.n	8001f00 <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8001efe:	2000      	movs	r0, #0
}
 8001f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f08:	4605      	mov	r5, r0
 8001f0a:	460e      	mov	r6, r1
 8001f0c:	4617      	mov	r7, r2
 8001f0e:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f10:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001f14:	f1b8 0f01 	cmp.w	r8, #1
 8001f18:	682b      	ldr	r3, [r5, #0]
 8001f1a:	bf0c      	ite	eq
 8001f1c:	695c      	ldreq	r4, [r3, #20]
 8001f1e:	699c      	ldrne	r4, [r3, #24]
 8001f20:	ea26 0404 	bic.w	r4, r6, r4
 8001f24:	b2a4      	uxth	r4, r4
 8001f26:	3c00      	subs	r4, #0
 8001f28:	bf18      	it	ne
 8001f2a:	2401      	movne	r4, #1
 8001f2c:	2c00      	cmp	r4, #0
 8001f2e:	d044      	beq.n	8001fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f30:	682b      	ldr	r3, [r5, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001f38:	d127      	bne.n	8001f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8001f3a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001f3e:	d0e9      	beq.n	8001f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f40:	f7ff fe00 	bl	8001b44 <HAL_GetTick>
 8001f44:	eba0 0009 	sub.w	r0, r0, r9
 8001f48:	42b8      	cmp	r0, r7
 8001f4a:	d801      	bhi.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8001f4c:	2f00      	cmp	r7, #0
 8001f4e:	d1e1      	bne.n	8001f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f50:	f1b8 0f01 	cmp.w	r8, #1
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	bf0c      	ite	eq
 8001f58:	695b      	ldreq	r3, [r3, #20]
 8001f5a:	699b      	ldrne	r3, [r3, #24]
 8001f5c:	ea26 0303 	bic.w	r3, r6, r3
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b00      	subs	r3, #0
 8001f64:	bf18      	it	ne
 8001f66:	2301      	movne	r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0d3      	beq.n	8001f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f70:	2220      	movs	r2, #32
 8001f72:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f76:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f7a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001f7c:	f042 0220 	orr.w	r2, r2, #32
 8001f80:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001f82:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001f86:	2001      	movs	r0, #1
 8001f88:	e015      	b.n	8001fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f90:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f92:	682b      	ldr	r3, [r5, #0]
 8001f94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f98:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa4:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fa8:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001faa:	f042 0204 	orr.w	r2, r2, #4
 8001fae:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001fb0:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001fb4:	2001      	movs	r0, #1
}
 8001fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e7fb      	b.n	8001fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08001fbe <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001fbe:	b570      	push	{r4, r5, r6, lr}
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	460d      	mov	r5, r1
 8001fc4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001fce:	d121      	bne.n	8002014 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ff3b 	bl	8001e4c <I2C_IsAcknowledgeFailed>
 8001fd6:	b9f8      	cbnz	r0, 8002018 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001fd8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001fdc:	d0f3      	beq.n	8001fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fde:	f7ff fdb1 	bl	8001b44 <HAL_GetTick>
 8001fe2:	1b80      	subs	r0, r0, r6
 8001fe4:	42a8      	cmp	r0, r5
 8001fe6:	d801      	bhi.n	8001fec <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	d1ec      	bne.n	8001fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001ff4:	d1e7      	bne.n	8001fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002000:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002004:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800200c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002010:	2001      	movs	r0, #1
 8002012:	e000      	b.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8002014:	2000      	movs	r0, #0
}
 8002016:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002018:	2001      	movs	r0, #1
 800201a:	e7fc      	b.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

0800201c <I2C_RequestMemoryWrite>:
{
 800201c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002020:	b085      	sub	sp, #20
 8002022:	4604      	mov	r4, r0
 8002024:	460d      	mov	r5, r1
 8002026:	4691      	mov	r9, r2
 8002028:	461f      	mov	r7, r3
 800202a:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800202e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002030:	6803      	ldr	r3, [r0, #0]
 8002032:	6819      	ldr	r1, [r3, #0]
 8002034:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002038:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800203a:	9600      	str	r6, [sp, #0]
 800203c:	4643      	mov	r3, r8
 800203e:	2200      	movs	r2, #0
 8002040:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002044:	f7ff ff1b 	bl	8001e7e <I2C_WaitOnFlagUntilTimeout>
 8002048:	b970      	cbnz	r0, 8002068 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8002050:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002052:	4633      	mov	r3, r6
 8002054:	4642      	mov	r2, r8
 8002056:	4928      	ldr	r1, [pc, #160]	@ (80020f8 <I2C_RequestMemoryWrite+0xdc>)
 8002058:	4620      	mov	r0, r4
 800205a:	f7ff ff53 	bl	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800205e:	b168      	cbz	r0, 800207c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
}
 8002062:	b005      	add	sp, #20
 8002064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002070:	d040      	beq.n	80020f4 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002072:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002076:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002078:	2003      	movs	r0, #3
 800207a:	e7f2      	b.n	8002062 <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207c:	2300      	movs	r3, #0
 800207e:	9303      	str	r3, [sp, #12]
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	9203      	str	r2, [sp, #12]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	9303      	str	r3, [sp, #12]
 800208a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208c:	4632      	mov	r2, r6
 800208e:	4641      	mov	r1, r8
 8002090:	4620      	mov	r0, r4
 8002092:	f7ff ff94 	bl	8001fbe <I2C_WaitOnTXEFlagUntilTimeout>
 8002096:	b930      	cbnz	r0, 80020a6 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002098:	2f01      	cmp	r7, #1
 800209a:	d110      	bne.n	80020be <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	fa5f f689 	uxtb.w	r6, r9
 80020a2:	611e      	str	r6, [r3, #16]
 80020a4:	e7dd      	b.n	8002062 <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d001      	beq.n	80020b0 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80020ac:	2001      	movs	r0, #1
 80020ae:	e7d8      	b.n	8002062 <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b8:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80020ba:	2001      	movs	r0, #1
 80020bc:	e7d1      	b.n	8002062 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80020c4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c6:	4632      	mov	r2, r6
 80020c8:	4641      	mov	r1, r8
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7ff ff77 	bl	8001fbe <I2C_WaitOnTXEFlagUntilTimeout>
 80020d0:	b920      	cbnz	r0, 80020dc <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	fa5f f689 	uxtb.w	r6, r9
 80020d8:	611e      	str	r6, [r3, #16]
 80020da:	e7c2      	b.n	8002062 <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d001      	beq.n	80020e6 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 80020e2:	2001      	movs	r0, #1
 80020e4:	e7bd      	b.n	8002062 <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e6:	6822      	ldr	r2, [r4, #0]
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ee:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80020f0:	2001      	movs	r0, #1
 80020f2:	e7b6      	b.n	8002062 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e7b4      	b.n	8002062 <I2C_RequestMemoryWrite+0x46>
 80020f8:	00010002 	.word	0x00010002

080020fc <I2C_RequestMemoryRead>:
{
 80020fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	4604      	mov	r4, r0
 8002104:	460d      	mov	r5, r1
 8002106:	4616      	mov	r6, r2
 8002108:	4699      	mov	r9, r3
 800210a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800210c:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002110:	6802      	ldr	r2, [r0, #0]
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002118:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800211a:	6803      	ldr	r3, [r0, #0]
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002122:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002124:	f8cd 8000 	str.w	r8, [sp]
 8002128:	463b      	mov	r3, r7
 800212a:	2200      	movs	r2, #0
 800212c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002130:	f7ff fea5 	bl	8001e7e <I2C_WaitOnFlagUntilTimeout>
 8002134:	b980      	cbnz	r0, 8002158 <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002136:	fa5f fa85 	uxtb.w	sl, r5
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8002140:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002142:	4643      	mov	r3, r8
 8002144:	463a      	mov	r2, r7
 8002146:	4945      	ldr	r1, [pc, #276]	@ (800225c <I2C_RequestMemoryRead+0x160>)
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff fedb 	bl	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800214e:	b168      	cbz	r0, 800216c <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8002150:	2001      	movs	r0, #1
}
 8002152:	b004      	add	sp, #16
 8002154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002160:	d077      	beq.n	8002252 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002162:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002166:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002168:	2003      	movs	r0, #3
 800216a:	e7f2      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216c:	2300      	movs	r3, #0
 800216e:	9303      	str	r3, [sp, #12]
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	9203      	str	r2, [sp, #12]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	9303      	str	r3, [sp, #12]
 800217a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800217c:	4642      	mov	r2, r8
 800217e:	4639      	mov	r1, r7
 8002180:	4620      	mov	r0, r4
 8002182:	f7ff ff1c 	bl	8001fbe <I2C_WaitOnTXEFlagUntilTimeout>
 8002186:	b988      	cbnz	r0, 80021ac <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002188:	f1b9 0f01 	cmp.w	r9, #1
 800218c:	d11a      	bne.n	80021c4 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	b2f6      	uxtb	r6, r6
 8002192:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002194:	4642      	mov	r2, r8
 8002196:	4639      	mov	r1, r7
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff ff10 	bl	8001fbe <I2C_WaitOnTXEFlagUntilTimeout>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d030      	beq.n	8002204 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d026      	beq.n	80021f6 <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
 80021aa:	e7d2      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d001      	beq.n	80021b6 <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
 80021b4:	e7cd      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	6822      	ldr	r2, [r4, #0]
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021be:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
 80021c2:	e7c6      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	0a32      	lsrs	r2, r6, #8
 80021c8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	4642      	mov	r2, r8
 80021cc:	4639      	mov	r1, r7
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff fef5 	bl	8001fbe <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	b918      	cbnz	r0, 80021de <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	b2f6      	uxtb	r6, r6
 80021da:	611e      	str	r6, [r3, #16]
 80021dc:	e7da      	b.n	8002194 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d001      	beq.n	80021e8 <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
 80021e6:	e7b4      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f0:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80021f2:	2001      	movs	r0, #1
 80021f4:	e7ad      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	6822      	ldr	r2, [r4, #0]
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021fe:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
 8002202:	e7a6      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002204:	6822      	ldr	r2, [r4, #0]
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800220e:	f8cd 8000 	str.w	r8, [sp]
 8002212:	463b      	mov	r3, r7
 8002214:	2200      	movs	r2, #0
 8002216:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800221a:	4620      	mov	r0, r4
 800221c:	f7ff fe2f 	bl	8001e7e <I2C_WaitOnFlagUntilTimeout>
 8002220:	b968      	cbnz	r0, 800223e <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002222:	6822      	ldr	r2, [r4, #0]
 8002224:	f04a 0301 	orr.w	r3, sl, #1
 8002228:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800222a:	4643      	mov	r3, r8
 800222c:	463a      	mov	r2, r7
 800222e:	490b      	ldr	r1, [pc, #44]	@ (800225c <I2C_RequestMemoryRead+0x160>)
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff fe67 	bl	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002236:	3800      	subs	r0, #0
 8002238:	bf18      	it	ne
 800223a:	2001      	movne	r0, #1
 800223c:	e789      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002246:	d006      	beq.n	8002256 <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800224c:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800224e:	2003      	movs	r0, #3
 8002250:	e77f      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8002252:	2003      	movs	r0, #3
 8002254:	e77d      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8002256:	2003      	movs	r0, #3
 8002258:	e77b      	b.n	8002152 <I2C_RequestMemoryRead+0x56>
 800225a:	bf00      	nop
 800225c:	00010002 	.word	0x00010002

08002260 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	4604      	mov	r4, r0
 8002264:	460d      	mov	r5, r1
 8002266:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f013 0f04 	tst.w	r3, #4
 8002270:	d121      	bne.n	80022b6 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002272:	4620      	mov	r0, r4
 8002274:	f7ff fdea 	bl	8001e4c <I2C_IsAcknowledgeFailed>
 8002278:	b9f8      	cbnz	r0, 80022ba <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800227a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800227e:	d0f3      	beq.n	8002268 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002280:	f7ff fc60 	bl	8001b44 <HAL_GetTick>
 8002284:	1b80      	subs	r0, r0, r6
 8002286:	42a8      	cmp	r0, r5
 8002288:	d801      	bhi.n	800228e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800228a:	2d00      	cmp	r5, #0
 800228c:	d1ec      	bne.n	8002268 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f013 0f04 	tst.w	r3, #4
 8002296:	d1e7      	bne.n	8002268 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002298:	2300      	movs	r3, #0
 800229a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800229c:	2220      	movs	r2, #32
 800229e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80022a8:	f042 0220 	orr.w	r2, r2, #32
 80022ac:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80022ae:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80022b2:	2001      	movs	r0, #1
 80022b4:	e000      	b.n	80022b8 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80022b6:	2000      	movs	r0, #0
}
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80022ba:	2001      	movs	r0, #1
 80022bc:	e7fc      	b.n	80022b8 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080022be <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80022be:	b570      	push	{r4, r5, r6, lr}
 80022c0:	4604      	mov	r4, r0
 80022c2:	460d      	mov	r5, r1
 80022c4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022c6:	6803      	ldr	r3, [r0, #0]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80022ce:	d01b      	beq.n	8002308 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  return HAL_OK;
 80022d0:	2000      	movs	r0, #0
 80022d2:	e00e      	b.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d4:	f06f 0210 	mvn.w	r2, #16
 80022d8:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022da:	2300      	movs	r3, #0
 80022dc:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022de:	2220      	movs	r2, #32
 80022e0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022e8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80022ea:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80022ec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80022f0:	2001      	movs	r0, #1
}
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80022fc:	d010      	beq.n	8002320 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	6958      	ldr	r0, [r3, #20]
 8002302:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8002306:	d11a      	bne.n	800233e <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002308:	6958      	ldr	r0, [r3, #20]
 800230a:	f010 0f10 	tst.w	r0, #16
 800230e:	d1e1      	bne.n	80022d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002310:	f7ff fc18 	bl	8001b44 <HAL_GetTick>
 8002314:	1b80      	subs	r0, r0, r6
 8002316:	42a8      	cmp	r0, r5
 8002318:	d8ec      	bhi.n	80022f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800231a:	2d00      	cmp	r5, #0
 800231c:	d1ef      	bne.n	80022fe <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 800231e:	e7e9      	b.n	80022f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002320:	2300      	movs	r3, #0
 8002322:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002324:	2220      	movs	r2, #32
 8002326:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800232e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002330:	f042 0220 	orr.w	r2, r2, #32
 8002334:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002336:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 800233a:	2001      	movs	r0, #1
 800233c:	e7d9      	b.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
  return HAL_OK;
 800233e:	2000      	movs	r0, #0
 8002340:	e7d7      	b.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
	...

08002344 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002344:	2800      	cmp	r0, #0
 8002346:	f000 80b0 	beq.w	80024aa <HAL_I2C_Init+0x166>
{
 800234a:	b570      	push	{r4, r5, r6, lr}
 800234c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002352:	2b00      	cmp	r3, #0
 8002354:	d073      	beq.n	800243e <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002356:	2324      	movs	r3, #36	@ 0x24
 8002358:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	6813      	ldr	r3, [r2, #0]
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002366:	6822      	ldr	r2, [r4, #0]
 8002368:	6813      	ldr	r3, [r2, #0]
 800236a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800236e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002370:	6822      	ldr	r2, [r4, #0]
 8002372:	6813      	ldr	r3, [r2, #0]
 8002374:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002378:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800237a:	f000 fb93 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800237e:	6862      	ldr	r2, [r4, #4]
 8002380:	4b4c      	ldr	r3, [pc, #304]	@ (80024b4 <HAL_I2C_Init+0x170>)
 8002382:	429a      	cmp	r2, r3
 8002384:	d860      	bhi.n	8002448 <HAL_I2C_Init+0x104>
 8002386:	4b4c      	ldr	r3, [pc, #304]	@ (80024b8 <HAL_I2C_Init+0x174>)
 8002388:	4298      	cmp	r0, r3
 800238a:	f240 8090 	bls.w	80024ae <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 800238e:	494b      	ldr	r1, [pc, #300]	@ (80024bc <HAL_I2C_Init+0x178>)
 8002390:	fba1 3100 	umull	r3, r1, r1, r0
 8002394:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002396:	6825      	ldr	r5, [r4, #0]
 8002398:	686a      	ldr	r2, [r5, #4]
 800239a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800239e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80023a2:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023a4:	6821      	ldr	r1, [r4, #0]
 80023a6:	6a0a      	ldr	r2, [r1, #32]
 80023a8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80023ac:	4d41      	ldr	r5, [pc, #260]	@ (80024b4 <HAL_I2C_Init+0x170>)
 80023ae:	6866      	ldr	r6, [r4, #4]
 80023b0:	42ae      	cmp	r6, r5
 80023b2:	d84e      	bhi.n	8002452 <HAL_I2C_Init+0x10e>
 80023b4:	3301      	adds	r3, #1
 80023b6:	4313      	orrs	r3, r2
 80023b8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023ba:	6821      	ldr	r1, [r4, #0]
 80023bc:	69ca      	ldr	r2, [r1, #28]
 80023be:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80023c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023c6:	6865      	ldr	r5, [r4, #4]
 80023c8:	4b3a      	ldr	r3, [pc, #232]	@ (80024b4 <HAL_I2C_Init+0x170>)
 80023ca:	429d      	cmp	r5, r3
 80023cc:	d84b      	bhi.n	8002466 <HAL_I2C_Init+0x122>
 80023ce:	1e43      	subs	r3, r0, #1
 80023d0:	006d      	lsls	r5, r5, #1
 80023d2:	fbb3 f3f5 	udiv	r3, r3, r5
 80023d6:	3301      	adds	r3, #1
 80023d8:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80023dc:	4203      	tst	r3, r0
 80023de:	d05e      	beq.n	800249e <HAL_I2C_Init+0x15a>
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	431a      	orrs	r2, r3
 80023e6:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e8:	6821      	ldr	r1, [r4, #0]
 80023ea:	680a      	ldr	r2, [r1, #0]
 80023ec:	69e3      	ldr	r3, [r4, #28]
 80023ee:	6a20      	ldr	r0, [r4, #32]
 80023f0:	4303      	orrs	r3, r0
 80023f2:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023fa:	6821      	ldr	r1, [r4, #0]
 80023fc:	688a      	ldr	r2, [r1, #8]
 80023fe:	6923      	ldr	r3, [r4, #16]
 8002400:	68e0      	ldr	r0, [r4, #12]
 8002402:	4303      	orrs	r3, r0
 8002404:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8002408:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002410:	6821      	ldr	r1, [r4, #0]
 8002412:	68ca      	ldr	r2, [r1, #12]
 8002414:	6963      	ldr	r3, [r4, #20]
 8002416:	69a0      	ldr	r0, [r4, #24]
 8002418:	4303      	orrs	r3, r0
 800241a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800241e:	4313      	orrs	r3, r2
 8002420:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	6813      	ldr	r3, [r2, #0]
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242c:	2000      	movs	r0, #0
 800242e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002430:	2320      	movs	r3, #32
 8002432:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 800243c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800243e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002442:	f7ff f9f9 	bl	8001838 <HAL_I2C_MspInit>
 8002446:	e786      	b.n	8002356 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002448:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <HAL_I2C_Init+0x17c>)
 800244a:	4298      	cmp	r0, r3
 800244c:	d89f      	bhi.n	800238e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800244e:	2001      	movs	r0, #1
 8002450:	e7f4      	b.n	800243c <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002452:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002456:	fb05 f303 	mul.w	r3, r5, r3
 800245a:	4d1a      	ldr	r5, [pc, #104]	@ (80024c4 <HAL_I2C_Init+0x180>)
 800245c:	fba5 5303 	umull	r5, r3, r5, r3
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	3301      	adds	r3, #1
 8002464:	e7a7      	b.n	80023b6 <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002466:	68a3      	ldr	r3, [r4, #8]
 8002468:	b95b      	cbnz	r3, 8002482 <HAL_I2C_Init+0x13e>
 800246a:	1e43      	subs	r3, r0, #1
 800246c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002470:	fbb3 f3f5 	udiv	r3, r3, r5
 8002474:	3301      	adds	r3, #1
 8002476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247a:	b193      	cbz	r3, 80024a2 <HAL_I2C_Init+0x15e>
 800247c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002480:	e7b0      	b.n	80023e4 <HAL_I2C_Init+0xa0>
 8002482:	1e43      	subs	r3, r0, #1
 8002484:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002488:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800248c:	fbb3 f3f5 	udiv	r3, r3, r5
 8002490:	3301      	adds	r3, #1
 8002492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002496:	b133      	cbz	r3, 80024a6 <HAL_I2C_Init+0x162>
 8002498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800249c:	e7a2      	b.n	80023e4 <HAL_I2C_Init+0xa0>
 800249e:	2304      	movs	r3, #4
 80024a0:	e7a0      	b.n	80023e4 <HAL_I2C_Init+0xa0>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e79e      	b.n	80023e4 <HAL_I2C_Init+0xa0>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e79c      	b.n	80023e4 <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 80024aa:	2001      	movs	r0, #1
}
 80024ac:	4770      	bx	lr
    return HAL_ERROR;
 80024ae:	2001      	movs	r0, #1
 80024b0:	e7c4      	b.n	800243c <HAL_I2C_Init+0xf8>
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	431bde83 	.word	0x431bde83
 80024c0:	003d08ff 	.word	0x003d08ff
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_I2C_Mem_Write>:
{
 80024c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024cc:	b083      	sub	sp, #12
 80024ce:	4604      	mov	r4, r0
 80024d0:	460f      	mov	r7, r1
 80024d2:	4690      	mov	r8, r2
 80024d4:	4699      	mov	r9, r3
 80024d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff fb34 	bl	8001b44 <HAL_GetTick>
 80024dc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80024e2:	b2c0      	uxtb	r0, r0
 80024e4:	2820      	cmp	r0, #32
 80024e6:	d003      	beq.n	80024f0 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80024e8:	2002      	movs	r0, #2
}
 80024ea:	b003      	add	sp, #12
 80024ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f0:	9500      	str	r5, [sp, #0]
 80024f2:	2319      	movs	r3, #25
 80024f4:	2201      	movs	r2, #1
 80024f6:	494d      	ldr	r1, [pc, #308]	@ (800262c <HAL_I2C_Mem_Write+0x164>)
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff fcc0 	bl	8001e7e <I2C_WaitOnFlagUntilTimeout>
 80024fe:	2800      	cmp	r0, #0
 8002500:	f040 808d 	bne.w	800261e <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8002504:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	f000 808a 	beq.w	8002622 <HAL_I2C_Mem_Write+0x15a>
 800250e:	2301      	movs	r3, #1
 8002510:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	f012 0f01 	tst.w	r2, #1
 800251c:	d103      	bne.n	8002526 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800252e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002530:	2321      	movs	r3, #33	@ 0x21
 8002532:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002536:	2340      	movs	r3, #64	@ 0x40
 8002538:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800253c:	2300      	movs	r3, #0
 800253e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002542:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002544:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8002548:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800254a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800254c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254e:	4b38      	ldr	r3, [pc, #224]	@ (8002630 <HAL_I2C_Mem_Write+0x168>)
 8002550:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002552:	9501      	str	r5, [sp, #4]
 8002554:	9600      	str	r6, [sp, #0]
 8002556:	464b      	mov	r3, r9
 8002558:	4642      	mov	r2, r8
 800255a:	4639      	mov	r1, r7
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff fd5d 	bl	800201c <I2C_RequestMemoryWrite>
 8002562:	2800      	cmp	r0, #0
 8002564:	d15f      	bne.n	8002626 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8002566:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002568:	b9d3      	cbnz	r3, 80025a0 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256a:	462a      	mov	r2, r5
 800256c:	4631      	mov	r1, r6
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff fe76 	bl	8002260 <I2C_WaitOnBTFFlagUntilTimeout>
 8002574:	2800      	cmp	r0, #0
 8002576:	d044      	beq.n	8002602 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002578:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800257a:	2b04      	cmp	r3, #4
 800257c:	d03a      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 800257e:	2001      	movs	r0, #1
 8002580:	e7b3      	b.n	80024ea <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002582:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002584:	2b04      	cmp	r3, #4
 8002586:	d001      	beq.n	800258c <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8002588:	2001      	movs	r0, #1
 800258a:	e7ae      	b.n	80024ea <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	6822      	ldr	r2, [r4, #0]
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002594:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8002596:	2001      	movs	r0, #1
 8002598:	e7a7      	b.n	80024ea <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 800259a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0e4      	beq.n	800256a <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a0:	462a      	mov	r2, r5
 80025a2:	4631      	mov	r1, r6
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff fd0a 	bl	8001fbe <I2C_WaitOnTXEFlagUntilTimeout>
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d1e9      	bne.n	8002582 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80025b6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80025b8:	1c43      	adds	r3, r0, #1
 80025ba:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80025bc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80025c4:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80025c6:	3901      	subs	r1, #1
 80025c8:	b289      	uxth	r1, r1
 80025ca:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025cc:	6822      	ldr	r2, [r4, #0]
 80025ce:	6951      	ldr	r1, [r2, #20]
 80025d0:	f011 0f04 	tst.w	r1, #4
 80025d4:	d0e1      	beq.n	800259a <HAL_I2C_Mem_Write+0xd2>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0c7      	beq.n	800256a <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025da:	7843      	ldrb	r3, [r0, #1]
 80025dc:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80025de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80025e0:	3301      	adds	r3, #1
 80025e2:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80025e4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80025e6:	3b01      	subs	r3, #1
 80025e8:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80025ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80025f2:	e7d2      	b.n	800259a <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	6822      	ldr	r2, [r4, #0]
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025fc:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
 8002600:	e773      	b.n	80024ea <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800260a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800260c:	2320      	movs	r3, #32
 800260e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002612:	2300      	movs	r3, #0
 8002614:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002618:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 800261c:	e765      	b.n	80024ea <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800261e:	2002      	movs	r0, #2
 8002620:	e763      	b.n	80024ea <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8002622:	2002      	movs	r0, #2
 8002624:	e761      	b.n	80024ea <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002626:	2001      	movs	r0, #1
 8002628:	e75f      	b.n	80024ea <HAL_I2C_Mem_Write+0x22>
 800262a:	bf00      	nop
 800262c:	00100002 	.word	0x00100002
 8002630:	ffff0000 	.word	0xffff0000

08002634 <HAL_I2C_Mem_Read>:
{
 8002634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002638:	b087      	sub	sp, #28
 800263a:	4604      	mov	r4, r0
 800263c:	460f      	mov	r7, r1
 800263e:	4690      	mov	r8, r2
 8002640:	4699      	mov	r9, r3
 8002642:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8002644:	f7ff fa7e 	bl	8001b44 <HAL_GetTick>
 8002648:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800264a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800264e:	b2c0      	uxtb	r0, r0
 8002650:	2820      	cmp	r0, #32
 8002652:	d005      	beq.n	8002660 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8002654:	f04f 0902 	mov.w	r9, #2
}
 8002658:	4648      	mov	r0, r9
 800265a:	b007      	add	sp, #28
 800265c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002660:	9500      	str	r5, [sp, #0]
 8002662:	2319      	movs	r3, #25
 8002664:	2201      	movs	r2, #1
 8002666:	498a      	ldr	r1, [pc, #552]	@ (8002890 <HAL_I2C_Mem_Read+0x25c>)
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff fc08 	bl	8001e7e <I2C_WaitOnFlagUntilTimeout>
 800266e:	2800      	cmp	r0, #0
 8002670:	f040 814e 	bne.w	8002910 <HAL_I2C_Mem_Read+0x2dc>
    __HAL_LOCK(hi2c);
 8002674:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002678:	2b01      	cmp	r3, #1
 800267a:	f000 814c 	beq.w	8002916 <HAL_I2C_Mem_Read+0x2e2>
 800267e:	2301      	movs	r3, #1
 8002680:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	f012 0f01 	tst.w	r2, #1
 800268c:	d103      	bne.n	8002696 <HAL_I2C_Mem_Read+0x62>
      __HAL_I2C_ENABLE(hi2c);
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002696:	6822      	ldr	r2, [r4, #0]
 8002698:	6813      	ldr	r3, [r2, #0]
 800269a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800269e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a0:	2322      	movs	r3, #34	@ 0x22
 80026a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a6:	2340      	movs	r3, #64	@ 0x40
 80026a8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80026b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80026b2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026b4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80026b8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026bc:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026be:	4b75      	ldr	r3, [pc, #468]	@ (8002894 <HAL_I2C_Mem_Read+0x260>)
 80026c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c2:	9501      	str	r5, [sp, #4]
 80026c4:	9600      	str	r6, [sp, #0]
 80026c6:	464b      	mov	r3, r9
 80026c8:	4642      	mov	r2, r8
 80026ca:	4639      	mov	r1, r7
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7ff fd15 	bl	80020fc <I2C_RequestMemoryRead>
 80026d2:	4681      	mov	r9, r0
 80026d4:	2800      	cmp	r0, #0
 80026d6:	f040 8121 	bne.w	800291c <HAL_I2C_Mem_Read+0x2e8>
    if (hi2c->XferSize == 0U)
 80026da:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026dc:	b993      	cbnz	r3, 8002704 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026de:	9302      	str	r3, [sp, #8]
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	9202      	str	r2, [sp, #8]
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	9202      	str	r2, [sp, #8]
 80026ea:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f2:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 80026f4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8101 	beq.w	80028fe <HAL_I2C_Mem_Read+0x2ca>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026fc:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002898 <HAL_I2C_Mem_Read+0x264>
 8002700:	2700      	movs	r7, #0
 8002702:	e077      	b.n	80027f4 <HAL_I2C_Mem_Read+0x1c0>
    else if (hi2c->XferSize == 1U)
 8002704:	2b01      	cmp	r3, #1
 8002706:	d00b      	beq.n	8002720 <HAL_I2C_Mem_Read+0xec>
    else if (hi2c->XferSize == 2U)
 8002708:	2b02      	cmp	r3, #2
 800270a:	d01b      	beq.n	8002744 <HAL_I2C_Mem_Read+0x110>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270c:	2300      	movs	r3, #0
 800270e:	9305      	str	r3, [sp, #20]
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	9205      	str	r2, [sp, #20]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	9305      	str	r3, [sp, #20]
 800271a:	9b05      	ldr	r3, [sp, #20]
    while (hi2c->XferSize > 0U)
 800271c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800271e:	e7ed      	b.n	80026fc <HAL_I2C_Mem_Read+0xc8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002720:	6822      	ldr	r2, [r4, #0]
 8002722:	6813      	ldr	r3, [r2, #0]
 8002724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002728:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272a:	2300      	movs	r3, #0
 800272c:	9303      	str	r3, [sp, #12]
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	9203      	str	r2, [sp, #12]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	9203      	str	r2, [sp, #12]
 8002738:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e7d7      	b.n	80026f4 <HAL_I2C_Mem_Read+0xc0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800274c:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800274e:	6822      	ldr	r2, [r4, #0]
 8002750:	6813      	ldr	r3, [r2, #0]
 8002752:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002756:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002758:	2300      	movs	r3, #0
 800275a:	9304      	str	r3, [sp, #16]
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	9204      	str	r2, [sp, #16]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	9304      	str	r3, [sp, #16]
 8002766:	9b04      	ldr	r3, [sp, #16]
 8002768:	e7c4      	b.n	80026f4 <HAL_I2C_Mem_Read+0xc0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276a:	462a      	mov	r2, r5
 800276c:	4631      	mov	r1, r6
 800276e:	4620      	mov	r0, r4
 8002770:	f7ff fda5 	bl	80022be <I2C_WaitOnRXNEFlagUntilTimeout>
 8002774:	2800      	cmp	r0, #0
 8002776:	f040 80d4 	bne.w	8002922 <HAL_I2C_Mem_Read+0x2ee>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002780:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002782:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002784:	3301      	adds	r3, #1
 8002786:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002788:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800278e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002790:	3b01      	subs	r3, #1
 8002792:	b29b      	uxth	r3, r3
 8002794:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002796:	e029      	b.n	80027ec <HAL_I2C_Mem_Read+0x1b8>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002798:	9500      	str	r5, [sp, #0]
 800279a:	4633      	mov	r3, r6
 800279c:	463a      	mov	r2, r7
 800279e:	4641      	mov	r1, r8
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fb6c 	bl	8001e7e <I2C_WaitOnFlagUntilTimeout>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	f040 80be 	bne.w	8002928 <HAL_I2C_Mem_Read+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	6822      	ldr	r2, [r4, #0]
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027b4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027bc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80027be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80027c0:	1c53      	adds	r3, r2, #1
 80027c2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80027c4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80027ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80027d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027da:	3301      	adds	r3, #1
 80027dc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80027de:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80027e0:	3b01      	subs	r3, #1
 80027e2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80027e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027ec:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8085 	beq.w	80028fe <HAL_I2C_Mem_Read+0x2ca>
      if (hi2c->XferSize <= 3U)
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d851      	bhi.n	800289c <HAL_I2C_Mem_Read+0x268>
        if (hi2c->XferSize == 1U)
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d0b6      	beq.n	800276a <HAL_I2C_Mem_Read+0x136>
        else if (hi2c->XferSize == 2U)
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d0cb      	beq.n	8002798 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002800:	9500      	str	r5, [sp, #0]
 8002802:	4633      	mov	r3, r6
 8002804:	463a      	mov	r2, r7
 8002806:	4641      	mov	r1, r8
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff fb38 	bl	8001e7e <I2C_WaitOnFlagUntilTimeout>
 800280e:	2800      	cmp	r0, #0
 8002810:	f040 808d 	bne.w	800292e <HAL_I2C_Mem_Read+0x2fa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800281c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002824:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002826:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800282c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002832:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002834:	3b01      	subs	r3, #1
 8002836:	b29b      	uxth	r3, r3
 8002838:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800283a:	9500      	str	r5, [sp, #0]
 800283c:	4633      	mov	r3, r6
 800283e:	463a      	mov	r2, r7
 8002840:	4641      	mov	r1, r8
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff fb1b 	bl	8001e7e <I2C_WaitOnFlagUntilTimeout>
 8002848:	2800      	cmp	r0, #0
 800284a:	d173      	bne.n	8002934 <HAL_I2C_Mem_Read+0x300>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	6822      	ldr	r2, [r4, #0]
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002854:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800285c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800285e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002860:	1c53      	adds	r3, r2, #1
 8002862:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002864:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800286a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800286c:	3b01      	subs	r3, #1
 800286e:	b29b      	uxth	r3, r3
 8002870:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002878:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800287a:	3301      	adds	r3, #1
 800287c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800287e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002884:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002886:	3b01      	subs	r3, #1
 8002888:	b29b      	uxth	r3, r3
 800288a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800288c:	e7ae      	b.n	80027ec <HAL_I2C_Mem_Read+0x1b8>
 800288e:	bf00      	nop
 8002890:	00100002 	.word	0x00100002
 8002894:	ffff0000 	.word	0xffff0000
 8002898:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800289c:	462a      	mov	r2, r5
 800289e:	4631      	mov	r1, r6
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff fd0c 	bl	80022be <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d147      	bne.n	800293a <HAL_I2C_Mem_Read+0x306>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80028b8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29b      	uxth	r3, r3
 80028be:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80028c0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80028c2:	3a01      	subs	r2, #1
 80028c4:	b292      	uxth	r2, r2
 80028c6:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028c8:	6822      	ldr	r2, [r4, #0]
 80028ca:	6951      	ldr	r1, [r2, #20]
 80028cc:	f011 0f04 	tst.w	r1, #4
 80028d0:	d08c      	beq.n	80027ec <HAL_I2C_Mem_Read+0x1b8>
          if (hi2c->XferSize == 3U)
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d00e      	beq.n	80028f4 <HAL_I2C_Mem_Read+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028dc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80028de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028e0:	3301      	adds	r3, #1
 80028e2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80028e4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80028e6:	3b01      	subs	r3, #1
 80028e8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80028ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80028f2:	e77b      	b.n	80027ec <HAL_I2C_Mem_Read+0x1b8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f4:	6813      	ldr	r3, [r2, #0]
 80028f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e7eb      	b.n	80028d6 <HAL_I2C_Mem_Read+0x2a2>
    hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	2320      	movs	r3, #32
 8002900:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	2300      	movs	r3, #0
 8002906:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 800290a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 800290e:	e6a3      	b.n	8002658 <HAL_I2C_Mem_Read+0x24>
      return HAL_BUSY;
 8002910:	f04f 0902 	mov.w	r9, #2
 8002914:	e6a0      	b.n	8002658 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8002916:	f04f 0902 	mov.w	r9, #2
 800291a:	e69d      	b.n	8002658 <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 800291c:	f04f 0901 	mov.w	r9, #1
 8002920:	e69a      	b.n	8002658 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8002922:	f04f 0901 	mov.w	r9, #1
 8002926:	e697      	b.n	8002658 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8002928:	f04f 0901 	mov.w	r9, #1
 800292c:	e694      	b.n	8002658 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 800292e:	f04f 0901 	mov.w	r9, #1
 8002932:	e691      	b.n	8002658 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8002934:	f04f 0901 	mov.w	r9, #1
 8002938:	e68e      	b.n	8002658 <HAL_I2C_Mem_Read+0x24>
          return HAL_ERROR;
 800293a:	f04f 0901 	mov.w	r9, #1
 800293e:	e68b      	b.n	8002658 <HAL_I2C_Mem_Read+0x24>

08002940 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002940:	2800      	cmp	r0, #0
 8002942:	f000 809d 	beq.w	8002a80 <HAL_RCC_ClockConfig+0x140>
{
 8002946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800294a:	460d      	mov	r5, r1
 800294c:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800294e:	4b50      	ldr	r3, [pc, #320]	@ (8002a90 <HAL_RCC_ClockConfig+0x150>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	428b      	cmp	r3, r1
 8002958:	d208      	bcs.n	800296c <HAL_RCC_ClockConfig+0x2c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	b2cb      	uxtb	r3, r1
 800295c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a90 <HAL_RCC_ClockConfig+0x150>)
 800295e:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002960:	6813      	ldr	r3, [r2, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	428b      	cmp	r3, r1
 8002968:	f040 808c 	bne.w	8002a84 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	f013 0f02 	tst.w	r3, #2
 8002972:	d017      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x64>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	f013 0f04 	tst.w	r3, #4
 8002978:	d004      	beq.n	8002984 <HAL_RCC_ClockConfig+0x44>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297a:	4a46      	ldr	r2, [pc, #280]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 800297c:	6893      	ldr	r3, [r2, #8]
 800297e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002982:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	f013 0f08 	tst.w	r3, #8
 800298a:	d004      	beq.n	8002996 <HAL_RCC_ClockConfig+0x56>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298c:	4a41      	ldr	r2, [pc, #260]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 800298e:	6893      	ldr	r3, [r2, #8]
 8002990:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002994:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002996:	4a3f      	ldr	r2, [pc, #252]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 8002998:	6893      	ldr	r3, [r2, #8]
 800299a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800299e:	68a1      	ldr	r1, [r4, #8]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	f013 0f01 	tst.w	r3, #1
 80029aa:	d032      	beq.n	8002a12 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ac:	6862      	ldr	r2, [r4, #4]
 80029ae:	2a01      	cmp	r2, #1
 80029b0:	d021      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	1e93      	subs	r3, r2, #2
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d925      	bls.n	8002a04 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	4b36      	ldr	r3, [pc, #216]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f013 0f02 	tst.w	r3, #2
 80029c0:	d062      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x148>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4934      	ldr	r1, [pc, #208]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 80029c4:	688b      	ldr	r3, [r1, #8]
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ce:	f7ff f8b9 	bl	8001b44 <HAL_GetTick>
 80029d2:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d4:	4f2f      	ldr	r7, [pc, #188]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d6:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	6862      	ldr	r2, [r4, #4]
 80029e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029e6:	d014      	beq.n	8002a12 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7ff f8ac 	bl	8001b44 <HAL_GetTick>
 80029ec:	1b80      	subs	r0, r0, r6
 80029ee:	4540      	cmp	r0, r8
 80029f0:	d9f3      	bls.n	80029da <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_TIMEOUT;
 80029f2:	2003      	movs	r0, #3
 80029f4:	e042      	b.n	8002a7c <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80029fe:	d1e0      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002a00:	2001      	movs	r0, #1
 8002a02:	e03b      	b.n	8002a7c <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002a0c:	d1d9      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002a0e:	2001      	movs	r0, #1
 8002a10:	e034      	b.n	8002a7c <HAL_RCC_ClockConfig+0x13c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a12:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <HAL_RCC_ClockConfig+0x150>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	42ab      	cmp	r3, r5
 8002a1c:	d907      	bls.n	8002a2e <HAL_RCC_ClockConfig+0xee>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	b2ea      	uxtb	r2, r5
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_ClockConfig+0x150>)
 8002a22:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	42ab      	cmp	r3, r5
 8002a2c:	d12e      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x14c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	f013 0f04 	tst.w	r3, #4
 8002a34:	d006      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x104>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a36:	4a17      	ldr	r2, [pc, #92]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 8002a38:	6893      	ldr	r3, [r2, #8]
 8002a3a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002a3e:	68e1      	ldr	r1, [r4, #12]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	f013 0f08 	tst.w	r3, #8
 8002a4a:	d007      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x11c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4c:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 8002a4e:	6893      	ldr	r3, [r2, #8]
 8002a50:	6921      	ldr	r1, [r4, #16]
 8002a52:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002a56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a5a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5c:	f000 f842 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <HAL_RCC_ClockConfig+0x154>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a68:	4a0b      	ldr	r2, [pc, #44]	@ (8002a98 <HAL_RCC_ClockConfig+0x158>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	40d8      	lsrs	r0, r3
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_RCC_ClockConfig+0x15c>)
 8002a70:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_ClockConfig+0x160>)
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	f7ff f819 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 8002a7a:	2000      	movs	r0, #0
}
 8002a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
}
 8002a82:	4770      	bx	lr
      return HAL_ERROR;
 8002a84:	2001      	movs	r0, #1
 8002a86:	e7f9      	b.n	8002a7c <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8002a88:	2001      	movs	r0, #1
 8002a8a:	e7f7      	b.n	8002a7c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	e7f5      	b.n	8002a7c <HAL_RCC_ClockConfig+0x13c>
 8002a90:	40023c00 	.word	0x40023c00
 8002a94:	40023800 	.word	0x40023800
 8002a98:	08003bdc 	.word	0x08003bdc
 8002a9c:	20000004 	.word	0x20000004
 8002aa0:	2000000c 	.word	0x2000000c

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002aac:	4a03      	ldr	r2, [pc, #12]	@ (8002abc <HAL_RCC_GetPCLK1Freq+0x18>)
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	4a03      	ldr	r2, [pc, #12]	@ (8002ac0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ab2:	6810      	ldr	r0, [r2, #0]
}
 8002ab4:	40d8      	lsrs	r0, r3
 8002ab6:	4770      	bx	lr
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08003bd4 	.word	0x08003bd4
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002acc:	4a03      	ldr	r2, [pc, #12]	@ (8002adc <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	4a03      	ldr	r2, [pc, #12]	@ (8002ae0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ad2:	6810      	ldr	r0, [r2, #0]
}
 8002ad4:	40d8      	lsrs	r0, r3
 8002ad6:	4770      	bx	lr
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08003bd4 	.word	0x08003bd4
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae6:	4b60      	ldr	r3, [pc, #384]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d007      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x1e>
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d05f      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af6:	485d      	ldr	r0, [pc, #372]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002af8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	bf18      	it	ne
 8002afe:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002b00:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b02:	4b59      	ldr	r3, [pc, #356]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002b10:	d02c      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b12:	4b55      	ldr	r3, [pc, #340]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b14:	6858      	ldr	r0, [r3, #4]
 8002b16:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002b1a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002b1e:	ebbc 0c00 	subs.w	ip, ip, r0
 8002b22:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002b26:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002b2a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002b2e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002b32:	ebb1 010c 	subs.w	r1, r1, ip
 8002b36:	eb63 030e 	sbc.w	r3, r3, lr
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b40:	00c9      	lsls	r1, r1, #3
 8002b42:	eb11 0c00 	adds.w	ip, r1, r0
 8002b46:	f143 0300 	adc.w	r3, r3, #0
 8002b4a:	0259      	lsls	r1, r3, #9
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002b52:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002b56:	f7fd ff7d 	bl	8000a54 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b5a:	4b43      	ldr	r3, [pc, #268]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002b62:	3301      	adds	r3, #1
 8002b64:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8002b66:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002b6a:	e7c9      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b6e:	6858      	ldr	r0, [r3, #4]
 8002b70:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002b74:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002b78:	ebbc 0c00 	subs.w	ip, ip, r0
 8002b7c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002b80:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002b84:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002b88:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002b8c:	ebb1 010c 	subs.w	r1, r1, ip
 8002b90:	eb63 030e 	sbc.w	r3, r3, lr
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9a:	00c9      	lsls	r1, r1, #3
 8002b9c:	eb11 0c00 	adds.w	ip, r1, r0
 8002ba0:	f143 0300 	adc.w	r3, r3, #0
 8002ba4:	0299      	lsls	r1, r3, #10
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002bac:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002bb0:	f7fd ff50 	bl	8000a54 <__aeabi_uldivmod>
 8002bb4:	e7d1      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002bc4:	d02a      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4b28      	ldr	r3, [pc, #160]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bc8:	6858      	ldr	r0, [r3, #4]
 8002bca:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002bce:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002bd2:	ebbc 0c00 	subs.w	ip, ip, r0
 8002bd6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002bda:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002bde:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002be2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002be6:	ebb1 010c 	subs.w	r1, r1, ip
 8002bea:	eb63 030e 	sbc.w	r3, r3, lr
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bf4:	00c9      	lsls	r1, r1, #3
 8002bf6:	eb11 0c00 	adds.w	ip, r1, r0
 8002bfa:	f143 0300 	adc.w	r3, r3, #0
 8002bfe:	0259      	lsls	r1, r3, #9
 8002c00:	2300      	movs	r3, #0
 8002c02:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002c06:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002c0a:	f7fd ff23 	bl	8000a54 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c0e:	4b16      	ldr	r3, [pc, #88]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8002c16:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002c1a:	e771      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1c:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c1e:	6858      	ldr	r0, [r3, #4]
 8002c20:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c24:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002c28:	ebbc 0c00 	subs.w	ip, ip, r0
 8002c2c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002c30:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002c34:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002c38:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002c3c:	ebb1 010c 	subs.w	r1, r1, ip
 8002c40:	eb63 030e 	sbc.w	r3, r3, lr
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4a:	00c9      	lsls	r1, r1, #3
 8002c4c:	eb11 0c00 	adds.w	ip, r1, r0
 8002c50:	f143 0300 	adc.w	r3, r3, #0
 8002c54:	0299      	lsls	r1, r3, #10
 8002c56:	2300      	movs	r3, #0
 8002c58:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002c5c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002c60:	f7fd fef8 	bl	8000a54 <__aeabi_uldivmod>
 8002c64:	e7d3      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x12a>
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	007a1200 	.word	0x007a1200
 8002c70:	00f42400 	.word	0x00f42400

08002c74 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c74:	2800      	cmp	r0, #0
 8002c76:	f000 8204 	beq.w	8003082 <HAL_RCC_OscConfig+0x40e>
{
 8002c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	6803      	ldr	r3, [r0, #0]
 8002c84:	f013 0f01 	tst.w	r3, #1
 8002c88:	d041      	beq.n	8002d0e <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c8a:	4b9a      	ldr	r3, [pc, #616]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d032      	beq.n	8002cfc <HAL_RCC_OscConfig+0x88>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c96:	4b97      	ldr	r3, [pc, #604]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d027      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x7e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca2:	4b94      	ldr	r3, [pc, #592]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d059      	beq.n	8002d62 <HAL_RCC_OscConfig+0xee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cae:	6863      	ldr	r3, [r4, #4]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb4:	d05b      	beq.n	8002d6e <HAL_RCC_OscConfig+0xfa>
 8002cb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cba:	d05e      	beq.n	8002d7a <HAL_RCC_OscConfig+0x106>
 8002cbc:	4b8d      	ldr	r3, [pc, #564]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cce:	6863      	ldr	r3, [r4, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x11a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe ff36 	bl	8001b44 <HAL_GetTick>
 8002cd8:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4e86      	ldr	r6, [pc, #536]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	6833      	ldr	r3, [r6, #0]
 8002cde:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002ce2:	d114      	bne.n	8002d0e <HAL_RCC_OscConfig+0x9a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe ff2e 	bl	8001b44 <HAL_GetTick>
 8002ce8:	1b40      	subs	r0, r0, r5
 8002cea:	2864      	cmp	r0, #100	@ 0x64
 8002cec:	d9f6      	bls.n	8002cdc <HAL_RCC_OscConfig+0x68>
          {
            return HAL_TIMEOUT;
 8002cee:	2003      	movs	r0, #3
 8002cf0:	e1ce      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cf2:	4b80      	ldr	r3, [pc, #512]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002cfa:	d0d2      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_OscConfig+0x9a>
 8002d06:	6863      	ldr	r3, [r4, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 81bc 	beq.w	8003086 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	f013 0f02 	tst.w	r3, #2
 8002d14:	d060      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x164>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d16:	4b77      	ldr	r3, [pc, #476]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f013 0f0c 	tst.w	r3, #12
 8002d1e:	d04a      	beq.n	8002db6 <HAL_RCC_OscConfig+0x142>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d20:	4b74      	ldr	r3, [pc, #464]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d03f      	beq.n	8002dac <HAL_RCC_OscConfig+0x138>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2c:	4b71      	ldr	r3, [pc, #452]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	d069      	beq.n	8002e0c <HAL_RCC_OscConfig+0x198>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d38:	68e3      	ldr	r3, [r4, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d075      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x284>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fefe 	bl	8001b44 <HAL_GetTick>
 8002d48:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4e6a      	ldr	r6, [pc, #424]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	6833      	ldr	r3, [r6, #0]
 8002d4e:	f013 0f02 	tst.w	r3, #2
 8002d52:	d161      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1a4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d54:	f7fe fef6 	bl	8001b44 <HAL_GetTick>
 8002d58:	1b40      	subs	r0, r0, r5
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d9f6      	bls.n	8002d4c <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8002d5e:	2003      	movs	r0, #3
 8002d60:	e196      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4b64      	ldr	r3, [pc, #400]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002d6a:	d0a0      	beq.n	8002cae <HAL_RCC_OscConfig+0x3a>
 8002d6c:	e7c6      	b.n	8002cfc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6e:	4a61      	ldr	r2, [pc, #388]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d70:	6813      	ldr	r3, [r2, #0]
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e7a9      	b.n	8002cce <HAL_RCC_OscConfig+0x5a>
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e79f      	b.n	8002cce <HAL_RCC_OscConfig+0x5a>
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fed9 	bl	8001b44 <HAL_GetTick>
 8002d92:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d94:	4e57      	ldr	r6, [pc, #348]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d96:	6833      	ldr	r3, [r6, #0]
 8002d98:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002d9c:	d0b7      	beq.n	8002d0e <HAL_RCC_OscConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9e:	f7fe fed1 	bl	8001b44 <HAL_GetTick>
 8002da2:	1b40      	subs	r0, r0, r5
 8002da4:	2864      	cmp	r0, #100	@ 0x64
 8002da6:	d9f6      	bls.n	8002d96 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002da8:	2003      	movs	r0, #3
 8002daa:	e171      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dac:	4b51      	ldr	r3, [pc, #324]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002db4:	d1ba      	bne.n	8002d2c <HAL_RCC_OscConfig+0xb8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db6:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f013 0f02 	tst.w	r3, #2
 8002dbe:	d003      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x154>
 8002dc0:	68e3      	ldr	r3, [r4, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	f040 8161 	bne.w	800308a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	6921      	ldr	r1, [r4, #16]
 8002dce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002dd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002dd6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	f013 0f08 	tst.w	r3, #8
 8002dde:	d049      	beq.n	8002e74 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002de0:	6963      	ldr	r3, [r4, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d033      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1da>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de6:	4b44      	ldr	r3, [pc, #272]	@ (8002ef8 <HAL_RCC_OscConfig+0x284>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe fea9 	bl	8001b44 <HAL_GetTick>
 8002df2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df4:	4e3f      	ldr	r6, [pc, #252]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002df6:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002df8:	f013 0f02 	tst.w	r3, #2
 8002dfc:	d13a      	bne.n	8002e74 <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fea1 	bl	8001b44 <HAL_GetTick>
 8002e02:	1b40      	subs	r0, r0, r5
 8002e04:	2802      	cmp	r0, #2
 8002e06:	d9f6      	bls.n	8002df6 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002e08:	2003      	movs	r0, #3
 8002e0a:	e141      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0c:	4b39      	ldr	r3, [pc, #228]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002e14:	d190      	bne.n	8002d38 <HAL_RCC_OscConfig+0xc4>
 8002e16:	e7ce      	b.n	8002db6 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4a36      	ldr	r2, [pc, #216]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	6813      	ldr	r3, [r2, #0]
 8002e1c:	6921      	ldr	r1, [r4, #16]
 8002e1e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002e22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	e7d6      	b.n	8002dd8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b33      	ldr	r3, [pc, #204]	@ (8002ef8 <HAL_RCC_OscConfig+0x284>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e30:	f7fe fe88 	bl	8001b44 <HAL_GetTick>
 8002e34:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	4e2f      	ldr	r6, [pc, #188]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e38:	6833      	ldr	r3, [r6, #0]
 8002e3a:	f013 0f02 	tst.w	r3, #2
 8002e3e:	d0cb      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e40:	f7fe fe80 	bl	8001b44 <HAL_GetTick>
 8002e44:	1b40      	subs	r0, r0, r5
 8002e46:	2802      	cmp	r0, #2
 8002e48:	d9f6      	bls.n	8002e38 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	e120      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef8 <HAL_RCC_OscConfig+0x284>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe fe75 	bl	8001b44 <HAL_GetTick>
 8002e5a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4e25      	ldr	r6, [pc, #148]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002e60:	f013 0f02 	tst.w	r3, #2
 8002e64:	d006      	beq.n	8002e74 <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e66:	f7fe fe6d 	bl	8001b44 <HAL_GetTick>
 8002e6a:	1b40      	subs	r0, r0, r5
 8002e6c:	2802      	cmp	r0, #2
 8002e6e:	d9f6      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8002e70:	2003      	movs	r0, #3
 8002e72:	e10d      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	f013 0f04 	tst.w	r3, #4
 8002e7a:	d077      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002e84:	d133      	bne.n	8002eee <HAL_RCC_OscConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e8e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002e92:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e9e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <HAL_RCC_OscConfig+0x288>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002ea8:	d02a      	beq.n	8002f00 <HAL_RCC_OscConfig+0x28c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eaa:	68a3      	ldr	r3, [r4, #8]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d03b      	beq.n	8002f28 <HAL_RCC_OscConfig+0x2b4>
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d03f      	beq.n	8002f34 <HAL_RCC_OscConfig+0x2c0>
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002eb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ebe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ec0:	f022 0204 	bic.w	r2, r2, #4
 8002ec4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec6:	68a3      	ldr	r3, [r4, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d03d      	beq.n	8002f48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fe3a 	bl	8001b44 <HAL_GetTick>
 8002ed0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	4f08      	ldr	r7, [pc, #32]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eda:	f013 0f02 	tst.w	r3, #2
 8002ede:	d144      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fe30 	bl	8001b44 <HAL_GetTick>
 8002ee4:	1b80      	subs	r0, r0, r6
 8002ee6:	4540      	cmp	r0, r8
 8002ee8:	d9f6      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x264>
        {
          return HAL_TIMEOUT;
 8002eea:	2003      	movs	r0, #3
 8002eec:	e0d0      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 8002eee:	2500      	movs	r5, #0
 8002ef0:	e7d6      	b.n	8002ea0 <HAL_RCC_OscConfig+0x22c>
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	42470000 	.word	0x42470000
 8002efc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f00:	4a6b      	ldr	r2, [pc, #428]	@ (80030b0 <HAL_RCC_OscConfig+0x43c>)
 8002f02:	6813      	ldr	r3, [r2, #0]
 8002f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f08:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002f0a:	f7fe fe1b 	bl	8001b44 <HAL_GetTick>
 8002f0e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4f67      	ldr	r7, [pc, #412]	@ (80030b0 <HAL_RCC_OscConfig+0x43c>)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f18:	d1c7      	bne.n	8002eaa <HAL_RCC_OscConfig+0x236>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1a:	f7fe fe13 	bl	8001b44 <HAL_GetTick>
 8002f1e:	1b80      	subs	r0, r0, r6
 8002f20:	2802      	cmp	r0, #2
 8002f22:	d9f6      	bls.n	8002f12 <HAL_RCC_OscConfig+0x29e>
          return HAL_TIMEOUT;
 8002f24:	2003      	movs	r0, #3
 8002f26:	e0b3      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f28:	4a62      	ldr	r2, [pc, #392]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
 8002f2a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f32:	e7c8      	b.n	8002ec6 <HAL_RCC_OscConfig+0x252>
 8002f34:	4b5f      	ldr	r3, [pc, #380]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
 8002f36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f38:	f042 0204 	orr.w	r2, r2, #4
 8002f3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8002f3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	671a      	str	r2, [r3, #112]	@ 0x70
 8002f46:	e7be      	b.n	8002ec6 <HAL_RCC_OscConfig+0x252>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe fdfc 	bl	8001b44 <HAL_GetTick>
 8002f4c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4e:	4f59      	ldr	r7, [pc, #356]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f56:	f013 0f02 	tst.w	r3, #2
 8002f5a:	d006      	beq.n	8002f6a <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fdf2 	bl	8001b44 <HAL_GetTick>
 8002f60:	1b80      	subs	r0, r0, r6
 8002f62:	4540      	cmp	r0, r8
 8002f64:	d9f6      	bls.n	8002f54 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8002f66:	2003      	movs	r0, #3
 8002f68:	e092      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6a:	b9ed      	cbnz	r5, 8002fa8 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6c:	69a3      	ldr	r3, [r4, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 808d 	beq.w	800308e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f74:	4a4f      	ldr	r2, [pc, #316]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	f002 020c 	and.w	r2, r2, #12
 8002f7c:	2a08      	cmp	r2, #8
 8002f7e:	d054      	beq.n	800302a <HAL_RCC_OscConfig+0x3b6>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d017      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	4b4c      	ldr	r3, [pc, #304]	@ (80030b8 <HAL_RCC_OscConfig+0x444>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fddb 	bl	8001b44 <HAL_GetTick>
 8002f8e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f90:	4d48      	ldr	r5, [pc, #288]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
 8002f92:	682b      	ldr	r3, [r5, #0]
 8002f94:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002f98:	d045      	beq.n	8003026 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe fdd3 	bl	8001b44 <HAL_GetTick>
 8002f9e:	1b00      	subs	r0, r0, r4
 8002fa0:	2802      	cmp	r0, #2
 8002fa2:	d9f6      	bls.n	8002f92 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	e073      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4a42      	ldr	r2, [pc, #264]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
 8002faa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb2:	e7db      	b.n	8002f6c <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002fb4:	4b40      	ldr	r3, [pc, #256]	@ (80030b8 <HAL_RCC_OscConfig+0x444>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002fba:	f7fe fdc3 	bl	8001b44 <HAL_GetTick>
 8002fbe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc0:	4e3c      	ldr	r6, [pc, #240]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
 8002fc2:	6833      	ldr	r3, [r6, #0]
 8002fc4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002fc8:	d006      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fe fdbb 	bl	8001b44 <HAL_GetTick>
 8002fce:	1b40      	subs	r0, r0, r5
 8002fd0:	2802      	cmp	r0, #2
 8002fd2:	d9f6      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	e05b      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fd8:	69e3      	ldr	r3, [r4, #28]
 8002fda:	6a22      	ldr	r2, [r4, #32]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002fe0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002fe4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002fe6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002fea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002fec:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002ff0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002ff2:	0852      	lsrs	r2, r2, #1
 8002ff4:	3a01      	subs	r2, #1
 8002ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
 8002ffc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80030b8 <HAL_RCC_OscConfig+0x444>)
 8003000:	2201      	movs	r2, #1
 8003002:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003004:	f7fe fd9e 	bl	8001b44 <HAL_GetTick>
 8003008:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4d2a      	ldr	r5, [pc, #168]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fd96 	bl	8001b44 <HAL_GetTick>
 8003018:	1b00      	subs	r0, r0, r4
 800301a:	2802      	cmp	r0, #2
 800301c:	d9f6      	bls.n	800300c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800301e:	2003      	movs	r0, #3
 8003020:	e036      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003022:	2000      	movs	r0, #0
 8003024:	e034      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
 8003026:	2000      	movs	r0, #0
 8003028:	e032      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302a:	2b01      	cmp	r3, #1
 800302c:	d033      	beq.n	8003096 <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->PLLCFGR;
 800302e:	4b21      	ldr	r3, [pc, #132]	@ (80030b4 <HAL_RCC_OscConfig+0x440>)
 8003030:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003036:	69e2      	ldr	r2, [r4, #28]
 8003038:	4291      	cmp	r1, r2
 800303a:	d12e      	bne.n	800309a <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	6a21      	ldr	r1, [r4, #32]
 8003042:	428a      	cmp	r2, r1
 8003044:	d12b      	bne.n	800309e <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003046:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800304c:	401a      	ands	r2, r3
 800304e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003052:	d126      	bne.n	80030a2 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003054:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003058:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800305a:	0852      	lsrs	r2, r2, #1
 800305c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003062:	d120      	bne.n	80030a6 <HAL_RCC_OscConfig+0x432>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003064:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003068:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800306e:	d11c      	bne.n	80030aa <HAL_RCC_OscConfig+0x436>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003070:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003072:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003076:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800307a:	bf14      	ite	ne
 800307c:	2001      	movne	r0, #1
 800307e:	2000      	moveq	r0, #0
 8003080:	e006      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
    return HAL_ERROR;
 8003082:	2001      	movs	r0, #1
}
 8003084:	4770      	bx	lr
        return HAL_ERROR;
 8003086:	2001      	movs	r0, #1
 8003088:	e002      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
        return HAL_ERROR;
 800308a:	2001      	movs	r0, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
}
 8003090:	b002      	add	sp, #8
 8003092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003096:	2001      	movs	r0, #1
 8003098:	e7fa      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
 800309a:	2001      	movs	r0, #1
 800309c:	e7f8      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
 800309e:	2001      	movs	r0, #1
 80030a0:	e7f6      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
 80030a2:	2001      	movs	r0, #1
 80030a4:	e7f4      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
 80030a6:	2001      	movs	r0, #1
 80030a8:	e7f2      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
 80030aa:	2001      	movs	r0, #1
 80030ac:	e7f0      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
 80030ae:	bf00      	nop
 80030b0:	40007000 	.word	0x40007000
 80030b4:	40023800 	.word	0x40023800
 80030b8:	42470000 	.word	0x42470000

080030bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c0:	6a02      	ldr	r2, [r0, #32]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030cc:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	680d      	ldr	r5, [r1, #0]
 80030d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d4:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030d8:	688d      	ldr	r5, [r1, #8]
 80030da:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030dc:	4d0d      	ldr	r5, [pc, #52]	@ (8003114 <TIM_OC1_SetConfig+0x58>)
 80030de:	42a8      	cmp	r0, r5
 80030e0:	d003      	beq.n	80030ea <TIM_OC1_SetConfig+0x2e>
 80030e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80030e6:	42a8      	cmp	r0, r5
 80030e8:	d10d      	bne.n	8003106 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030ea:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030ee:	68cd      	ldr	r5, [r1, #12]
 80030f0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030f2:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030f6:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030fa:	698d      	ldr	r5, [r1, #24]
 80030fc:	694e      	ldr	r6, [r1, #20]
 80030fe:	ea46 0c05 	orr.w	ip, r6, r5
 8003102:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003106:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003108:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800310a:	684a      	ldr	r2, [r1, #4]
 800310c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800310e:	6203      	str	r3, [r0, #32]
}
 8003110:	bc70      	pop	{r4, r5, r6}
 8003112:	4770      	bx	lr
 8003114:	40010000 	.word	0x40010000

08003118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003118:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800311c:	6a02      	ldr	r2, [r0, #32]
 800311e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003122:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003124:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003126:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003128:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800312c:	680d      	ldr	r5, [r1, #0]
 800312e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003130:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003134:	688d      	ldr	r5, [r1, #8]
 8003136:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800313a:	4d0e      	ldr	r5, [pc, #56]	@ (8003174 <TIM_OC3_SetConfig+0x5c>)
 800313c:	42a8      	cmp	r0, r5
 800313e:	d003      	beq.n	8003148 <TIM_OC3_SetConfig+0x30>
 8003140:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003144:	42a8      	cmp	r0, r5
 8003146:	d10e      	bne.n	8003166 <TIM_OC3_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003148:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800314c:	68cd      	ldr	r5, [r1, #12]
 800314e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003156:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800315a:	698d      	ldr	r5, [r1, #24]
 800315c:	694e      	ldr	r6, [r1, #20]
 800315e:	ea46 0c05 	orr.w	ip, r6, r5
 8003162:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003166:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003168:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800316a:	684a      	ldr	r2, [r1, #4]
 800316c:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316e:	6203      	str	r3, [r0, #32]
}
 8003170:	bc70      	pop	{r4, r5, r6}
 8003172:	4770      	bx	lr
 8003174:	40010000 	.word	0x40010000

08003178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003178:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800317c:	6a02      	ldr	r2, [r0, #32]
 800317e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003182:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003184:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003186:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003188:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800318c:	680d      	ldr	r5, [r1, #0]
 800318e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003192:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003196:	688d      	ldr	r5, [r1, #8]
 8003198:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319c:	4d09      	ldr	r5, [pc, #36]	@ (80031c4 <TIM_OC4_SetConfig+0x4c>)
 800319e:	42a8      	cmp	r0, r5
 80031a0:	d003      	beq.n	80031aa <TIM_OC4_SetConfig+0x32>
 80031a2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031a6:	42a8      	cmp	r0, r5
 80031a8:	d104      	bne.n	80031b4 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031aa:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031ae:	694d      	ldr	r5, [r1, #20]
 80031b0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031b8:	684a      	ldr	r2, [r1, #4]
 80031ba:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031bc:	6203      	str	r3, [r0, #32]
}
 80031be:	bc30      	pop	{r4, r5}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000

080031c8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80031c8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003300 <TIM_Base_SetConfig+0x138>)
 80031cc:	4290      	cmp	r0, r2
 80031ce:	d067      	beq.n	80032a0 <TIM_Base_SetConfig+0xd8>
 80031d0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80031d4:	d07e      	beq.n	80032d4 <TIM_Base_SetConfig+0x10c>
 80031d6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80031da:	4290      	cmp	r0, r2
 80031dc:	d056      	beq.n	800328c <TIM_Base_SetConfig+0xc4>
 80031de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031e2:	4290      	cmp	r0, r2
 80031e4:	d057      	beq.n	8003296 <TIM_Base_SetConfig+0xce>
 80031e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031ea:	4290      	cmp	r0, r2
 80031ec:	f000 8083 	beq.w	80032f6 <TIM_Base_SetConfig+0x12e>
 80031f0:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80031f4:	4290      	cmp	r0, r2
 80031f6:	d01f      	beq.n	8003238 <TIM_Base_SetConfig+0x70>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f8:	4a42      	ldr	r2, [pc, #264]	@ (8003304 <TIM_Base_SetConfig+0x13c>)
 80031fa:	4290      	cmp	r0, r2
 80031fc:	d06e      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
 80031fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003202:	4290      	cmp	r0, r2
 8003204:	d06a      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
 8003206:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800320a:	4290      	cmp	r0, r2
 800320c:	d066      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
 800320e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8003212:	4290      	cmp	r0, r2
 8003214:	d062      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
 8003216:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800321a:	4290      	cmp	r0, r2
 800321c:	d05e      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
 800321e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003222:	4290      	cmp	r0, r2
 8003224:	d05a      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800322a:	694a      	ldr	r2, [r1, #20]
 800322c:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800322e:	688a      	ldr	r2, [r1, #8]
 8003230:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003232:	680a      	ldr	r2, [r1, #0]
 8003234:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003236:	e045      	b.n	80032c4 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800323c:	684a      	ldr	r2, [r1, #4]
 800323e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003240:	4a2f      	ldr	r2, [pc, #188]	@ (8003300 <TIM_Base_SetConfig+0x138>)
 8003242:	4290      	cmp	r0, r2
 8003244:	d030      	beq.n	80032a8 <TIM_Base_SetConfig+0xe0>
 8003246:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800324a:	d047      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
 800324c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003250:	4290      	cmp	r0, r2
 8003252:	d043      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
 8003254:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003258:	4290      	cmp	r0, r2
 800325a:	d03f      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
 800325c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003260:	4290      	cmp	r0, r2
 8003262:	d03b      	beq.n	80032dc <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003268:	68ca      	ldr	r2, [r1, #12]
 800326a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800326c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003270:	694a      	ldr	r2, [r1, #20]
 8003272:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003274:	688a      	ldr	r2, [r1, #8]
 8003276:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003278:	680a      	ldr	r2, [r1, #0]
 800327a:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327c:	4a20      	ldr	r2, [pc, #128]	@ (8003300 <TIM_Base_SetConfig+0x138>)
 800327e:	4290      	cmp	r0, r2
 8003280:	d01e      	beq.n	80032c0 <TIM_Base_SetConfig+0xf8>
 8003282:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003286:	4290      	cmp	r0, r2
 8003288:	d01a      	beq.n	80032c0 <TIM_Base_SetConfig+0xf8>
 800328a:	e01b      	b.n	80032c4 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800328c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003290:	684a      	ldr	r2, [r1, #4]
 8003292:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003294:	e022      	b.n	80032dc <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800329a:	684a      	ldr	r2, [r1, #4]
 800329c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329e:	e01d      	b.n	80032dc <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80032a4:	684a      	ldr	r2, [r1, #4]
 80032a6:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ac:	68ca      	ldr	r2, [r1, #12]
 80032ae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b4:	694a      	ldr	r2, [r1, #20]
 80032b6:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b8:	688a      	ldr	r2, [r1, #8]
 80032ba:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80032bc:	680a      	ldr	r2, [r1, #0]
 80032be:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80032c0:	690a      	ldr	r2, [r1, #16]
 80032c2:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80032c4:	6802      	ldr	r2, [r0, #0]
 80032c6:	f042 0204 	orr.w	r2, r2, #4
 80032ca:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80032cc:	2201      	movs	r2, #1
 80032ce:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 80032d0:	6003      	str	r3, [r0, #0]
}
 80032d2:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80032d8:	684a      	ldr	r2, [r1, #4]
 80032da:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80032dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e0:	68ca      	ldr	r2, [r1, #12]
 80032e2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032e8:	694a      	ldr	r2, [r1, #20]
 80032ea:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ec:	688a      	ldr	r2, [r1, #8]
 80032ee:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80032f0:	680a      	ldr	r2, [r1, #0]
 80032f2:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f4:	e7e6      	b.n	80032c4 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80032fa:	684a      	ldr	r2, [r1, #4]
 80032fc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fe:	e7ed      	b.n	80032dc <TIM_Base_SetConfig+0x114>
 8003300:	40010000 	.word	0x40010000
 8003304:	40014000 	.word	0x40014000

08003308 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003308:	b340      	cbz	r0, 800335c <HAL_TIM_PWM_Init+0x54>
{
 800330a:	b510      	push	{r4, lr}
 800330c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800330e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003312:	b1f3      	cbz	r3, 8003352 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	2302      	movs	r3, #2
 8003316:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331a:	4621      	mov	r1, r4
 800331c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003320:	f7ff ff52 	bl	80031c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	2301      	movs	r3, #1
 8003326:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800332e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003332:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003336:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800333e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003342:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003346:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800334a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800334e:	2000      	movs	r0, #0
}
 8003350:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003352:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003356:	f7fe faa7 	bl	80018a8 <HAL_TIM_PWM_MspInit>
 800335a:	e7db      	b.n	8003314 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800335c:	2001      	movs	r0, #1
}
 800335e:	4770      	bx	lr

08003360 <TIM_OC2_SetConfig>:
{
 8003360:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8003362:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003364:	6a02      	ldr	r2, [r0, #32]
 8003366:	f022 0210 	bic.w	r2, r2, #16
 800336a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800336c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800336e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003370:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003374:	680d      	ldr	r5, [r1, #0]
 8003376:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800337a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800337e:	688d      	ldr	r5, [r1, #8]
 8003380:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003384:	4d0e      	ldr	r5, [pc, #56]	@ (80033c0 <TIM_OC2_SetConfig+0x60>)
 8003386:	42a8      	cmp	r0, r5
 8003388:	d003      	beq.n	8003392 <TIM_OC2_SetConfig+0x32>
 800338a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800338e:	42a8      	cmp	r0, r5
 8003390:	d10e      	bne.n	80033b0 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003396:	68cd      	ldr	r5, [r1, #12]
 8003398:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800339c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033a0:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033a4:	698d      	ldr	r5, [r1, #24]
 80033a6:	694e      	ldr	r6, [r1, #20]
 80033a8:	ea46 0c05 	orr.w	ip, r6, r5
 80033ac:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 80033b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80033b2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80033b4:	684a      	ldr	r2, [r1, #4]
 80033b6:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80033b8:	6203      	str	r3, [r0, #32]
}
 80033ba:	bc70      	pop	{r4, r5, r6}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000

080033c4 <HAL_TIM_PWM_ConfigChannel>:
{
 80033c4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80033c6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d066      	beq.n	800349c <HAL_TIM_PWM_ConfigChannel+0xd8>
 80033ce:	4604      	mov	r4, r0
 80033d0:	460d      	mov	r5, r1
 80033d2:	2301      	movs	r3, #1
 80033d4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80033d8:	2a0c      	cmp	r2, #12
 80033da:	d85a      	bhi.n	8003492 <HAL_TIM_PWM_ConfigChannel+0xce>
 80033dc:	e8df f002 	tbb	[pc, r2]
 80033e0:	59595907 	.word	0x59595907
 80033e4:	5959591b 	.word	0x5959591b
 80033e8:	59595930 	.word	0x59595930
 80033ec:	44          	.byte	0x44
 80033ed:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033ee:	6800      	ldr	r0, [r0, #0]
 80033f0:	f7ff fe64 	bl	80030bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033f4:	6822      	ldr	r2, [r4, #0]
 80033f6:	6993      	ldr	r3, [r2, #24]
 80033f8:	f043 0308 	orr.w	r3, r3, #8
 80033fc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	6993      	ldr	r3, [r2, #24]
 8003402:	f023 0304 	bic.w	r3, r3, #4
 8003406:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	6993      	ldr	r3, [r2, #24]
 800340c:	6929      	ldr	r1, [r5, #16]
 800340e:	430b      	orrs	r3, r1
 8003410:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2000      	movs	r0, #0
      break;
 8003414:	e03e      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003416:	6800      	ldr	r0, [r0, #0]
 8003418:	f7ff ffa2 	bl	8003360 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	6993      	ldr	r3, [r2, #24]
 8003420:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003424:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003426:	6822      	ldr	r2, [r4, #0]
 8003428:	6993      	ldr	r3, [r2, #24]
 800342a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800342e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003430:	6822      	ldr	r2, [r4, #0]
 8003432:	6993      	ldr	r3, [r2, #24]
 8003434:	6929      	ldr	r1, [r5, #16]
 8003436:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800343a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800343c:	2000      	movs	r0, #0
      break;
 800343e:	e029      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003440:	6800      	ldr	r0, [r0, #0]
 8003442:	f7ff fe69 	bl	8003118 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	69d3      	ldr	r3, [r2, #28]
 800344a:	f043 0308 	orr.w	r3, r3, #8
 800344e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003450:	6822      	ldr	r2, [r4, #0]
 8003452:	69d3      	ldr	r3, [r2, #28]
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	69d3      	ldr	r3, [r2, #28]
 800345e:	6929      	ldr	r1, [r5, #16]
 8003460:	430b      	orrs	r3, r1
 8003462:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003464:	2000      	movs	r0, #0
      break;
 8003466:	e015      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003468:	6800      	ldr	r0, [r0, #0]
 800346a:	f7ff fe85 	bl	8003178 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	69d3      	ldr	r3, [r2, #28]
 8003472:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003476:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003478:	6822      	ldr	r2, [r4, #0]
 800347a:	69d3      	ldr	r3, [r2, #28]
 800347c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003480:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	69d3      	ldr	r3, [r2, #28]
 8003486:	6929      	ldr	r1, [r5, #16]
 8003488:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800348c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800348e:	2000      	movs	r0, #0
      break;
 8003490:	e000      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003492:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003494:	2300      	movs	r3, #0
 8003496:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800349a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800349c:	2002      	movs	r0, #2
 800349e:	e7fc      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0xd6>

080034a0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a0:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034a4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a6:	f04f 0c01 	mov.w	ip, #1
 80034aa:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 80034ae:	ea23 030c 	bic.w	r3, r3, ip
 80034b2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034b4:	6a03      	ldr	r3, [r0, #32]
 80034b6:	408a      	lsls	r2, r1
 80034b8:	431a      	orrs	r2, r3
 80034ba:	6202      	str	r2, [r0, #32]
}
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_TIM_PWM_Start>:
{
 80034c0:	b510      	push	{r4, lr}
 80034c2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034c4:	4608      	mov	r0, r1
 80034c6:	bba1      	cbnz	r1, 8003532 <HAL_TIM_PWM_Start+0x72>
 80034c8:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d167      	bne.n	80035a2 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d2:	2302      	movs	r3, #2
 80034d4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034d8:	2201      	movs	r2, #1
 80034da:	4601      	mov	r1, r0
 80034dc:	6820      	ldr	r0, [r4, #0]
 80034de:	f7ff ffdf 	bl	80034a0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	4a31      	ldr	r2, [pc, #196]	@ (80035ac <HAL_TIM_PWM_Start+0xec>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d048      	beq.n	800357c <HAL_TIM_PWM_Start+0xbc>
 80034ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d044      	beq.n	800357c <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f6:	d049      	beq.n	800358c <HAL_TIM_PWM_Start+0xcc>
 80034f8:	4a2d      	ldr	r2, [pc, #180]	@ (80035b0 <HAL_TIM_PWM_Start+0xf0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d046      	beq.n	800358c <HAL_TIM_PWM_Start+0xcc>
 80034fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003502:	4293      	cmp	r3, r2
 8003504:	d042      	beq.n	800358c <HAL_TIM_PWM_Start+0xcc>
 8003506:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800350a:	4293      	cmp	r3, r2
 800350c:	d03e      	beq.n	800358c <HAL_TIM_PWM_Start+0xcc>
 800350e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003512:	4293      	cmp	r3, r2
 8003514:	d03a      	beq.n	800358c <HAL_TIM_PWM_Start+0xcc>
 8003516:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800351a:	4293      	cmp	r3, r2
 800351c:	d036      	beq.n	800358c <HAL_TIM_PWM_Start+0xcc>
 800351e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003522:	4293      	cmp	r3, r2
 8003524:	d032      	beq.n	800358c <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800352e:	2000      	movs	r0, #0
 8003530:	e036      	b.n	80035a0 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003532:	2904      	cmp	r1, #4
 8003534:	d00c      	beq.n	8003550 <HAL_TIM_PWM_Start+0x90>
 8003536:	2908      	cmp	r1, #8
 8003538:	bf0c      	ite	eq
 800353a:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 800353e:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	bf18      	it	ne
 8003548:	2301      	movne	r3, #1
 800354a:	b143      	cbz	r3, 800355e <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 800354c:	2001      	movs	r0, #1
 800354e:	e027      	b.n	80035a0 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003550:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003554:	b2db      	uxtb	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	bf18      	it	ne
 800355a:	2301      	movne	r3, #1
 800355c:	e7f5      	b.n	800354a <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	2804      	cmp	r0, #4
 8003560:	d008      	beq.n	8003574 <HAL_TIM_PWM_Start+0xb4>
 8003562:	2808      	cmp	r0, #8
 8003564:	f04f 0302 	mov.w	r3, #2
 8003568:	bf0c      	ite	eq
 800356a:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 800356e:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8003572:	e7b1      	b.n	80034d8 <HAL_TIM_PWM_Start+0x18>
 8003574:	2302      	movs	r3, #2
 8003576:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800357a:	e7ad      	b.n	80034d8 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 800357c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800357e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003582:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	4a09      	ldr	r2, [pc, #36]	@ (80035ac <HAL_TIM_PWM_Start+0xec>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d1b2      	bne.n	80034f2 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003592:	2a06      	cmp	r2, #6
 8003594:	d007      	beq.n	80035a6 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800359e:	2000      	movs	r0, #0
}
 80035a0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035a2:	2001      	movs	r0, #1
 80035a4:	e7fc      	b.n	80035a0 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 80035a6:	2000      	movs	r0, #0
 80035a8:	e7fa      	b.n	80035a0 <HAL_TIM_PWM_Start+0xe0>
 80035aa:	bf00      	nop
 80035ac:	40010000 	.word	0x40010000
 80035b0:	40000400 	.word	0x40000400

080035b4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035b4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80035b8:	2a01      	cmp	r2, #1
 80035ba:	d03b      	beq.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 80035bc:	b430      	push	{r4, r5}
 80035be:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80035c0:	2201      	movs	r2, #1
 80035c2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c6:	2202      	movs	r2, #2
 80035c8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035cc:	6804      	ldr	r4, [r0, #0]
 80035ce:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d6:	680d      	ldr	r5, [r1, #0]
 80035d8:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035da:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4c16      	ldr	r4, [pc, #88]	@ (8003638 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 80035e0:	42a2      	cmp	r2, r4
 80035e2:	d01a      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80035e4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80035e8:	d017      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80035ea:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 80035ee:	42a2      	cmp	r2, r4
 80035f0:	d013      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80035f2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80035f6:	42a2      	cmp	r2, r4
 80035f8:	d00f      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80035fa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80035fe:	42a2      	cmp	r2, r4
 8003600:	d00b      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003602:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 8003606:	42a2      	cmp	r2, r4
 8003608:	d007      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800360a:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 800360e:	42a2      	cmp	r2, r4
 8003610:	d003      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003612:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8003616:	42a2      	cmp	r2, r4
 8003618:	d104      	bne.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800361a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800361e:	6849      	ldr	r1, [r1, #4]
 8003620:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003622:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800362a:	2000      	movs	r0, #0
 800362c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003630:	bc30      	pop	{r4, r5}
 8003632:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003634:	2002      	movs	r0, #2
}
 8003636:	4770      	bx	lr
 8003638:	40010000 	.word	0x40010000

0800363c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	f102 030c 	add.w	r3, r2, #12
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	320c      	adds	r2, #12
 800364c:	e842 3100 	strex	r1, r3, [r2]
 8003650:	2900      	cmp	r1, #0
 8003652:	d1f3      	bne.n	800363c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003654:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	f102 0314 	add.w	r3, r2, #20
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	3214      	adds	r2, #20
 8003664:	e842 3100 	strex	r1, r3, [r2]
 8003668:	2900      	cmp	r1, #0
 800366a:	d1f3      	bne.n	8003654 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800366c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800366e:	2b01      	cmp	r3, #1
 8003670:	d005      	beq.n	800367e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003672:	2320      	movs	r3, #32
 8003674:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003678:	2300      	movs	r3, #0
 800367a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800367c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800367e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	f102 030c 	add.w	r3, r2, #12
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	320c      	adds	r2, #12
 800368e:	e842 3100 	strex	r1, r3, [r2]
 8003692:	2900      	cmp	r1, #0
 8003694:	d1f3      	bne.n	800367e <UART_EndRxTransfer+0x42>
 8003696:	e7ec      	b.n	8003672 <UART_EndRxTransfer+0x36>

08003698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003698:	b510      	push	{r4, lr}
 800369a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369c:	6802      	ldr	r2, [r0, #0]
 800369e:	6913      	ldr	r3, [r2, #16]
 80036a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036a4:	68c1      	ldr	r1, [r0, #12]
 80036a6:	430b      	orrs	r3, r1
 80036a8:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 80036aa:	6801      	ldr	r1, [r0, #0]
 80036ac:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ae:	6883      	ldr	r3, [r0, #8]
 80036b0:	6900      	ldr	r0, [r0, #16]
 80036b2:	4303      	orrs	r3, r0
 80036b4:	6960      	ldr	r0, [r4, #20]
 80036b6:	4303      	orrs	r3, r0
 80036b8:	69e0      	ldr	r0, [r4, #28]
 80036ba:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80036bc:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 80036c0:	f022 020c 	bic.w	r2, r2, #12
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c8:	6822      	ldr	r2, [r4, #0]
 80036ca:	6953      	ldr	r3, [r2, #20]
 80036cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036d0:	69a1      	ldr	r1, [r4, #24]
 80036d2:	430b      	orrs	r3, r1
 80036d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003794 <UART_SetConfig+0xfc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d006      	beq.n	80036ec <UART_SetConfig+0x54>
 80036de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d002      	beq.n	80036ec <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036e6:	f7ff f9dd 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 80036ea:	e001      	b.n	80036f0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7ff f9ea 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f0:	69e3      	ldr	r3, [r4, #28]
 80036f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f6:	d024      	beq.n	8003742 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f8:	2100      	movs	r1, #0
 80036fa:	1803      	adds	r3, r0, r0
 80036fc:	4149      	adcs	r1, r1
 80036fe:	181b      	adds	r3, r3, r0
 8003700:	f141 0100 	adc.w	r1, r1, #0
 8003704:	00c9      	lsls	r1, r1, #3
 8003706:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1818      	adds	r0, r3, r0
 800370e:	6863      	ldr	r3, [r4, #4]
 8003710:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003714:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003718:	f141 0100 	adc.w	r1, r1, #0
 800371c:	f7fd f99a 	bl	8000a54 <__aeabi_uldivmod>
 8003720:	6821      	ldr	r1, [r4, #0]
 8003722:	4a1d      	ldr	r2, [pc, #116]	@ (8003798 <UART_SetConfig+0x100>)
 8003724:	fba2 4300 	umull	r4, r3, r2, r0
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2464      	movs	r4, #100	@ 0x64
 800372c:	fb04 0013 	mls	r0, r4, r3, r0
 8003730:	0100      	lsls	r0, r0, #4
 8003732:	3032      	adds	r0, #50	@ 0x32
 8003734:	fba2 2000 	umull	r2, r0, r2, r0
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 800373e:	608b      	str	r3, [r1, #8]
  }
}
 8003740:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003742:	2300      	movs	r3, #0
 8003744:	1802      	adds	r2, r0, r0
 8003746:	eb43 0103 	adc.w	r1, r3, r3
 800374a:	1812      	adds	r2, r2, r0
 800374c:	f141 0100 	adc.w	r1, r1, #0
 8003750:	00c9      	lsls	r1, r1, #3
 8003752:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003756:	00d2      	lsls	r2, r2, #3
 8003758:	1810      	adds	r0, r2, r0
 800375a:	f141 0100 	adc.w	r1, r1, #0
 800375e:	6862      	ldr	r2, [r4, #4]
 8003760:	1892      	adds	r2, r2, r2
 8003762:	415b      	adcs	r3, r3
 8003764:	f7fd f976 	bl	8000a54 <__aeabi_uldivmod>
 8003768:	4a0b      	ldr	r2, [pc, #44]	@ (8003798 <UART_SetConfig+0x100>)
 800376a:	fba2 3100 	umull	r3, r1, r2, r0
 800376e:	0949      	lsrs	r1, r1, #5
 8003770:	2364      	movs	r3, #100	@ 0x64
 8003772:	fb03 0311 	mls	r3, r3, r1, r0
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	3332      	adds	r3, #50	@ 0x32
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	6820      	ldr	r0, [r4, #0]
 8003780:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003784:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800378e:	4413      	add	r3, r2
 8003790:	6083      	str	r3, [r0, #8]
 8003792:	e7d5      	b.n	8003740 <UART_SetConfig+0xa8>
 8003794:	40011000 	.word	0x40011000
 8003798:	51eb851f 	.word	0x51eb851f

0800379c <UART_WaitOnFlagUntilTimeout>:
{
 800379c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037a0:	b083      	sub	sp, #12
 80037a2:	4680      	mov	r8, r0
 80037a4:	460d      	mov	r5, r1
 80037a6:	4616      	mov	r6, r2
 80037a8:	4699      	mov	r9, r3
 80037aa:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ac:	f8d8 3000 	ldr.w	r3, [r8]
 80037b0:	681c      	ldr	r4, [r3, #0]
 80037b2:	ea35 0404 	bics.w	r4, r5, r4
 80037b6:	bf0c      	ite	eq
 80037b8:	2401      	moveq	r4, #1
 80037ba:	2400      	movne	r4, #0
 80037bc:	42b4      	cmp	r4, r6
 80037be:	d128      	bne.n	8003812 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80037c0:	f1b7 3fff 	cmp.w	r7, #4294967295
 80037c4:	d0f4      	beq.n	80037b0 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe f9bd 	bl	8001b44 <HAL_GetTick>
 80037ca:	eba0 0009 	sub.w	r0, r0, r9
 80037ce:	42b8      	cmp	r0, r7
 80037d0:	d823      	bhi.n	800381a <UART_WaitOnFlagUntilTimeout+0x7e>
 80037d2:	b327      	cbz	r7, 800381e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037d4:	f8d8 3000 	ldr.w	r3, [r8]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	f012 0f04 	tst.w	r2, #4
 80037de:	d0e5      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x10>
 80037e0:	2d80      	cmp	r5, #128	@ 0x80
 80037e2:	d0e3      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x10>
 80037e4:	2d40      	cmp	r5, #64	@ 0x40
 80037e6:	d0e1      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	f012 0f08 	tst.w	r2, #8
 80037ee:	d0dd      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037f0:	2400      	movs	r4, #0
 80037f2:	9401      	str	r4, [sp, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	9201      	str	r2, [sp, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80037fe:	4640      	mov	r0, r8
 8003800:	f7ff ff1c 	bl	800363c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003804:	2308      	movs	r3, #8
 8003806:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800380a:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 800380e:	2001      	movs	r0, #1
 8003810:	e000      	b.n	8003814 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8003812:	2000      	movs	r0, #0
}
 8003814:	b003      	add	sp, #12
 8003816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800381a:	2003      	movs	r0, #3
 800381c:	e7fa      	b.n	8003814 <UART_WaitOnFlagUntilTimeout+0x78>
 800381e:	2003      	movs	r0, #3
 8003820:	e7f8      	b.n	8003814 <UART_WaitOnFlagUntilTimeout+0x78>

08003822 <HAL_UART_Init>:
  if (huart == NULL)
 8003822:	b360      	cbz	r0, 800387e <HAL_UART_Init+0x5c>
{
 8003824:	b510      	push	{r4, lr}
 8003826:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003828:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800382c:	b313      	cbz	r3, 8003874 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800382e:	2324      	movs	r3, #36	@ 0x24
 8003830:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003834:	6822      	ldr	r2, [r4, #0]
 8003836:	68d3      	ldr	r3, [r2, #12]
 8003838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800383c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800383e:	4620      	mov	r0, r4
 8003840:	f7ff ff2a 	bl	8003698 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003844:	6822      	ldr	r2, [r4, #0]
 8003846:	6913      	ldr	r3, [r2, #16]
 8003848:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800384c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384e:	6822      	ldr	r2, [r4, #0]
 8003850:	6953      	ldr	r3, [r2, #20]
 8003852:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003856:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	68d3      	ldr	r3, [r2, #12]
 800385c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003860:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	2000      	movs	r0, #0
 8003864:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003866:	2320      	movs	r3, #32
 8003868:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800386c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003870:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8003872:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003874:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003878:	f7fe f89a 	bl	80019b0 <HAL_UART_MspInit>
 800387c:	e7d7      	b.n	800382e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800387e:	2001      	movs	r0, #1
}
 8003880:	4770      	bx	lr

08003882 <HAL_UART_Transmit>:
{
 8003882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800388a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b20      	cmp	r3, #32
 8003892:	d15c      	bne.n	800394e <HAL_UART_Transmit+0xcc>
 8003894:	4604      	mov	r4, r0
 8003896:	460d      	mov	r5, r1
 8003898:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800389a:	2900      	cmp	r1, #0
 800389c:	d05b      	beq.n	8003956 <HAL_UART_Transmit+0xd4>
 800389e:	b90a      	cbnz	r2, 80038a4 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80038a0:	2001      	movs	r0, #1
 80038a2:	e055      	b.n	8003950 <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a8:	2321      	movs	r3, #33	@ 0x21
 80038aa:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80038ae:	f7fe f949 	bl	8001b44 <HAL_GetTick>
 80038b2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80038b4:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038b8:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038bc:	68a3      	ldr	r3, [r4, #8]
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c2:	d009      	beq.n	80038d8 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 80038c4:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 80038c8:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	b373      	cbz	r3, 800392c <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ce:	f04f 0900 	mov.w	r9, #0
 80038d2:	f04f 0880 	mov.w	r8, #128	@ 0x80
 80038d6:	e019      	b.n	800390c <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d8:	6923      	ldr	r3, [r4, #16]
 80038da:	b113      	cbz	r3, 80038e2 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 80038dc:	f04f 0a00 	mov.w	sl, #0
 80038e0:	e7f2      	b.n	80038c8 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 80038e2:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80038e4:	2500      	movs	r5, #0
 80038e6:	e7ef      	b.n	80038c8 <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 80038e8:	2320      	movs	r3, #32
 80038ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80038ee:	2003      	movs	r0, #3
 80038f0:	e02e      	b.n	8003950 <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80038f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80038fe:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003900:	3a01      	subs	r2, #1
 8003902:	b292      	uxth	r2, r2
 8003904:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003906:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003908:	b29b      	uxth	r3, r3
 800390a:	b17b      	cbz	r3, 800392c <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390c:	9600      	str	r6, [sp, #0]
 800390e:	463b      	mov	r3, r7
 8003910:	464a      	mov	r2, r9
 8003912:	4641      	mov	r1, r8
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff ff41 	bl	800379c <UART_WaitOnFlagUntilTimeout>
 800391a:	2800      	cmp	r0, #0
 800391c:	d1e4      	bne.n	80038e8 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 800391e:	2d00      	cmp	r5, #0
 8003920:	d0e7      	beq.n	80038f2 <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003928:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800392a:	e7e8      	b.n	80038fe <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800392c:	9600      	str	r6, [sp, #0]
 800392e:	463b      	mov	r3, r7
 8003930:	2200      	movs	r2, #0
 8003932:	2140      	movs	r1, #64	@ 0x40
 8003934:	4620      	mov	r0, r4
 8003936:	f7ff ff31 	bl	800379c <UART_WaitOnFlagUntilTimeout>
 800393a:	b918      	cbnz	r0, 8003944 <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 800393c:	2320      	movs	r3, #32
 800393e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003942:	e005      	b.n	8003950 <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 8003944:	2320      	movs	r3, #32
 8003946:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800394a:	2003      	movs	r0, #3
 800394c:	e000      	b.n	8003950 <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 800394e:	2002      	movs	r0, #2
}
 8003950:	b002      	add	sp, #8
 8003952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8003956:	2001      	movs	r0, #1
 8003958:	e7fa      	b.n	8003950 <HAL_UART_Transmit+0xce>

0800395a <memset>:
 800395a:	4402      	add	r2, r0
 800395c:	4603      	mov	r3, r0
 800395e:	4293      	cmp	r3, r2
 8003960:	d100      	bne.n	8003964 <memset+0xa>
 8003962:	4770      	bx	lr
 8003964:	f803 1b01 	strb.w	r1, [r3], #1
 8003968:	e7f9      	b.n	800395e <memset+0x4>
	...

0800396c <__libc_init_array>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	4d0d      	ldr	r5, [pc, #52]	@ (80039a4 <__libc_init_array+0x38>)
 8003970:	4c0d      	ldr	r4, [pc, #52]	@ (80039a8 <__libc_init_array+0x3c>)
 8003972:	1b64      	subs	r4, r4, r5
 8003974:	10a4      	asrs	r4, r4, #2
 8003976:	2600      	movs	r6, #0
 8003978:	42a6      	cmp	r6, r4
 800397a:	d109      	bne.n	8003990 <__libc_init_array+0x24>
 800397c:	4d0b      	ldr	r5, [pc, #44]	@ (80039ac <__libc_init_array+0x40>)
 800397e:	4c0c      	ldr	r4, [pc, #48]	@ (80039b0 <__libc_init_array+0x44>)
 8003980:	f000 f8f4 	bl	8003b6c <_init>
 8003984:	1b64      	subs	r4, r4, r5
 8003986:	10a4      	asrs	r4, r4, #2
 8003988:	2600      	movs	r6, #0
 800398a:	42a6      	cmp	r6, r4
 800398c:	d105      	bne.n	800399a <__libc_init_array+0x2e>
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	f855 3b04 	ldr.w	r3, [r5], #4
 8003994:	4798      	blx	r3
 8003996:	3601      	adds	r6, #1
 8003998:	e7ee      	b.n	8003978 <__libc_init_array+0xc>
 800399a:	f855 3b04 	ldr.w	r3, [r5], #4
 800399e:	4798      	blx	r3
 80039a0:	3601      	adds	r6, #1
 80039a2:	e7f2      	b.n	800398a <__libc_init_array+0x1e>
 80039a4:	08003c14 	.word	0x08003c14
 80039a8:	08003c14 	.word	0x08003c14
 80039ac:	08003c14 	.word	0x08003c14
 80039b0:	08003c18 	.word	0x08003c18

080039b4 <atanf>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	ee10 5a10 	vmov	r5, s0
 80039ba:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80039be:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80039c2:	eef0 7a40 	vmov.f32	s15, s0
 80039c6:	d310      	bcc.n	80039ea <atanf+0x36>
 80039c8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80039cc:	d904      	bls.n	80039d8 <atanf+0x24>
 80039ce:	ee70 7a00 	vadd.f32	s15, s0, s0
 80039d2:	eeb0 0a67 	vmov.f32	s0, s15
 80039d6:	bd38      	pop	{r3, r4, r5, pc}
 80039d8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8003b10 <atanf+0x15c>
 80039dc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003b14 <atanf+0x160>
 80039e0:	2d00      	cmp	r5, #0
 80039e2:	bfc8      	it	gt
 80039e4:	eef0 7a47 	vmovgt.f32	s15, s14
 80039e8:	e7f3      	b.n	80039d2 <atanf+0x1e>
 80039ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003b18 <atanf+0x164>)
 80039ec:	429c      	cmp	r4, r3
 80039ee:	d810      	bhi.n	8003a12 <atanf+0x5e>
 80039f0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80039f4:	d20a      	bcs.n	8003a0c <atanf+0x58>
 80039f6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8003b1c <atanf+0x168>
 80039fa:	ee30 7a07 	vadd.f32	s14, s0, s14
 80039fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a02:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	dce2      	bgt.n	80039d2 <atanf+0x1e>
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	e013      	b.n	8003a3a <atanf+0x86>
 8003a12:	f000 f8a3 	bl	8003b5c <fabsf>
 8003a16:	4b42      	ldr	r3, [pc, #264]	@ (8003b20 <atanf+0x16c>)
 8003a18:	429c      	cmp	r4, r3
 8003a1a:	d84f      	bhi.n	8003abc <atanf+0x108>
 8003a1c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8003a20:	429c      	cmp	r4, r3
 8003a22:	d841      	bhi.n	8003aa8 <atanf+0xf4>
 8003a24:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8003a28:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003a2c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8003a30:	2300      	movs	r3, #0
 8003a32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003a36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003a40:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8003b24 <atanf+0x170>
 8003a44:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8003b28 <atanf+0x174>
 8003a48:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8003b2c <atanf+0x178>
 8003a4c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8003a50:	eee6 5a87 	vfma.f32	s11, s13, s14
 8003a54:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8003b30 <atanf+0x17c>
 8003a58:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8003a5c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8003b34 <atanf+0x180>
 8003a60:	eee7 5a26 	vfma.f32	s11, s14, s13
 8003a64:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003b38 <atanf+0x184>
 8003a68:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8003a6c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8003b3c <atanf+0x188>
 8003a70:	eee7 5a26 	vfma.f32	s11, s14, s13
 8003a74:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003b40 <atanf+0x18c>
 8003a78:	eea6 5a87 	vfma.f32	s10, s13, s14
 8003a7c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003b44 <atanf+0x190>
 8003a80:	eea5 7a26 	vfma.f32	s14, s10, s13
 8003a84:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8003b48 <atanf+0x194>
 8003a88:	eea7 5a26 	vfma.f32	s10, s14, s13
 8003a8c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003b4c <atanf+0x198>
 8003a90:	eea5 7a26 	vfma.f32	s14, s10, s13
 8003a94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a98:	eea5 7a86 	vfma.f32	s14, s11, s12
 8003a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aa0:	d121      	bne.n	8003ae6 <atanf+0x132>
 8003aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003aa6:	e794      	b.n	80039d2 <atanf+0x1e>
 8003aa8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003aac:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003ab0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003aba:	e7be      	b.n	8003a3a <atanf+0x86>
 8003abc:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <atanf+0x19c>)
 8003abe:	429c      	cmp	r4, r3
 8003ac0:	d80b      	bhi.n	8003ada <atanf+0x126>
 8003ac2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8003ac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003aca:	eea0 7a27 	vfma.f32	s14, s0, s15
 8003ace:	2302      	movs	r3, #2
 8003ad0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad8:	e7af      	b.n	8003a3a <atanf+0x86>
 8003ada:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003ade:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e7a9      	b.n	8003a3a <atanf+0x86>
 8003ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <atanf+0x1a0>)
 8003ae8:	491b      	ldr	r1, [pc, #108]	@ (8003b58 <atanf+0x1a4>)
 8003aea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003aee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003af2:	edd3 6a00 	vldr	s13, [r3]
 8003af6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b00:	edd2 7a00 	vldr	s15, [r2]
 8003b04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b08:	bfb8      	it	lt
 8003b0a:	eef1 7a67 	vneglt.f32	s15, s15
 8003b0e:	e760      	b.n	80039d2 <atanf+0x1e>
 8003b10:	bfc90fdb 	.word	0xbfc90fdb
 8003b14:	3fc90fdb 	.word	0x3fc90fdb
 8003b18:	3edfffff 	.word	0x3edfffff
 8003b1c:	7149f2ca 	.word	0x7149f2ca
 8003b20:	3f97ffff 	.word	0x3f97ffff
 8003b24:	3c8569d7 	.word	0x3c8569d7
 8003b28:	3d4bda59 	.word	0x3d4bda59
 8003b2c:	bd6ef16b 	.word	0xbd6ef16b
 8003b30:	3d886b35 	.word	0x3d886b35
 8003b34:	3dba2e6e 	.word	0x3dba2e6e
 8003b38:	3e124925 	.word	0x3e124925
 8003b3c:	3eaaaaab 	.word	0x3eaaaaab
 8003b40:	bd15a221 	.word	0xbd15a221
 8003b44:	bd9d8795 	.word	0xbd9d8795
 8003b48:	bde38e38 	.word	0xbde38e38
 8003b4c:	be4ccccd 	.word	0xbe4ccccd
 8003b50:	401bffff 	.word	0x401bffff
 8003b54:	08003bfc 	.word	0x08003bfc
 8003b58:	08003bec 	.word	0x08003bec

08003b5c <fabsf>:
 8003b5c:	ee10 3a10 	vmov	r3, s0
 8003b60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b64:	ee00 3a10 	vmov	s0, r3
 8003b68:	4770      	bx	lr
	...

08003b6c <_init>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr

08003b78 <_fini>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr
