
drone_nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d74  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f38  08002f38  00003f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f78  08002f78  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002f78  08002f78  00003f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f80  08002f80  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f80  08002f80  00003f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f84  08002f84  00003f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f88  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000000c  08002f94  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08002f94  000042f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ca2  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237c  00000000  00000000  00018cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c683  00000000  00000000  0001b05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  000276e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bdc  00000000  00000000  00028470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220cb  00000000  00000000  0002904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018180  00000000  00000000  0004b117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d6a  00000000  00000000  00063297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136001  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026a8  00000000  00000000  00136044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001386ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f20 	.word	0x08002f20

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002f20 	.word	0x08002f20

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <Debug_Send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Send(const char *msg)
{
 8000540:	b510      	push	{r4, lr}
 8000542:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000544:	f7ff fe5e 	bl	8000204 <strlen>
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	b282      	uxth	r2, r0
 800054e:	4621      	mov	r1, r4
 8000550:	4801      	ldr	r0, [pc, #4]	@ (8000558 <Debug_Send+0x18>)
 8000552:	f002 fc4c 	bl	8002dee <HAL_UART_Transmit>
}
 8000556:	bd10      	pop	{r4, pc}
 8000558:	200001c8 	.word	0x200001c8

0800055c <IMU_UpdateAverage>:
}

/* USER CODE BEGIN 4 */

void IMU_UpdateAverage(const MPU6050_Physical_t *sample)
{
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	4684      	mov	ip, r0
	if (imu_count < IMU_WINDOW_SIZE)
 8000560:	4b7c      	ldr	r3, [pc, #496]	@ (8000754 <IMU_UpdateAverage+0x1f8>)
 8000562:	f893 e000 	ldrb.w	lr, [r3]
 8000566:	f1be 0f09 	cmp.w	lr, #9
 800056a:	f200 808c 	bhi.w	8000686 <IMU_UpdateAverage+0x12a>
	{
		imu_window[imu_index] = *sample;
 800056e:	4b7a      	ldr	r3, [pc, #488]	@ (8000758 <IMU_UpdateAverage+0x1fc>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000576:	4c79      	ldr	r4, [pc, #484]	@ (800075c <IMU_UpdateAverage+0x200>)
 8000578:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800057c:	4605      	mov	r5, r0
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		imu_sum.accel_x += sample->accel_x;
 800058a:	4b75      	ldr	r3, [pc, #468]	@ (8000760 <IMU_UpdateAverage+0x204>)
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	ed9c 7a00 	vldr	s14, [ip]
 8000594:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000598:	edc3 7a00 	vstr	s15, [r3]
		imu_sum.accel_y += sample->accel_y;
 800059c:	edd3 7a01 	vldr	s15, [r3, #4]
 80005a0:	ed9c 7a01 	vldr	s14, [ip, #4]
 80005a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005a8:	edc3 7a01 	vstr	s15, [r3, #4]
		imu_sum.accel_z += sample->accel_z;
 80005ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80005b0:	ed9c 7a02 	vldr	s14, [ip, #8]
 80005b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005b8:	edc3 7a02 	vstr	s15, [r3, #8]
		imu_sum.gyro_x  += sample->gyro_x;
 80005bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80005c0:	ed9c 7a03 	vldr	s14, [ip, #12]
 80005c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005c8:	edc3 7a03 	vstr	s15, [r3, #12]
		imu_sum.gyro_y  += sample->gyro_y;
 80005cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80005d0:	ed9c 7a04 	vldr	s14, [ip, #16]
 80005d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005d8:	edc3 7a04 	vstr	s15, [r3, #16]
		imu_sum.gyro_z  += sample->gyro_z;
 80005dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80005e0:	ed9c 7a05 	vldr	s14, [ip, #20]
 80005e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005e8:	edc3 7a05 	vstr	s15, [r3, #20]
		imu_sum.temp    += sample->temp;
 80005ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80005f0:	ed9c 7a06 	vldr	s14, [ip, #24]
 80005f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005f8:	edc3 7a06 	vstr	s15, [r3, #24]
		imu_count++;
 80005fc:	f10e 0e01 	add.w	lr, lr, #1
 8000600:	4b54      	ldr	r3, [pc, #336]	@ (8000754 <IMU_UpdateAverage+0x1f8>)
 8000602:	f883 e000 	strb.w	lr, [r3]
		imu_sum.gyro_y  += sample->gyro_y;
		imu_sum.gyro_z  += sample->gyro_z;
		imu_sum.temp    += sample->temp;
	}

	imu_index = (imu_index + 1) % IMU_WINDOW_SIZE;
 8000606:	4854      	ldr	r0, [pc, #336]	@ (8000758 <IMU_UpdateAverage+0x1fc>)
 8000608:	7803      	ldrb	r3, [r0, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	4a55      	ldr	r2, [pc, #340]	@ (8000764 <IMU_UpdateAverage+0x208>)
 800060e:	fb82 1203 	smull	r1, r2, r2, r3
 8000612:	f002 01fc 	and.w	r1, r2, #252	@ 0xfc
 8000616:	eb01 02a2 	add.w	r2, r1, r2, asr #2
 800061a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800061e:	7003      	strb	r3, [r0, #0]
	float div = (float)imu_count;
 8000620:	4b4c      	ldr	r3, [pc, #304]	@ (8000754 <IMU_UpdateAverage+0x1f8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eef8 7a67 	vcvt.f32.u32	s15, s15

	imu_avg.accel_x = imu_sum.accel_x / div;
 800062c:	4b4e      	ldr	r3, [pc, #312]	@ (8000768 <IMU_UpdateAverage+0x20c>)
 800062e:	4a4c      	ldr	r2, [pc, #304]	@ (8000760 <IMU_UpdateAverage+0x204>)
 8000630:	edd2 6a00 	vldr	s13, [r2]
 8000634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000638:	ed83 7a00 	vstr	s14, [r3]
	imu_avg.accel_y = imu_sum.accel_y / div;
 800063c:	edd2 6a01 	vldr	s13, [r2, #4]
 8000640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000644:	ed83 7a01 	vstr	s14, [r3, #4]
	imu_avg.accel_z = imu_sum.accel_z / div;
 8000648:	edd2 6a02 	vldr	s13, [r2, #8]
 800064c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000650:	ed83 7a02 	vstr	s14, [r3, #8]
	imu_avg.gyro_x  = imu_sum.gyro_x  / div;
 8000654:	edd2 6a03 	vldr	s13, [r2, #12]
 8000658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800065c:	ed83 7a03 	vstr	s14, [r3, #12]
	imu_avg.gyro_y  = imu_sum.gyro_y  / div;
 8000660:	edd2 6a04 	vldr	s13, [r2, #16]
 8000664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000668:	ed83 7a04 	vstr	s14, [r3, #16]
	imu_avg.gyro_z  = imu_sum.gyro_z  / div;
 800066c:	edd2 6a05 	vldr	s13, [r2, #20]
 8000670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000674:	ed83 7a05 	vstr	s14, [r3, #20]
	imu_avg.temp    = imu_sum.temp    / div;
 8000678:	edd2 6a06 	vldr	s13, [r2, #24]
 800067c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000680:	ed83 7a06 	vstr	s14, [r3, #24]
}
 8000684:	bd30      	pop	{r4, r5, pc}
		imu_sum.accel_x -= imu_window[imu_index].accel_x;
 8000686:	4b34      	ldr	r3, [pc, #208]	@ (8000758 <IMU_UpdateAverage+0x1fc>)
 8000688:	7819      	ldrb	r1, [r3, #0]
 800068a:	4c35      	ldr	r4, [pc, #212]	@ (8000760 <IMU_UpdateAverage+0x204>)
 800068c:	4b33      	ldr	r3, [pc, #204]	@ (800075c <IMU_UpdateAverage+0x200>)
 800068e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000692:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000696:	ed94 4a00 	vldr	s8, [r4]
 800069a:	edd2 7a00 	vldr	s15, [r2]
 800069e:	ee34 4a67 	vsub.f32	s8, s8, s15
		imu_sum.accel_y -= imu_window[imu_index].accel_y;
 80006a2:	edd4 4a01 	vldr	s9, [r4, #4]
 80006a6:	edd2 7a01 	vldr	s15, [r2, #4]
 80006aa:	ee74 4ae7 	vsub.f32	s9, s9, s15
		imu_sum.accel_z -= imu_window[imu_index].accel_z;
 80006ae:	ed94 5a02 	vldr	s10, [r4, #8]
 80006b2:	edd2 7a02 	vldr	s15, [r2, #8]
 80006b6:	ee35 5a67 	vsub.f32	s10, s10, s15
		imu_sum.gyro_x  -= imu_window[imu_index].gyro_x;
 80006ba:	edd4 5a03 	vldr	s11, [r4, #12]
 80006be:	edd2 7a03 	vldr	s15, [r2, #12]
 80006c2:	ee75 5ae7 	vsub.f32	s11, s11, s15
		imu_sum.gyro_y  -= imu_window[imu_index].gyro_y;
 80006c6:	ed94 6a04 	vldr	s12, [r4, #16]
 80006ca:	edd2 7a04 	vldr	s15, [r2, #16]
 80006ce:	ee36 6a67 	vsub.f32	s12, s12, s15
		imu_sum.gyro_z  -= imu_window[imu_index].gyro_z;
 80006d2:	edd4 6a05 	vldr	s13, [r4, #20]
 80006d6:	edd2 7a05 	vldr	s15, [r2, #20]
 80006da:	ee76 6ae7 	vsub.f32	s13, s13, s15
		imu_sum.temp    -= imu_window[imu_index].temp;
 80006de:	ed94 7a06 	vldr	s14, [r4, #24]
 80006e2:	edd2 7a06 	vldr	s15, [r2, #24]
 80006e6:	ee37 7a67 	vsub.f32	s14, s14, s15
		imu_window[imu_index] = *sample;
 80006ea:	4696      	mov	lr, r2
 80006ec:	4605      	mov	r5, r0
 80006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
		imu_sum.accel_x += sample->accel_x;
 80006fc:	eddc 7a00 	vldr	s15, [ip]
 8000700:	ee77 7a84 	vadd.f32	s15, s15, s8
 8000704:	edc4 7a00 	vstr	s15, [r4]
		imu_sum.accel_y += sample->accel_y;
 8000708:	eddc 7a01 	vldr	s15, [ip, #4]
 800070c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8000710:	edc4 7a01 	vstr	s15, [r4, #4]
		imu_sum.accel_z += sample->accel_z;
 8000714:	eddc 7a02 	vldr	s15, [ip, #8]
 8000718:	ee77 7a85 	vadd.f32	s15, s15, s10
 800071c:	edc4 7a02 	vstr	s15, [r4, #8]
		imu_sum.gyro_x  += sample->gyro_x;
 8000720:	eddc 7a03 	vldr	s15, [ip, #12]
 8000724:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8000728:	edc4 7a03 	vstr	s15, [r4, #12]
		imu_sum.gyro_y  += sample->gyro_y;
 800072c:	eddc 7a04 	vldr	s15, [ip, #16]
 8000730:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000734:	edc4 7a04 	vstr	s15, [r4, #16]
		imu_sum.gyro_z  += sample->gyro_z;
 8000738:	eddc 7a05 	vldr	s15, [ip, #20]
 800073c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000740:	edc4 7a05 	vstr	s15, [r4, #20]
		imu_sum.temp    += sample->temp;
 8000744:	eddc 7a06 	vldr	s15, [ip, #24]
 8000748:	ee77 7a87 	vadd.f32	s15, s15, s14
 800074c:	edc4 7a06 	vstr	s15, [r4, #24]
 8000750:	e759      	b.n	8000606 <IMU_UpdateAverage+0xaa>
 8000752:	bf00      	nop
 8000754:	20000028 	.word	0x20000028
 8000758:	20000029 	.word	0x20000029
 800075c:	20000048 	.word	0x20000048
 8000760:	2000002c 	.word	0x2000002c
 8000764:	66666667 	.word	0x66666667
 8000768:	20000160 	.word	0x20000160

0800076c <SoftStartPWM>:

#define PWM_MAX_STEP 500  // passo máximo permitido por ciclo
#define Kp 0.2f            // ganho proporcional (ajuste conforme necessário)

void SoftStartPWM(uint32_t *current, uint32_t target)
{
 800076c:	b410      	push	{r4}
	int32_t error = (int32_t)target - (int32_t)(*current);
 800076e:	6802      	ldr	r2, [r0, #0]
 8000770:	1a8b      	subs	r3, r1, r2
 8000772:	ee07 3a90 	vmov	s15, r3
	int32_t step = (int32_t)(Kp * error);
 8000776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800077a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80007bc <SoftStartPWM+0x50>
 800077e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000786:	ee17 3a90 	vmov	r3, s15

	// saturação do passo
	if (step > PWM_MAX_STEP) step = PWM_MAX_STEP;
	else if (step < -PWM_MAX_STEP) step = -PWM_MAX_STEP;
 800078a:	4c0d      	ldr	r4, [pc, #52]	@ (80007c0 <SoftStartPWM+0x54>)
 800078c:	429c      	cmp	r4, r3
 800078e:	bfb8      	it	lt
 8000790:	461c      	movlt	r4, r3

	*current += step;
 8000792:	f5b4 7ffa 	cmp.w	r4, #500	@ 0x1f4
 8000796:	bfd4      	ite	le
 8000798:	1912      	addle	r2, r2, r4
 800079a:	f502 72fa 	addgt.w	r2, r2, #500	@ 0x1f4
 800079e:	6002      	str	r2, [r0, #0]

	// proteção contra overshoot (caso o passo cause ultrapassagem)
	if ((step > 0 && *current > target) || (step < 0 && *current < target)) {
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dd05      	ble.n	80007b0 <SoftStartPWM+0x44>
 80007a4:	428a      	cmp	r2, r1
 80007a6:	d900      	bls.n	80007aa <SoftStartPWM+0x3e>
		*current = target;
 80007a8:	6001      	str	r1, [r0, #0]
	}
}
 80007aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007ae:	4770      	bx	lr
	if ((step > 0 && *current > target) || (step < 0 && *current < target)) {
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dafa      	bge.n	80007aa <SoftStartPWM+0x3e>
 80007b4:	428a      	cmp	r2, r1
 80007b6:	d2f8      	bcs.n	80007aa <SoftStartPWM+0x3e>
 80007b8:	e7f6      	b.n	80007a8 <SoftStartPWM+0x3c>
 80007ba:	bf00      	nop
 80007bc:	3e4ccccd 	.word	0x3e4ccccd
 80007c0:	fffffe0c 	.word	0xfffffe0c

080007c4 <UpdatePWM>:


void UpdatePWM(void)
{
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SoftStartPWM((uint32_t*)&PWM_D9, PWM_D9_Target);
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <UpdatePWM+0x4c>)
 80007c8:	6819      	ldr	r1, [r3, #0]
 80007ca:	4f12      	ldr	r7, [pc, #72]	@ (8000814 <UpdatePWM+0x50>)
 80007cc:	4638      	mov	r0, r7
 80007ce:	f7ff ffcd 	bl	800076c <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D6, PWM_D6_Target);
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <UpdatePWM+0x54>)
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	4e11      	ldr	r6, [pc, #68]	@ (800081c <UpdatePWM+0x58>)
 80007d8:	4630      	mov	r0, r6
 80007da:	f7ff ffc7 	bl	800076c <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D5, PWM_D5_Target);
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <UpdatePWM+0x5c>)
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	4d10      	ldr	r5, [pc, #64]	@ (8000824 <UpdatePWM+0x60>)
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff ffc1 	bl	800076c <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D3, PWM_D3_Target);
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <UpdatePWM+0x64>)
 80007ec:	6819      	ldr	r1, [r3, #0]
 80007ee:	4c0f      	ldr	r4, [pc, #60]	@ (800082c <UpdatePWM+0x68>)
 80007f0:	4620      	mov	r0, r4
 80007f2:	f7ff ffbb 	bl	800076c <SoftStartPWM>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_D9);
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <UpdatePWM+0x6c>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	6393      	str	r3, [r2, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM_D6);
 80007fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <UpdatePWM+0x70>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6831      	ldr	r1, [r6, #0]
 8000804:	63d9      	str	r1, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_D5);
 8000806:	6829      	ldr	r1, [r5, #0]
 8000808:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_D3);
 800080a:	6822      	ldr	r2, [r4, #0]
 800080c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800080e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000810:	200001b4 	.word	0x200001b4
 8000814:	200001c4 	.word	0x200001c4
 8000818:	200001b0 	.word	0x200001b0
 800081c:	200001c0 	.word	0x200001c0
 8000820:	200001ac 	.word	0x200001ac
 8000824:	200001bc 	.word	0x200001bc
 8000828:	200001a8 	.word	0x200001a8
 800082c:	200001b8 	.word	0x200001b8
 8000830:	20000210 	.word	0x20000210
 8000834:	20000258 	.word	0x20000258

08000838 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000838:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	Debug_Send("Error_Handler\r\n");
 800083a:	4802      	ldr	r0, [pc, #8]	@ (8000844 <Error_Handler+0xc>)
 800083c:	f7ff fe80 	bl	8000540 <Debug_Send>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
	__disable_irq();
	while (1)
 8000842:	e7fe      	b.n	8000842 <Error_Handler+0xa>
 8000844:	08002f38 	.word	0x08002f38

08000848 <SystemClock_Config>:
{
 8000848:	b500      	push	{lr}
 800084a:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084c:	2234      	movs	r2, #52	@ 0x34
 800084e:	2100      	movs	r1, #0
 8000850:	a807      	add	r0, sp, #28
 8000852:	f002 fb38 	bl	8002ec6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000856:	2300      	movs	r3, #0
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	9304      	str	r3, [sp, #16]
 800085e:	9305      	str	r3, [sp, #20]
 8000860:	9306      	str	r3, [sp, #24]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	4a1f      	ldr	r2, [pc, #124]	@ (80008e4 <SystemClock_Config+0x9c>)
 8000866:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000868:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800086c:	6411      	str	r1, [r2, #64]	@ 0x40
 800086e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000870:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000874:	9200      	str	r2, [sp, #0]
 8000876:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	491b      	ldr	r1, [pc, #108]	@ (80008e8 <SystemClock_Config+0xa0>)
 800087c:	680a      	ldr	r2, [r1, #0]
 800087e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000882:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000886:	600a      	str	r2, [r1, #0]
 8000888:	680a      	ldr	r2, [r1, #0]
 800088a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800088e:	9201      	str	r2, [sp, #4]
 8000890:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000892:	2202      	movs	r2, #2
 8000894:	9207      	str	r2, [sp, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000896:	2101      	movs	r1, #1
 8000898:	910a      	str	r1, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089a:	2110      	movs	r1, #16
 800089c:	910b      	str	r1, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	920d      	str	r2, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a0:	930e      	str	r3, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80008a2:	910f      	str	r1, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80008a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008a8:	9310      	str	r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008aa:	2304      	movs	r3, #4
 80008ac:	9311      	str	r3, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ae:	9212      	str	r2, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80008b0:	9213      	str	r2, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	a807      	add	r0, sp, #28
 80008b4:	f001 fc94 	bl	80021e0 <HAL_RCC_OscConfig>
 80008b8:	b980      	cbnz	r0, 80008dc <SystemClock_Config+0x94>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2102      	movs	r1, #2
 80008c0:	9103      	str	r1, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008ca:	9205      	str	r2, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ce:	a802      	add	r0, sp, #8
 80008d0:	f001 faec 	bl	8001eac <HAL_RCC_ClockConfig>
 80008d4:	b920      	cbnz	r0, 80008e0 <SystemClock_Config+0x98>
}
 80008d6:	b015      	add	sp, #84	@ 0x54
 80008d8:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80008dc:	f7ff ffac 	bl	8000838 <Error_Handler>
		Error_Handler();
 80008e0:	f7ff ffaa 	bl	8000838 <Error_Handler>
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <main>:
{
 80008ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f0:	b08e      	sub	sp, #56	@ 0x38
	HAL_Init();
 80008f2:	f000 fbd3 	bl	800109c <HAL_Init>
	SystemClock_Config();
 80008f6:	f7ff ffa7 	bl	8000848 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	2400      	movs	r4, #0
 80008fc:	9407      	str	r4, [sp, #28]
 80008fe:	9408      	str	r4, [sp, #32]
 8000900:	9409      	str	r4, [sp, #36]	@ 0x24
 8000902:	940a      	str	r4, [sp, #40]	@ 0x28
 8000904:	940b      	str	r4, [sp, #44]	@ 0x2c
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	9401      	str	r4, [sp, #4]
 8000908:	4b93      	ldr	r3, [pc, #588]	@ (8000b58 <main+0x26c>)
 800090a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800090c:	f042 0204 	orr.w	r2, r2, #4
 8000910:	631a      	str	r2, [r3, #48]	@ 0x30
 8000912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000914:	f002 0204 	and.w	r2, r2, #4
 8000918:	9201      	str	r2, [sp, #4]
 800091a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800091c:	9402      	str	r4, [sp, #8]
 800091e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000920:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000924:	631a      	str	r2, [r3, #48]	@ 0x30
 8000926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000928:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800092c:	9202      	str	r2, [sp, #8]
 800092e:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	9403      	str	r4, [sp, #12]
 8000932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000934:	f042 0201 	orr.w	r2, r2, #1
 8000938:	631a      	str	r2, [r3, #48]	@ 0x30
 800093a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800093c:	f002 0201 	and.w	r2, r2, #1
 8000940:	9203      	str	r2, [sp, #12]
 8000942:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	9404      	str	r4, [sp, #16]
 8000946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000948:	f042 0202 	orr.w	r2, r2, #2
 800094c:	631a      	str	r2, [r3, #48]	@ 0x30
 800094e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	9304      	str	r3, [sp, #16]
 8000956:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000958:	4d80      	ldr	r5, [pc, #512]	@ (8000b5c <main+0x270>)
 800095a:	4622      	mov	r2, r4
 800095c:	2120      	movs	r1, #32
 800095e:	4628      	mov	r0, r5
 8000960:	f000 fd1a 	bl	8001398 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000968:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800096e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	9409      	str	r4, [sp, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000972:	a907      	add	r1, sp, #28
 8000974:	487a      	ldr	r0, [pc, #488]	@ (8000b60 <main+0x274>)
 8000976:	f000 fc19 	bl	80011ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	9409      	str	r4, [sp, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	940a      	str	r4, [sp, #40]	@ 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000986:	a907      	add	r1, sp, #28
 8000988:	4628      	mov	r0, r5
 800098a:	f000 fc0f 	bl	80011ac <HAL_GPIO_Init>
	huart2.Instance = USART2;
 800098e:	4875      	ldr	r0, [pc, #468]	@ (8000b64 <main+0x278>)
 8000990:	4b75      	ldr	r3, [pc, #468]	@ (8000b68 <main+0x27c>)
 8000992:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8000994:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000998:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	230c      	movs	r3, #12
 80009a2:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a4:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a6:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a8:	f002 f9f1 	bl	8002d8e <HAL_UART_Init>
 80009ac:	2800      	cmp	r0, #0
 80009ae:	f040 80a4 	bne.w	8000afa <main+0x20e>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b2:	2300      	movs	r3, #0
 80009b4:	9305      	str	r3, [sp, #20]
 80009b6:	9306      	str	r3, [sp, #24]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80009b8:	9307      	str	r3, [sp, #28]
 80009ba:	9308      	str	r3, [sp, #32]
 80009bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80009be:	930a      	str	r3, [sp, #40]	@ 0x28
 80009c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80009c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80009c4:	930d      	str	r3, [sp, #52]	@ 0x34
	htim2.Instance = TIM2;
 80009c6:	4869      	ldr	r0, [pc, #420]	@ (8000b6c <main+0x280>)
 80009c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009cc:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 83;
 80009ce:	2253      	movs	r2, #83	@ 0x53
 80009d0:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 19999;
 80009d4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009d8:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009da:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009de:	f001 ff49 	bl	8002874 <HAL_TIM_PWM_Init>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	f040 808b 	bne.w	8000afe <main+0x212>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	9305      	str	r3, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	9306      	str	r3, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ee:	a905      	add	r1, sp, #20
 80009f0:	485e      	ldr	r0, [pc, #376]	@ (8000b6c <main+0x280>)
 80009f2:	f002 f895 	bl	8002b20 <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	2800      	cmp	r0, #0
 80009f8:	f040 8083 	bne.w	8000b02 <main+0x216>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fc:	2360      	movs	r3, #96	@ 0x60
 80009fe:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	9308      	str	r3, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a04:	9309      	str	r3, [sp, #36]	@ 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	930b      	str	r3, [sp, #44]	@ 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	a907      	add	r1, sp, #28
 8000a0c:	4857      	ldr	r0, [pc, #348]	@ (8000b6c <main+0x280>)
 8000a0e:	f001 ff8f 	bl	8002930 <HAL_TIM_PWM_ConfigChannel>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d177      	bne.n	8000b06 <main+0x21a>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a16:	2208      	movs	r2, #8
 8000a18:	a907      	add	r1, sp, #28
 8000a1a:	4854      	ldr	r0, [pc, #336]	@ (8000b6c <main+0x280>)
 8000a1c:	f001 ff88 	bl	8002930 <HAL_TIM_PWM_ConfigChannel>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d172      	bne.n	8000b0a <main+0x21e>
	HAL_TIM_MspPostInit(&htim2);
 8000a24:	4851      	ldr	r0, [pc, #324]	@ (8000b6c <main+0x280>)
 8000a26:	f000 fa3f 	bl	8000ea8 <HAL_TIM_MspPostInit>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9305      	str	r3, [sp, #20]
 8000a2e:	9306      	str	r3, [sp, #24]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a30:	9307      	str	r3, [sp, #28]
 8000a32:	9308      	str	r3, [sp, #32]
 8000a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8000a3c:	930d      	str	r3, [sp, #52]	@ 0x34
	htim3.Instance = TIM3;
 8000a3e:	484c      	ldr	r0, [pc, #304]	@ (8000b70 <main+0x284>)
 8000a40:	4a4c      	ldr	r2, [pc, #304]	@ (8000b74 <main+0x288>)
 8000a42:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 83;
 8000a44:	2253      	movs	r2, #83	@ 0x53
 8000a46:	6042      	str	r2, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 19999;
 8000a4a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a4e:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a54:	f001 ff0e 	bl	8002874 <HAL_TIM_PWM_Init>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d158      	bne.n	8000b0e <main+0x222>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9305      	str	r3, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	9306      	str	r3, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a62:	a905      	add	r1, sp, #20
 8000a64:	4842      	ldr	r0, [pc, #264]	@ (8000b70 <main+0x284>)
 8000a66:	f002 f85b 	bl	8002b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d151      	bne.n	8000b12 <main+0x226>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	@ 0x60
 8000a70:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 8000a72:	2200      	movs	r2, #0
 8000a74:	9208      	str	r2, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	9209      	str	r2, [sp, #36]	@ 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a78:	920b      	str	r2, [sp, #44]	@ 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7a:	a907      	add	r1, sp, #28
 8000a7c:	483c      	ldr	r0, [pc, #240]	@ (8000b70 <main+0x284>)
 8000a7e:	f001 ff57 	bl	8002930 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	d147      	bne.n	8000b16 <main+0x22a>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a86:	2204      	movs	r2, #4
 8000a88:	a907      	add	r1, sp, #28
 8000a8a:	4839      	ldr	r0, [pc, #228]	@ (8000b70 <main+0x284>)
 8000a8c:	f001 ff50 	bl	8002930 <HAL_TIM_PWM_ConfigChannel>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d142      	bne.n	8000b1a <main+0x22e>
	HAL_TIM_MspPostInit(&htim3);
 8000a94:	4836      	ldr	r0, [pc, #216]	@ (8000b70 <main+0x284>)
 8000a96:	f000 fa07 	bl	8000ea8 <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 8000a9a:	4837      	ldr	r0, [pc, #220]	@ (8000b78 <main+0x28c>)
 8000a9c:	4b37      	ldr	r3, [pc, #220]	@ (8000b7c <main+0x290>)
 8000a9e:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000aa0:	4b37      	ldr	r3, [pc, #220]	@ (8000b80 <main+0x294>)
 8000aa2:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000aa8:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aae:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab4:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab8:	f000 fefa 	bl	80018b0 <HAL_I2C_Init>
 8000abc:	bb78      	cbnz	r0, 8000b1e <main+0x232>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000abe:	4c2b      	ldr	r4, [pc, #172]	@ (8000b6c <main+0x280>)
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f001 ffb2 	bl	8002a2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ac8:	2108      	movs	r1, #8
 8000aca:	4620      	mov	r0, r4
 8000acc:	f001 ffae 	bl	8002a2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ad0:	4c27      	ldr	r4, [pc, #156]	@ (8000b70 <main+0x284>)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	f001 ffa9 	bl	8002a2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ada:	2104      	movs	r1, #4
 8000adc:	4620      	mov	r0, r4
 8000ade:	f001 ffa5 	bl	8002a2c <HAL_TIM_PWM_Start>
	Debug_Send("System Init Complete\r\n");
 8000ae2:	4828      	ldr	r0, [pc, #160]	@ (8000b84 <main+0x298>)
 8000ae4:	f7ff fd2c 	bl	8000540 <Debug_Send>
	MPU6050_Init(&hi2c1);
 8000ae8:	4823      	ldr	r0, [pc, #140]	@ (8000b78 <main+0x28c>)
 8000aea:	f000 f851 	bl	8000b90 <MPU6050_Init>
	uint32_t lastBlink = 0;
 8000aee:	2600      	movs	r6, #0
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000af0:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 8000b5c <main+0x270>
		MPU6050_ReadAll(&hi2c1, &imu_data);
 8000af4:	4d24      	ldr	r5, [pc, #144]	@ (8000b88 <main+0x29c>)
 8000af6:	4f20      	ldr	r7, [pc, #128]	@ (8000b78 <main+0x28c>)
 8000af8:	e026      	b.n	8000b48 <main+0x25c>
		Error_Handler();
 8000afa:	f7ff fe9d 	bl	8000838 <Error_Handler>
		Error_Handler();
 8000afe:	f7ff fe9b 	bl	8000838 <Error_Handler>
		Error_Handler();
 8000b02:	f7ff fe99 	bl	8000838 <Error_Handler>
		Error_Handler();
 8000b06:	f7ff fe97 	bl	8000838 <Error_Handler>
		Error_Handler();
 8000b0a:	f7ff fe95 	bl	8000838 <Error_Handler>
		Error_Handler();
 8000b0e:	f7ff fe93 	bl	8000838 <Error_Handler>
		Error_Handler();
 8000b12:	f7ff fe91 	bl	8000838 <Error_Handler>
		Error_Handler();
 8000b16:	f7ff fe8f 	bl	8000838 <Error_Handler>
		Error_Handler();
 8000b1a:	f7ff fe8d 	bl	8000838 <Error_Handler>
		Error_Handler();
 8000b1e:	f7ff fe8b 	bl	8000838 <Error_Handler>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b22:	2120      	movs	r1, #32
 8000b24:	4640      	mov	r0, r8
 8000b26:	f000 fc3d 	bl	80013a4 <HAL_GPIO_TogglePin>
			lastBlink = now;
 8000b2a:	4626      	mov	r6, r4
		MPU6050_ReadAll(&hi2c1, &imu_data);
 8000b2c:	4629      	mov	r1, r5
 8000b2e:	4638      	mov	r0, r7
 8000b30:	f000 f891 	bl	8000c56 <MPU6050_ReadAll>
		MPU6050_ConvertToPhysical(&imu_data, &imu_phys);
 8000b34:	4c15      	ldr	r4, [pc, #84]	@ (8000b8c <main+0x2a0>)
 8000b36:	4621      	mov	r1, r4
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f000 f8d1 	bl	8000ce0 <MPU6050_ConvertToPhysical>
		IMU_UpdateAverage(&imu_phys);
 8000b3e:	4620      	mov	r0, r4
 8000b40:	f7ff fd0c 	bl	800055c <IMU_UpdateAverage>
		UpdatePWM(); // This runs as fast as possible
 8000b44:	f7ff fe3e 	bl	80007c4 <UpdatePWM>
		uint32_t now = HAL_GetTick();
 8000b48:	f000 face 	bl	80010e8 <HAL_GetTick>
 8000b4c:	4604      	mov	r4, r0
		if (now - lastBlink >= 500)
 8000b4e:	1b83      	subs	r3, r0, r6
 8000b50:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b54:	d2e5      	bcs.n	8000b22 <main+0x236>
 8000b56:	e7e9      	b.n	8000b2c <main+0x240>
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020800 	.word	0x40020800
 8000b64:	200001c8 	.word	0x200001c8
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	20000258 	.word	0x20000258
 8000b70:	20000210 	.word	0x20000210
 8000b74:	40000400 	.word	0x40000400
 8000b78:	200002a0 	.word	0x200002a0
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	000186a0 	.word	0x000186a0
 8000b84:	08002f48 	.word	0x08002f48
 8000b88:	20000198 	.word	0x20000198
 8000b8c:	2000017c 	.word	0x2000017c

08000b90 <MPU6050_Init>:
#define MPU6050_REG_ACCEL_XOUT_H 0x3B
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8000b90:	b510      	push	{r4, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	4604      	mov	r4, r0
	uint8_t data;

	/* Wake up the sensor */
	data = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	f10d 0217 	add.w	r2, sp, #23
 8000baa:	9200      	str	r2, [sp, #0]
 8000bac:	226b      	movs	r2, #107	@ 0x6b
 8000bae:	21d0      	movs	r1, #208	@ 0xd0
 8000bb0:	f000 ff40 	bl	8001a34 <HAL_I2C_Mem_Write>
 8000bb4:	b110      	cbz	r0, 8000bbc <MPU6050_Init+0x2c>
		return HAL_ERROR;
 8000bb6:	2001      	movs	r0, #1
	data = 0x08;
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
		return HAL_ERROR;

	return HAL_OK;
}
 8000bb8:	b006      	add	sp, #24
 8000bba:	bd10      	pop	{r4, pc}
	data = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	9302      	str	r3, [sp, #8]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	f10d 0217 	add.w	r2, sp, #23
 8000bd0:	9200      	str	r2, [sp, #0]
 8000bd2:	2219      	movs	r2, #25
 8000bd4:	21d0      	movs	r1, #208	@ 0xd0
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f000 ff2c 	bl	8001a34 <HAL_I2C_Mem_Write>
 8000bdc:	b108      	cbz	r0, 8000be2 <MPU6050_Init+0x52>
		return HAL_ERROR;
 8000bde:	2001      	movs	r0, #1
 8000be0:	e7ea      	b.n	8000bb8 <MPU6050_Init+0x28>
	data = 0x03;
 8000be2:	2303      	movs	r3, #3
 8000be4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	f10d 0217 	add.w	r2, sp, #23
 8000bf6:	9200      	str	r2, [sp, #0]
 8000bf8:	221a      	movs	r2, #26
 8000bfa:	21d0      	movs	r1, #208	@ 0xd0
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f000 ff19 	bl	8001a34 <HAL_I2C_Mem_Write>
 8000c02:	b108      	cbz	r0, 8000c08 <MPU6050_Init+0x78>
		return HAL_ERROR;
 8000c04:	2001      	movs	r0, #1
 8000c06:	e7d7      	b.n	8000bb8 <MPU6050_Init+0x28>
	data = 0x08;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	2301      	movs	r3, #1
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	f10d 0217 	add.w	r2, sp, #23
 8000c1c:	9200      	str	r2, [sp, #0]
 8000c1e:	221b      	movs	r2, #27
 8000c20:	21d0      	movs	r1, #208	@ 0xd0
 8000c22:	4620      	mov	r0, r4
 8000c24:	f000 ff06 	bl	8001a34 <HAL_I2C_Mem_Write>
 8000c28:	b108      	cbz	r0, 8000c2e <MPU6050_Init+0x9e>
		return HAL_ERROR;
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	e7c4      	b.n	8000bb8 <MPU6050_Init+0x28>
	data = 0x08;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	f10d 0217 	add.w	r2, sp, #23
 8000c42:	9200      	str	r2, [sp, #0]
 8000c44:	221c      	movs	r2, #28
 8000c46:	21d0      	movs	r1, #208	@ 0xd0
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f000 fef3 	bl	8001a34 <HAL_I2C_Mem_Write>
 8000c4e:	3800      	subs	r0, #0
 8000c50:	bf18      	it	ne
 8000c52:	2001      	movne	r0, #1
 8000c54:	e7b0      	b.n	8000bb8 <MPU6050_Init+0x28>

08000c56 <MPU6050_ReadAll>:

HAL_StatusTypeDef MPU6050_ReadAll(I2C_HandleTypeDef *hi2c, MPU6050_Data_t *data)
{
 8000c56:	b510      	push	{r4, lr}
 8000c58:	b088      	sub	sp, #32
 8000c5a:	460c      	mov	r4, r1
	uint8_t buf[14];
	if (HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_XOUT_H, 1, buf, sizeof(buf), HAL_MAX_DELAY) != HAL_OK)
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	9302      	str	r3, [sp, #8]
 8000c62:	230e      	movs	r3, #14
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	ab04      	add	r3, sp, #16
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	223b      	movs	r2, #59	@ 0x3b
 8000c6e:	21d0      	movs	r1, #208	@ 0xd0
 8000c70:	f000 ff96 	bl	8001ba0 <HAL_I2C_Mem_Read>
 8000c74:	bb90      	cbnz	r0, 8000cdc <MPU6050_ReadAll+0x86>
		return HAL_ERROR;

	data->accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 8000c76:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000c7a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8000c7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c82:	8023      	strh	r3, [r4, #0]
	data->accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 8000c84:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8000c88:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000c8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c90:	8063      	strh	r3, [r4, #2]
	data->accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 8000c92:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000c96:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000c9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c9e:	80a3      	strh	r3, [r4, #4]
	data->temp    = (int16_t)(buf[6] << 8 | buf[7]);
 8000ca0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8000ca4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000ca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000cac:	81a3      	strh	r3, [r4, #12]
	data->gyro_x  = (int16_t)(buf[8] << 8 | buf[9]);
 8000cae:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8000cb2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8000cb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000cba:	80e3      	strh	r3, [r4, #6]
	data->gyro_y  = (int16_t)(buf[10] << 8 | buf[11]);
 8000cbc:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8000cc0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8000cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000cc8:	8123      	strh	r3, [r4, #8]
	data->gyro_z  = (int16_t)(buf[12] << 8 | buf[13]);
 8000cca:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8000cce:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8000cd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000cd6:	8163      	strh	r3, [r4, #10]

	return HAL_OK;
}
 8000cd8:	b008      	add	sp, #32
 8000cda:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8000cdc:	2001      	movs	r0, #1
 8000cde:	e7fb      	b.n	8000cd8 <MPU6050_ReadAll+0x82>

08000ce0 <MPU6050_ConvertToPhysical>:
{
	const float accel_lsb = 8192.0f;   /* LSB/g for +-4g */
	const float gyro_lsb  = 65.5f;     /* LSB/(deg/s) for +-500dps */
	const float g = 9.80665f;          /* m/s^2 per g */

	out->accel_x = (raw->accel_x / accel_lsb) * g;
 8000ce0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cec:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000d94 <MPU6050_ConvertToPhysical+0xb4>
 8000cf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cf4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000d98 <MPU6050_ConvertToPhysical+0xb8>
 8000cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfc:	edc1 7a00 	vstr	s15, [r1]
	out->accel_y = (raw->accel_y / accel_lsb) * g;
 8000d00:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d14:	edc1 7a01 	vstr	s15, [r1, #4]
	out->accel_z = (raw->accel_z / accel_lsb) * g;
 8000d18:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2c:	edc1 7a02 	vstr	s15, [r1, #8]

	out->gyro_x  = raw->gyro_x / gyro_lsb;
 8000d30:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8000d34:	ee07 3a10 	vmov	s14, r3
 8000d38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000d3c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8000d9c <MPU6050_ConvertToPhysical+0xbc>
 8000d40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d44:	edc1 6a03 	vstr	s13, [r1, #12]
	out->gyro_y  = raw->gyro_y / gyro_lsb;
 8000d48:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8000d4c:	ee07 3a10 	vmov	s14, r3
 8000d50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000d54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d58:	edc1 6a04 	vstr	s13, [r1, #16]
	out->gyro_z  = raw->gyro_z / gyro_lsb;
 8000d5c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8000d60:	ee07 3a10 	vmov	s14, r3
 8000d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000d68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d6c:	edc1 6a05 	vstr	s13, [r1, #20]

	out->temp = (raw->temp / 340.0f) + 36.53f;
 8000d70:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8000d74:	ee07 3a10 	vmov	s14, r3
 8000d78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000d7c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000da0 <MPU6050_ConvertToPhysical+0xc0>
 8000d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d84:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000da4 <MPU6050_ConvertToPhysical+0xc4>
 8000d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d8c:	edc1 7a06 	vstr	s15, [r1, #24]
}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	39000000 	.word	0x39000000
 8000d98:	411ce80a 	.word	0x411ce80a
 8000d9c:	42830000 	.word	0x42830000
 8000da0:	43aa0000 	.word	0x43aa0000
 8000da4:	42121eb8 	.word	0x42121eb8

08000da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b500      	push	{lr}
 8000daa:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	2100      	movs	r1, #0
 8000dae:	9100      	str	r1, [sp, #0]
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_MspInit+0x3c>)
 8000db2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000db4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000db8:	645a      	str	r2, [r3, #68]	@ 0x44
 8000dba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000dbc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000dc0:	9200      	str	r2, [sp, #0]
 8000dc2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	9101      	str	r1, [sp, #4]
 8000dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dc8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000dcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd8:	2007      	movs	r0, #7
 8000dda:	f000 f98b 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	b003      	add	sp, #12
 8000de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de8:	b530      	push	{r4, r5, lr}
 8000dea:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	2300      	movs	r3, #0
 8000dee:	9303      	str	r3, [sp, #12]
 8000df0:	9304      	str	r3, [sp, #16]
 8000df2:	9305      	str	r3, [sp, #20]
 8000df4:	9306      	str	r3, [sp, #24]
 8000df6:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000df8:	6802      	ldr	r2, [r0, #0]
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_I2C_MspInit+0x64>)
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d001      	beq.n	8000e04 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e00:	b009      	add	sp, #36	@ 0x24
 8000e02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	2500      	movs	r5, #0
 8000e06:	9501      	str	r5, [sp, #4]
 8000e08:	4c11      	ldr	r4, [pc, #68]	@ (8000e50 <HAL_I2C_MspInit+0x68>)
 8000e0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e22:	2312      	movs	r3, #18
 8000e24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	a903      	add	r1, sp, #12
 8000e30:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <HAL_I2C_MspInit+0x6c>)
 8000e32:	f000 f9bb 	bl	80011ac <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e36:	9502      	str	r5, [sp, #8]
 8000e38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e3e:	6423      	str	r3, [r4, #64]	@ 0x40
 8000e40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e46:	9302      	str	r3, [sp, #8]
 8000e48:	9b02      	ldr	r3, [sp, #8]
}
 8000e4a:	e7d9      	b.n	8000e00 <HAL_I2C_MspInit+0x18>
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020400 	.word	0x40020400

08000e58 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e58:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8000e5a:	6803      	ldr	r3, [r0, #0]
 8000e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e60:	d004      	beq.n	8000e6c <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8000e62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea0 <HAL_TIM_PWM_MspInit+0x48>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00e      	beq.n	8000e86 <HAL_TIM_PWM_MspInit+0x2e>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e68:	b002      	add	sp, #8
 8000e6a:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <HAL_TIM_PWM_MspInit+0x4c>)
 8000e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e74:	f042 0201 	orr.w	r2, r2, #1
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	9b00      	ldr	r3, [sp, #0]
 8000e84:	e7f0      	b.n	8000e68 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_TIM_PWM_MspInit+0x4c>)
 8000e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e8e:	f042 0202 	orr.w	r2, r2, #2
 8000e92:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	9b01      	ldr	r3, [sp, #4]
}
 8000e9e:	e7e3      	b.n	8000e68 <HAL_TIM_PWM_MspInit+0x10>
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea8:	b530      	push	{r4, r5, lr}
 8000eaa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	2300      	movs	r3, #0
 8000eae:	9303      	str	r3, [sp, #12]
 8000eb0:	9304      	str	r3, [sp, #16]
 8000eb2:	9305      	str	r3, [sp, #20]
 8000eb4:	9306      	str	r3, [sp, #24]
 8000eb6:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 8000eb8:	6803      	ldr	r3, [r0, #0]
 8000eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ebe:	d004      	beq.n	8000eca <HAL_TIM_MspPostInit+0x22>

    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8000ec0:	4a23      	ldr	r2, [pc, #140]	@ (8000f50 <HAL_TIM_MspPostInit+0xa8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d019      	beq.n	8000efa <HAL_TIM_MspPostInit+0x52>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ec6:	b009      	add	sp, #36	@ 0x24
 8000ec8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <HAL_TIM_MspPostInit+0xac>)
 8000ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed2:	f042 0202 	orr.w	r2, r2, #2
 8000ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000ee2:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8000ee6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eec:	2301      	movs	r3, #1
 8000eee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	a903      	add	r1, sp, #12
 8000ef2:	4819      	ldr	r0, [pc, #100]	@ (8000f58 <HAL_TIM_MspPostInit+0xb0>)
 8000ef4:	f000 f95a 	bl	80011ac <HAL_GPIO_Init>
 8000ef8:	e7e5      	b.n	8000ec6 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2500      	movs	r5, #0
 8000efc:	9501      	str	r5, [sp, #4]
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_TIM_MspPostInit+0xac>)
 8000f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f02:	f042 0204 	orr.w	r2, r2, #4
 8000f06:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f0a:	f002 0204 	and.w	r2, r2, #4
 8000f0e:	9201      	str	r2, [sp, #4]
 8000f10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	9502      	str	r5, [sp, #8]
 8000f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f16:	f042 0202 	orr.w	r2, r2, #2
 8000f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f26:	2380      	movs	r3, #128	@ 0x80
 8000f28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2402      	movs	r4, #2
 8000f2c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f2e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	a903      	add	r1, sp, #12
 8000f32:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <HAL_TIM_MspPostInit+0xb4>)
 8000f34:	f000 f93a 	bl	80011ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f42:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	a903      	add	r1, sp, #12
 8000f46:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <HAL_TIM_MspPostInit+0xb0>)
 8000f48:	f000 f930 	bl	80011ac <HAL_GPIO_Init>
}
 8000f4c:	e7bb      	b.n	8000ec6 <HAL_TIM_MspPostInit+0x1e>
 8000f4e:	bf00      	nop
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40020800 	.word	0x40020800

08000f60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b500      	push	{lr}
 8000f62:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	2300      	movs	r3, #0
 8000f66:	9303      	str	r3, [sp, #12]
 8000f68:	9304      	str	r3, [sp, #16]
 8000f6a:	9305      	str	r3, [sp, #20]
 8000f6c:	9306      	str	r3, [sp, #24]
 8000f6e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000f70:	6802      	ldr	r2, [r0, #0]
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_UART_MspInit+0x68>)
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d002      	beq.n	8000f7e <HAL_UART_MspInit+0x1e>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f78:	b009      	add	sp, #36	@ 0x24
 8000f7a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7e:	2100      	movs	r1, #0
 8000f80:	9101      	str	r1, [sp, #4]
 8000f82:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8000f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f88:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f90:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000f94:	9201      	str	r2, [sp, #4]
 8000f96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	9102      	str	r1, [sp, #8]
 8000f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f9c:	f042 0201 	orr.w	r2, r2, #1
 8000fa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fac:	230c      	movs	r3, #12
 8000fae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	a903      	add	r1, sp, #12
 8000fbe:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <HAL_UART_MspInit+0x6c>)
 8000fc0:	f000 f8f4 	bl	80011ac <HAL_GPIO_Init>
}
 8000fc4:	e7d8      	b.n	8000f78 <HAL_UART_MspInit+0x18>
 8000fc6:	bf00      	nop
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler>

08000fd2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler>

08000fd4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler>

08000fd6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler>

08000fd8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <UsageFault_Handler>

08000fda <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f875 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bd08      	pop	{r3, pc}

08000fe8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4a03      	ldr	r2, [pc, #12]	@ (8000ff8 <SystemInit+0x10>)
 8000fea:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000fee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001034 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001000:	f7ff fff2 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800102a:	f001 ff55 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fc5d 	bl	80008ec <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001040:	08002f88 	.word	0x08002f88
  ldr r2, =_sbss
 8001044:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001048:	200002f8 	.word	0x200002f8

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b510      	push	{r4, lr}
 8001052:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_InitTick+0x40>)
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001060:	4a0c      	ldr	r2, [pc, #48]	@ (8001094 <HAL_InitTick+0x44>)
 8001062:	6810      	ldr	r0, [r2, #0]
 8001064:	fbb0 f0f3 	udiv	r0, r0, r3
 8001068:	f000 f88c 	bl	8001184 <HAL_SYSTICK_Config>
 800106c:	b968      	cbnz	r0, 800108a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	2c0f      	cmp	r4, #15
 8001070:	d901      	bls.n	8001076 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e00a      	b.n	800108c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001076:	2200      	movs	r2, #0
 8001078:	4621      	mov	r1, r4
 800107a:	f04f 30ff 	mov.w	r0, #4294967295
 800107e:	f000 f84b 	bl	8001118 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001082:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_InitTick+0x48>)
 8001084:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2000      	movs	r0, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
}
 800108c:	bd10      	pop	{r4, pc}
 800108e:	bf00      	nop
 8001090:	20000004 	.word	0x20000004
 8001094:	20000000 	.word	0x20000000
 8001098:	20000008 	.word	0x20000008

0800109c <HAL_Init>:
{
 800109c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <HAL_Init+0x30>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010a6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80010ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010b6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f81b 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ffc6 	bl	8001050 <HAL_InitTick>
  HAL_MspInit();
 80010c4:	f7ff fe70 	bl	8000da8 <HAL_MspInit>
}
 80010c8:	2000      	movs	r0, #0
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	40023c00 	.word	0x40023c00

080010d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010d0:	4a03      	ldr	r2, [pc, #12]	@ (80010e0 <HAL_IncTick+0x10>)
 80010d2:	6811      	ldr	r1, [r2, #0]
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <HAL_IncTick+0x14>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	440b      	add	r3, r1
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200002f4 	.word	0x200002f4
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010e8:	4b01      	ldr	r3, [pc, #4]	@ (80010f0 <HAL_GetTick+0x8>)
 80010ea:	6818      	ldr	r0, [r3, #0]
}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200002f4 	.word	0x200002f4

080010f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4907      	ldr	r1, [pc, #28]	@ (8001114 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010f6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	0203      	lsls	r3, r0, #8
 80010fa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001102:	0412      	lsls	r2, r2, #16
 8001104:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001110:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001118:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <HAL_NVIC_SetPriority+0x64>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001122:	f1c3 0c07 	rsb	ip, r3, #7
 8001126:	f1bc 0f04 	cmp.w	ip, #4
 800112a:	bf28      	it	cs
 800112c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001130:	f103 0e04 	add.w	lr, r3, #4
 8001134:	f1be 0f06 	cmp.w	lr, #6
 8001138:	bf8c      	ite	hi
 800113a:	3b03      	subhi	r3, #3
 800113c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113e:	f04f 3eff 	mov.w	lr, #4294967295
 8001142:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001146:	ea21 010c 	bic.w	r1, r1, ip
 800114a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	fa0e fe03 	lsl.w	lr, lr, r3
 8001150:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001156:	2800      	cmp	r0, #0
 8001158:	db09      	blt.n	800116e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	0109      	lsls	r1, r1, #4
 800115c:	b2c9      	uxtb	r1, r1
 800115e:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001162:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001166:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800116a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	f000 000f 	and.w	r0, r0, #15
 8001172:	0109      	lsls	r1, r1, #4
 8001174:	b2c9      	uxtb	r1, r1
 8001176:	4b02      	ldr	r3, [pc, #8]	@ (8001180 <HAL_NVIC_SetPriority+0x68>)
 8001178:	5419      	strb	r1, [r3, r0]
 800117a:	e7f6      	b.n	800116a <HAL_NVIC_SetPriority+0x52>
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	e000ed14 	.word	0xe000ed14

08001184 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	3801      	subs	r0, #1
 8001186:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800118a:	d20b      	bcs.n	80011a4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001190:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <HAL_SYSTICK_Config+0x24>)
 8001194:	21f0      	movs	r1, #240	@ 0xf0
 8001196:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119a:	2000      	movs	r0, #0
 800119c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	2207      	movs	r2, #7
 80011a0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011a4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b0:	b083      	sub	sp, #12
 80011b2:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b4:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b6:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ba:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c0:	4c72      	ldr	r4, [pc, #456]	@ (800138c <HAL_GPIO_Init+0x1e0>)
 80011c2:	e04b      	b.n	800125c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80011c4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c6:	fa05 fa02 	lsl.w	sl, r5, r2
 80011ca:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	68cf      	ldr	r7, [r1, #12]
 80011d0:	4097      	lsls	r7, r2
 80011d2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80011d6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011d8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011da:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011de:	684f      	ldr	r7, [r1, #4]
 80011e0:	f3c7 1700 	ubfx	r7, r7, #4, #1
 80011e4:	409f      	lsls	r7, r3
 80011e6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80011ea:	6047      	str	r7, [r0, #4]
 80011ec:	e044      	b.n	8001278 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	f04f 0c00 	mov.w	ip, #0
 80011f2:	fa0c fc0b 	lsl.w	ip, ip, fp
 80011f6:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fa:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 80011fe:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001200:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001204:	684e      	ldr	r6, [r1, #4]
 8001206:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 800120a:	bf0c      	ite	eq
 800120c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001210:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8001214:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001216:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	684e      	ldr	r6, [r1, #4]
 800121a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 800121e:	bf0c      	ite	eq
 8001220:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001224:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8001228:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 800122a:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122c:	684e      	ldr	r6, [r1, #4]
 800122e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001232:	bf0c      	ite	eq
 8001234:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001238:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 800123c:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001240:	684e      	ldr	r6, [r1, #4]
 8001242:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001246:	bf0c      	ite	eq
 8001248:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 800124c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8001250:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	3301      	adds	r3, #1
 8001254:	3202      	adds	r2, #2
 8001256:	2b10      	cmp	r3, #16
 8001258:	f000 8094 	beq.w	8001384 <HAL_GPIO_Init+0x1d8>
    ioposition = 0x01U << position;
 800125c:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001260:	680f      	ldr	r7, [r1, #0]
 8001262:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8001266:	ea3c 0707 	bics.w	r7, ip, r7
 800126a:	d1f2      	bne.n	8001252 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126c:	684f      	ldr	r7, [r1, #4]
 800126e:	f007 0703 	and.w	r7, r7, #3
 8001272:	3f01      	subs	r7, #1
 8001274:	2f01      	cmp	r7, #1
 8001276:	d9a5      	bls.n	80011c4 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001278:	684f      	ldr	r7, [r1, #4]
 800127a:	f007 0703 	and.w	r7, r7, #3
 800127e:	2f03      	cmp	r7, #3
 8001280:	d023      	beq.n	80012ca <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 8001282:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001284:	fa05 fc02 	lsl.w	ip, r5, r2
 8001288:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128c:	688f      	ldr	r7, [r1, #8]
 800128e:	4097      	lsls	r7, r2
 8001290:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8001294:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	684f      	ldr	r7, [r1, #4]
 8001298:	f007 0703 	and.w	r7, r7, #3
 800129c:	2f02      	cmp	r7, #2
 800129e:	d114      	bne.n	80012ca <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 80012a0:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80012a4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80012a8:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ac:	f003 0b07 	and.w	fp, r3, #7
 80012b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012b4:	fa08 fa0b 	lsl.w	sl, r8, fp
 80012b8:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012bc:	690f      	ldr	r7, [r1, #16]
 80012be:	fa07 f70b 	lsl.w	r7, r7, fp
 80012c2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 80012ca:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012cc:	fa05 fc02 	lsl.w	ip, r5, r2
 80012d0:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d4:	684f      	ldr	r7, [r1, #4]
 80012d6:	f007 0703 	and.w	r7, r7, #3
 80012da:	4097      	lsls	r7, r2
 80012dc:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 80012e0:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e2:	684f      	ldr	r7, [r1, #4]
 80012e4:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 80012e8:	d0b3      	beq.n	8001252 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2700      	movs	r7, #0
 80012ec:	9701      	str	r7, [sp, #4]
 80012ee:	4e28      	ldr	r6, [pc, #160]	@ (8001390 <HAL_GPIO_Init+0x1e4>)
 80012f0:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 80012f2:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 80012f6:	6477      	str	r7, [r6, #68]	@ 0x44
 80012f8:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 80012fa:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 80012fe:	9701      	str	r7, [sp, #4]
 8001300:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001302:	f023 0703 	bic.w	r7, r3, #3
 8001306:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800130a:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800130e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001312:	f003 0b03 	and.w	fp, r3, #3
 8001316:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800131a:	fa08 fc0b 	lsl.w	ip, r8, fp
 800131e:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001322:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 8001326:	42b0      	cmp	r0, r6
 8001328:	f43f af61 	beq.w	80011ee <HAL_GPIO_Init+0x42>
 800132c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001330:	42b0      	cmp	r0, r6
 8001332:	d018      	beq.n	8001366 <HAL_GPIO_Init+0x1ba>
 8001334:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001338:	42b0      	cmp	r0, r6
 800133a:	d017      	beq.n	800136c <HAL_GPIO_Init+0x1c0>
 800133c:	f8df c054 	ldr.w	ip, [pc, #84]	@ 8001394 <HAL_GPIO_Init+0x1e8>
 8001340:	4560      	cmp	r0, ip
 8001342:	d016      	beq.n	8001372 <HAL_GPIO_Init+0x1c6>
 8001344:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001348:	4560      	cmp	r0, ip
 800134a:	d015      	beq.n	8001378 <HAL_GPIO_Init+0x1cc>
 800134c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001350:	4560      	cmp	r0, ip
 8001352:	d014      	beq.n	800137e <HAL_GPIO_Init+0x1d2>
 8001354:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001358:	4560      	cmp	r0, ip
 800135a:	bf14      	ite	ne
 800135c:	f04f 0c07 	movne.w	ip, #7
 8001360:	f04f 0c06 	moveq.w	ip, #6
 8001364:	e745      	b.n	80011f2 <HAL_GPIO_Init+0x46>
 8001366:	f04f 0c01 	mov.w	ip, #1
 800136a:	e742      	b.n	80011f2 <HAL_GPIO_Init+0x46>
 800136c:	f04f 0c02 	mov.w	ip, #2
 8001370:	e73f      	b.n	80011f2 <HAL_GPIO_Init+0x46>
 8001372:	f04f 0c03 	mov.w	ip, #3
 8001376:	e73c      	b.n	80011f2 <HAL_GPIO_Init+0x46>
 8001378:	f04f 0c04 	mov.w	ip, #4
 800137c:	e739      	b.n	80011f2 <HAL_GPIO_Init+0x46>
 800137e:	f04f 0c05 	mov.w	ip, #5
 8001382:	e736      	b.n	80011f2 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001384:	b003      	add	sp, #12
 8001386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800138a:	bf00      	nop
 800138c:	40013c00 	.word	0x40013c00
 8001390:	40023800 	.word	0x40023800
 8001394:	40020c00 	.word	0x40020c00

08001398 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	b10a      	cbz	r2, 800139e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	6181      	str	r1, [r0, #24]
 800139c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800139e:	0409      	lsls	r1, r1, #16
 80013a0:	6181      	str	r1, [r0, #24]
  }
}
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a6:	ea01 0203 	and.w	r2, r1, r3
 80013aa:	ea21 0103 	bic.w	r1, r1, r3
 80013ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80013b2:	6181      	str	r1, [r0, #24]
}
 80013b4:	4770      	bx	lr

080013b6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013b6:	6803      	ldr	r3, [r0, #0]
 80013b8:	695a      	ldr	r2, [r3, #20]
 80013ba:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80013be:	d101      	bne.n	80013c4 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80013c0:	2000      	movs	r0, #0
}
 80013c2:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80013c8:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80013ce:	2220      	movs	r2, #32
 80013d0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013d4:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013d8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80013da:	f042 0204 	orr.w	r2, r2, #4
 80013de:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80013e0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
 80013e6:	4770      	bx	lr

080013e8 <I2C_WaitOnFlagUntilTimeout>:
{
 80013e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ec:	4605      	mov	r5, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	4616      	mov	r6, r2
 80013f2:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013f4:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80013f8:	f1b8 0f01 	cmp.w	r8, #1
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	bf0c      	ite	eq
 8001400:	695b      	ldreq	r3, [r3, #20]
 8001402:	699b      	ldrne	r3, [r3, #24]
 8001404:	ea24 0c03 	bic.w	ip, r4, r3
 8001408:	fa1f fc8c 	uxth.w	ip, ip
 800140c:	fabc fc8c 	clz	ip, ip
 8001410:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001414:	4566      	cmp	r6, ip
 8001416:	d127      	bne.n	8001468 <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 8001418:	f1b7 3fff 	cmp.w	r7, #4294967295
 800141c:	d0ec      	beq.n	80013f8 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800141e:	f7ff fe63 	bl	80010e8 <HAL_GetTick>
 8001422:	9b06      	ldr	r3, [sp, #24]
 8001424:	1ac0      	subs	r0, r0, r3
 8001426:	42b8      	cmp	r0, r7
 8001428:	d801      	bhi.n	800142e <I2C_WaitOnFlagUntilTimeout+0x46>
 800142a:	2f00      	cmp	r7, #0
 800142c:	d1e4      	bne.n	80013f8 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800142e:	f1b8 0f01 	cmp.w	r8, #1
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	bf0c      	ite	eq
 8001436:	695b      	ldreq	r3, [r3, #20]
 8001438:	699b      	ldrne	r3, [r3, #24]
 800143a:	ea24 0303 	bic.w	r3, r4, r3
 800143e:	b29b      	uxth	r3, r3
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	429e      	cmp	r6, r3
 8001448:	d1d6      	bne.n	80013f8 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800144a:	2300      	movs	r3, #0
 800144c:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800144e:	2220      	movs	r2, #32
 8001450:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001454:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001458:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800145a:	f042 0220 	orr.w	r2, r2, #32
 800145e:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001460:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
 8001466:	e000      	b.n	800146a <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8001468:	2000      	movs	r0, #0
}
 800146a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800146e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800146e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001472:	4605      	mov	r5, r0
 8001474:	460e      	mov	r6, r1
 8001476:	4617      	mov	r7, r2
 8001478:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800147a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800147e:	f1b8 0f01 	cmp.w	r8, #1
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	bf0c      	ite	eq
 8001486:	695c      	ldreq	r4, [r3, #20]
 8001488:	699c      	ldrne	r4, [r3, #24]
 800148a:	ea26 0404 	bic.w	r4, r6, r4
 800148e:	b2a4      	uxth	r4, r4
 8001490:	3c00      	subs	r4, #0
 8001492:	bf18      	it	ne
 8001494:	2401      	movne	r4, #1
 8001496:	2c00      	cmp	r4, #0
 8001498:	d044      	beq.n	8001524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80014a2:	d127      	bne.n	80014f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 80014a4:	f1b7 3fff 	cmp.w	r7, #4294967295
 80014a8:	d0e9      	beq.n	800147e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014aa:	f7ff fe1d 	bl	80010e8 <HAL_GetTick>
 80014ae:	eba0 0009 	sub.w	r0, r0, r9
 80014b2:	42b8      	cmp	r0, r7
 80014b4:	d801      	bhi.n	80014ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 80014b6:	2f00      	cmp	r7, #0
 80014b8:	d1e1      	bne.n	800147e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80014ba:	f1b8 0f01 	cmp.w	r8, #1
 80014be:	682b      	ldr	r3, [r5, #0]
 80014c0:	bf0c      	ite	eq
 80014c2:	695b      	ldreq	r3, [r3, #20]
 80014c4:	699b      	ldrne	r3, [r3, #24]
 80014c6:	ea26 0303 	bic.w	r3, r6, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3b00      	subs	r3, #0
 80014ce:	bf18      	it	ne
 80014d0:	2301      	movne	r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0d3      	beq.n	800147e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80014da:	2220      	movs	r2, #32
 80014dc:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014e0:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014e4:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80014e6:	f042 0220 	orr.w	r2, r2, #32
 80014ea:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80014ec:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80014f0:	2001      	movs	r0, #1
 80014f2:	e015      	b.n	8001520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014fa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001502:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001508:	2220      	movs	r2, #32
 800150a:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800150e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001512:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001514:	f042 0204 	orr.w	r2, r2, #4
 8001518:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800151a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 800151e:	2001      	movs	r0, #1
}
 8001520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8001524:	2000      	movs	r0, #0
 8001526:	e7fb      	b.n	8001520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08001528 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001528:	b570      	push	{r4, r5, r6, lr}
 800152a:	4604      	mov	r4, r0
 800152c:	460d      	mov	r5, r1
 800152e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001538:	d121      	bne.n	800157e <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff ff3b 	bl	80013b6 <I2C_IsAcknowledgeFailed>
 8001540:	b9f8      	cbnz	r0, 8001582 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001542:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001546:	d0f3      	beq.n	8001530 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001548:	f7ff fdce 	bl	80010e8 <HAL_GetTick>
 800154c:	1b80      	subs	r0, r0, r6
 800154e:	42a8      	cmp	r0, r5
 8001550:	d801      	bhi.n	8001556 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001552:	2d00      	cmp	r5, #0
 8001554:	d1ec      	bne.n	8001530 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800155e:	d1e7      	bne.n	8001530 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001560:	2300      	movs	r3, #0
 8001562:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001564:	2220      	movs	r2, #32
 8001566:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800156a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800156e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001570:	f042 0220 	orr.w	r2, r2, #32
 8001574:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001576:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800157a:	2001      	movs	r0, #1
 800157c:	e000      	b.n	8001580 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 800157e:	2000      	movs	r0, #0
}
 8001580:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001582:	2001      	movs	r0, #1
 8001584:	e7fc      	b.n	8001580 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

08001588 <I2C_RequestMemoryWrite>:
{
 8001588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800158c:	b085      	sub	sp, #20
 800158e:	4604      	mov	r4, r0
 8001590:	460d      	mov	r5, r1
 8001592:	4691      	mov	r9, r2
 8001594:	461f      	mov	r7, r3
 8001596:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800159a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800159c:	6803      	ldr	r3, [r0, #0]
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80015a4:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015a6:	9600      	str	r6, [sp, #0]
 80015a8:	4643      	mov	r3, r8
 80015aa:	2200      	movs	r2, #0
 80015ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80015b0:	f7ff ff1a 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 80015b4:	b970      	cbnz	r0, 80015d4 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80015bc:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015be:	4633      	mov	r3, r6
 80015c0:	4642      	mov	r2, r8
 80015c2:	4928      	ldr	r1, [pc, #160]	@ (8001664 <I2C_RequestMemoryWrite+0xdc>)
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff ff52 	bl	800146e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015ca:	b168      	cbz	r0, 80015e8 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80015cc:	2001      	movs	r0, #1
}
 80015ce:	b005      	add	sp, #20
 80015d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015dc:	d040      	beq.n	8001660 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015e2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80015e4:	2003      	movs	r0, #3
 80015e6:	e7f2      	b.n	80015ce <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e8:	2300      	movs	r3, #0
 80015ea:	9303      	str	r3, [sp, #12]
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	9203      	str	r2, [sp, #12]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	9303      	str	r3, [sp, #12]
 80015f6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015f8:	4632      	mov	r2, r6
 80015fa:	4641      	mov	r1, r8
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7ff ff93 	bl	8001528 <I2C_WaitOnTXEFlagUntilTimeout>
 8001602:	b930      	cbnz	r0, 8001612 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001604:	2f01      	cmp	r7, #1
 8001606:	d110      	bne.n	800162a <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	fa5f f689 	uxtb.w	r6, r9
 800160e:	611e      	str	r6, [r3, #16]
 8001610:	e7dd      	b.n	80015ce <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001612:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001614:	2b04      	cmp	r3, #4
 8001616:	d001      	beq.n	800161c <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
 800161a:	e7d8      	b.n	80015ce <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001624:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8001626:	2001      	movs	r0, #1
 8001628:	e7d1      	b.n	80015ce <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001630:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001632:	4632      	mov	r2, r6
 8001634:	4641      	mov	r1, r8
 8001636:	4620      	mov	r0, r4
 8001638:	f7ff ff76 	bl	8001528 <I2C_WaitOnTXEFlagUntilTimeout>
 800163c:	b920      	cbnz	r0, 8001648 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	fa5f f689 	uxtb.w	r6, r9
 8001644:	611e      	str	r6, [r3, #16]
 8001646:	e7c2      	b.n	80015ce <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001648:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800164a:	2b04      	cmp	r3, #4
 800164c:	d001      	beq.n	8001652 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e7bd      	b.n	80015ce <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800165a:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800165c:	2001      	movs	r0, #1
 800165e:	e7b6      	b.n	80015ce <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8001660:	2003      	movs	r0, #3
 8001662:	e7b4      	b.n	80015ce <I2C_RequestMemoryWrite+0x46>
 8001664:	00010002 	.word	0x00010002

08001668 <I2C_RequestMemoryRead>:
{
 8001668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	4604      	mov	r4, r0
 8001670:	460d      	mov	r5, r1
 8001672:	4616      	mov	r6, r2
 8001674:	4699      	mov	r9, r3
 8001676:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8001678:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800167c:	6802      	ldr	r2, [r0, #0]
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001684:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001686:	6803      	ldr	r3, [r0, #0]
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800168e:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001690:	f8cd 8000 	str.w	r8, [sp]
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800169c:	f7ff fea4 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 80016a0:	b980      	cbnz	r0, 80016c4 <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016a2:	fa5f fa85 	uxtb.w	sl, r5
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80016ac:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016ae:	4643      	mov	r3, r8
 80016b0:	463a      	mov	r2, r7
 80016b2:	4945      	ldr	r1, [pc, #276]	@ (80017c8 <I2C_RequestMemoryRead+0x160>)
 80016b4:	4620      	mov	r0, r4
 80016b6:	f7ff feda 	bl	800146e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016ba:	b168      	cbz	r0, 80016d8 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
}
 80016be:	b004      	add	sp, #16
 80016c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80016cc:	d077      	beq.n	80017be <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80016d4:	2003      	movs	r0, #3
 80016d6:	e7f2      	b.n	80016be <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016d8:	2300      	movs	r3, #0
 80016da:	9303      	str	r3, [sp, #12]
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	9203      	str	r2, [sp, #12]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	9303      	str	r3, [sp, #12]
 80016e6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e8:	4642      	mov	r2, r8
 80016ea:	4639      	mov	r1, r7
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff ff1b 	bl	8001528 <I2C_WaitOnTXEFlagUntilTimeout>
 80016f2:	b988      	cbnz	r0, 8001718 <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016f4:	f1b9 0f01 	cmp.w	r9, #1
 80016f8:	d11a      	bne.n	8001730 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	b2f6      	uxtb	r6, r6
 80016fe:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001700:	4642      	mov	r2, r8
 8001702:	4639      	mov	r1, r7
 8001704:	4620      	mov	r0, r4
 8001706:	f7ff ff0f 	bl	8001528 <I2C_WaitOnTXEFlagUntilTimeout>
 800170a:	2800      	cmp	r0, #0
 800170c:	d030      	beq.n	8001770 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800170e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001710:	2b04      	cmp	r3, #4
 8001712:	d026      	beq.n	8001762 <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 8001714:	2001      	movs	r0, #1
 8001716:	e7d2      	b.n	80016be <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001718:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800171a:	2b04      	cmp	r3, #4
 800171c:	d001      	beq.n	8001722 <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 800171e:	2001      	movs	r0, #1
 8001720:	e7cd      	b.n	80016be <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001722:	6822      	ldr	r2, [r4, #0]
 8001724:	6813      	ldr	r3, [r2, #0]
 8001726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800172c:	2001      	movs	r0, #1
 800172e:	e7c6      	b.n	80016be <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	0a32      	lsrs	r2, r6, #8
 8001734:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001736:	4642      	mov	r2, r8
 8001738:	4639      	mov	r1, r7
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff fef4 	bl	8001528 <I2C_WaitOnTXEFlagUntilTimeout>
 8001740:	b918      	cbnz	r0, 800174a <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	b2f6      	uxtb	r6, r6
 8001746:	611e      	str	r6, [r3, #16]
 8001748:	e7da      	b.n	8001700 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800174a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800174c:	2b04      	cmp	r3, #4
 800174e:	d001      	beq.n	8001754 <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 8001750:	2001      	movs	r0, #1
 8001752:	e7b4      	b.n	80016be <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800175e:	2001      	movs	r0, #1
 8001760:	e7ad      	b.n	80016be <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001762:	6822      	ldr	r2, [r4, #0]
 8001764:	6813      	ldr	r3, [r2, #0]
 8001766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800176c:	2001      	movs	r0, #1
 800176e:	e7a6      	b.n	80016be <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001770:	6822      	ldr	r2, [r4, #0]
 8001772:	6813      	ldr	r3, [r2, #0]
 8001774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001778:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800177a:	f8cd 8000 	str.w	r8, [sp]
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001786:	4620      	mov	r0, r4
 8001788:	f7ff fe2e 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 800178c:	b968      	cbnz	r0, 80017aa <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800178e:	6822      	ldr	r2, [r4, #0]
 8001790:	f04a 0301 	orr.w	r3, sl, #1
 8001794:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001796:	4643      	mov	r3, r8
 8001798:	463a      	mov	r2, r7
 800179a:	490b      	ldr	r1, [pc, #44]	@ (80017c8 <I2C_RequestMemoryRead+0x160>)
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff fe66 	bl	800146e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017a2:	3800      	subs	r0, #0
 80017a4:	bf18      	it	ne
 80017a6:	2001      	movne	r0, #1
 80017a8:	e789      	b.n	80016be <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80017b2:	d006      	beq.n	80017c2 <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b8:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80017ba:	2003      	movs	r0, #3
 80017bc:	e77f      	b.n	80016be <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 80017be:	2003      	movs	r0, #3
 80017c0:	e77d      	b.n	80016be <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 80017c2:	2003      	movs	r0, #3
 80017c4:	e77b      	b.n	80016be <I2C_RequestMemoryRead+0x56>
 80017c6:	bf00      	nop
 80017c8:	00010002 	.word	0x00010002

080017cc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80017cc:	b570      	push	{r4, r5, r6, lr}
 80017ce:	4604      	mov	r4, r0
 80017d0:	460d      	mov	r5, r1
 80017d2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f013 0f04 	tst.w	r3, #4
 80017dc:	d121      	bne.n	8001822 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff fde9 	bl	80013b6 <I2C_IsAcknowledgeFailed>
 80017e4:	b9f8      	cbnz	r0, 8001826 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80017e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80017ea:	d0f3      	beq.n	80017d4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ec:	f7ff fc7c 	bl	80010e8 <HAL_GetTick>
 80017f0:	1b80      	subs	r0, r0, r6
 80017f2:	42a8      	cmp	r0, r5
 80017f4:	d801      	bhi.n	80017fa <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80017f6:	2d00      	cmp	r5, #0
 80017f8:	d1ec      	bne.n	80017d4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f013 0f04 	tst.w	r3, #4
 8001802:	d1e7      	bne.n	80017d4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001808:	2220      	movs	r2, #32
 800180a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800180e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001812:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001814:	f042 0220 	orr.w	r2, r2, #32
 8001818:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800181a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800181e:	2001      	movs	r0, #1
 8001820:	e000      	b.n	8001824 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8001822:	2000      	movs	r0, #0
}
 8001824:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001826:	2001      	movs	r0, #1
 8001828:	e7fc      	b.n	8001824 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0800182a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800182a:	b570      	push	{r4, r5, r6, lr}
 800182c:	4604      	mov	r4, r0
 800182e:	460d      	mov	r5, r1
 8001830:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001832:	6803      	ldr	r3, [r0, #0]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800183a:	d01b      	beq.n	8001874 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  return HAL_OK;
 800183c:	2000      	movs	r0, #0
 800183e:	e00e      	b.n	800185e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001840:	f06f 0210 	mvn.w	r2, #16
 8001844:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001846:	2300      	movs	r3, #0
 8001848:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800184a:	2220      	movs	r2, #32
 800184c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001850:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001854:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001856:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001858:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800185c:	2001      	movs	r0, #1
}
 800185e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001868:	d010      	beq.n	800188c <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	6958      	ldr	r0, [r3, #20]
 800186e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8001872:	d11a      	bne.n	80018aa <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001874:	6958      	ldr	r0, [r3, #20]
 8001876:	f010 0f10 	tst.w	r0, #16
 800187a:	d1e1      	bne.n	8001840 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187c:	f7ff fc34 	bl	80010e8 <HAL_GetTick>
 8001880:	1b80      	subs	r0, r0, r6
 8001882:	42a8      	cmp	r0, r5
 8001884:	d8ec      	bhi.n	8001860 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 8001886:	2d00      	cmp	r5, #0
 8001888:	d1ef      	bne.n	800186a <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 800188a:	e7e9      	b.n	8001860 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001890:	2220      	movs	r2, #32
 8001892:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001896:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800189a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800189c:	f042 0220 	orr.w	r2, r2, #32
 80018a0:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80018a2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
 80018a8:	e7d9      	b.n	800185e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
  return HAL_OK;
 80018aa:	2000      	movs	r0, #0
 80018ac:	e7d7      	b.n	800185e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
	...

080018b0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80018b0:	2800      	cmp	r0, #0
 80018b2:	f000 80b0 	beq.w	8001a16 <HAL_I2C_Init+0x166>
{
 80018b6:	b570      	push	{r4, r5, r6, lr}
 80018b8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d073      	beq.n	80019aa <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c2:	2324      	movs	r3, #36	@ 0x24
 80018c4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	6813      	ldr	r3, [r2, #0]
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018d2:	6822      	ldr	r2, [r4, #0]
 80018d4:	6813      	ldr	r3, [r2, #0]
 80018d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018da:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	6813      	ldr	r3, [r2, #0]
 80018e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80018e4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e6:	f000 fb93 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ea:	6862      	ldr	r2, [r4, #4]
 80018ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001a20 <HAL_I2C_Init+0x170>)
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d860      	bhi.n	80019b4 <HAL_I2C_Init+0x104>
 80018f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a24 <HAL_I2C_Init+0x174>)
 80018f4:	4298      	cmp	r0, r3
 80018f6:	f240 8090 	bls.w	8001a1a <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 80018fa:	494b      	ldr	r1, [pc, #300]	@ (8001a28 <HAL_I2C_Init+0x178>)
 80018fc:	fba1 3100 	umull	r3, r1, r1, r0
 8001900:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001902:	6825      	ldr	r5, [r4, #0]
 8001904:	686a      	ldr	r2, [r5, #4]
 8001906:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800190a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800190e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001910:	6821      	ldr	r1, [r4, #0]
 8001912:	6a0a      	ldr	r2, [r1, #32]
 8001914:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001918:	4d41      	ldr	r5, [pc, #260]	@ (8001a20 <HAL_I2C_Init+0x170>)
 800191a:	6866      	ldr	r6, [r4, #4]
 800191c:	42ae      	cmp	r6, r5
 800191e:	d84e      	bhi.n	80019be <HAL_I2C_Init+0x10e>
 8001920:	3301      	adds	r3, #1
 8001922:	4313      	orrs	r3, r2
 8001924:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001926:	6821      	ldr	r1, [r4, #0]
 8001928:	69ca      	ldr	r2, [r1, #28]
 800192a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800192e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001932:	6865      	ldr	r5, [r4, #4]
 8001934:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <HAL_I2C_Init+0x170>)
 8001936:	429d      	cmp	r5, r3
 8001938:	d84b      	bhi.n	80019d2 <HAL_I2C_Init+0x122>
 800193a:	1e43      	subs	r3, r0, #1
 800193c:	006d      	lsls	r5, r5, #1
 800193e:	fbb3 f3f5 	udiv	r3, r3, r5
 8001942:	3301      	adds	r3, #1
 8001944:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001948:	4203      	tst	r3, r0
 800194a:	d05e      	beq.n	8001a0a <HAL_I2C_Init+0x15a>
 800194c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001950:	431a      	orrs	r2, r3
 8001952:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001954:	6821      	ldr	r1, [r4, #0]
 8001956:	680a      	ldr	r2, [r1, #0]
 8001958:	69e3      	ldr	r3, [r4, #28]
 800195a:	6a20      	ldr	r0, [r4, #32]
 800195c:	4303      	orrs	r3, r0
 800195e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001966:	6821      	ldr	r1, [r4, #0]
 8001968:	688a      	ldr	r2, [r1, #8]
 800196a:	6923      	ldr	r3, [r4, #16]
 800196c:	68e0      	ldr	r0, [r4, #12]
 800196e:	4303      	orrs	r3, r0
 8001970:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8001974:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800197c:	6821      	ldr	r1, [r4, #0]
 800197e:	68ca      	ldr	r2, [r1, #12]
 8001980:	6963      	ldr	r3, [r4, #20]
 8001982:	69a0      	ldr	r0, [r4, #24]
 8001984:	4303      	orrs	r3, r0
 8001986:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800198a:	4313      	orrs	r3, r2
 800198c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800198e:	6822      	ldr	r2, [r4, #0]
 8001990:	6813      	ldr	r3, [r2, #0]
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001998:	2000      	movs	r0, #0
 800199a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800199c:	2320      	movs	r3, #32
 800199e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80019aa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80019ae:	f7ff fa1b 	bl	8000de8 <HAL_I2C_MspInit>
 80019b2:	e786      	b.n	80018c2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <HAL_I2C_Init+0x17c>)
 80019b6:	4298      	cmp	r0, r3
 80019b8:	d89f      	bhi.n	80018fa <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80019ba:	2001      	movs	r0, #1
 80019bc:	e7f4      	b.n	80019a8 <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019be:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80019c2:	fb05 f303 	mul.w	r3, r5, r3
 80019c6:	4d1a      	ldr	r5, [pc, #104]	@ (8001a30 <HAL_I2C_Init+0x180>)
 80019c8:	fba5 5303 	umull	r5, r3, r5, r3
 80019cc:	099b      	lsrs	r3, r3, #6
 80019ce:	3301      	adds	r3, #1
 80019d0:	e7a7      	b.n	8001922 <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019d2:	68a3      	ldr	r3, [r4, #8]
 80019d4:	b95b      	cbnz	r3, 80019ee <HAL_I2C_Init+0x13e>
 80019d6:	1e43      	subs	r3, r0, #1
 80019d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019dc:	fbb3 f3f5 	udiv	r3, r3, r5
 80019e0:	3301      	adds	r3, #1
 80019e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e6:	b193      	cbz	r3, 8001a0e <HAL_I2C_Init+0x15e>
 80019e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ec:	e7b0      	b.n	8001950 <HAL_I2C_Init+0xa0>
 80019ee:	1e43      	subs	r3, r0, #1
 80019f0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80019f4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80019f8:	fbb3 f3f5 	udiv	r3, r3, r5
 80019fc:	3301      	adds	r3, #1
 80019fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a02:	b133      	cbz	r3, 8001a12 <HAL_I2C_Init+0x162>
 8001a04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a08:	e7a2      	b.n	8001950 <HAL_I2C_Init+0xa0>
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	e7a0      	b.n	8001950 <HAL_I2C_Init+0xa0>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e79e      	b.n	8001950 <HAL_I2C_Init+0xa0>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e79c      	b.n	8001950 <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 8001a16:	2001      	movs	r0, #1
}
 8001a18:	4770      	bx	lr
    return HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	e7c4      	b.n	80019a8 <HAL_I2C_Init+0xf8>
 8001a1e:	bf00      	nop
 8001a20:	000186a0 	.word	0x000186a0
 8001a24:	001e847f 	.word	0x001e847f
 8001a28:	431bde83 	.word	0x431bde83
 8001a2c:	003d08ff 	.word	0x003d08ff
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_I2C_Mem_Write>:
{
 8001a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	460f      	mov	r7, r1
 8001a3e:	4690      	mov	r8, r2
 8001a40:	4699      	mov	r9, r3
 8001a42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff fb50 	bl	80010e8 <HAL_GetTick>
 8001a48:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8001a4e:	b2c0      	uxtb	r0, r0
 8001a50:	2820      	cmp	r0, #32
 8001a52:	d003      	beq.n	8001a5c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001a54:	2002      	movs	r0, #2
}
 8001a56:	b003      	add	sp, #12
 8001a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a5c:	9500      	str	r5, [sp, #0]
 8001a5e:	2319      	movs	r3, #25
 8001a60:	2201      	movs	r2, #1
 8001a62:	494d      	ldr	r1, [pc, #308]	@ (8001b98 <HAL_I2C_Mem_Write+0x164>)
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff fcbf 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	f040 808d 	bne.w	8001b8a <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8001a70:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	f000 808a 	beq.w	8001b8e <HAL_I2C_Mem_Write+0x15a>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	f012 0f01 	tst.w	r2, #1
 8001a88:	d103      	bne.n	8001a92 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a92:	6822      	ldr	r2, [r4, #0]
 8001a94:	6813      	ldr	r3, [r2, #0]
 8001a96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001a9a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a9c:	2321      	movs	r3, #33	@ 0x21
 8001a9e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001aa2:	2340      	movs	r3, #64	@ 0x40
 8001aa4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001aae:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ab0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8001ab4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ab6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001ab8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aba:	4b38      	ldr	r3, [pc, #224]	@ (8001b9c <HAL_I2C_Mem_Write+0x168>)
 8001abc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001abe:	9501      	str	r5, [sp, #4]
 8001ac0:	9600      	str	r6, [sp, #0]
 8001ac2:	464b      	mov	r3, r9
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	4639      	mov	r1, r7
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff fd5d 	bl	8001588 <I2C_RequestMemoryWrite>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d15f      	bne.n	8001b92 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8001ad2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001ad4:	b9d3      	cbnz	r3, 8001b0c <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad6:	462a      	mov	r2, r5
 8001ad8:	4631      	mov	r1, r6
 8001ada:	4620      	mov	r0, r4
 8001adc:	f7ff fe76 	bl	80017cc <I2C_WaitOnBTFFlagUntilTimeout>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d044      	beq.n	8001b6e <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d03a      	beq.n	8001b60 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
 8001aec:	e7b3      	b.n	8001a56 <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8001af4:	2001      	movs	r0, #1
 8001af6:	e7ae      	b.n	8001a56 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	6813      	ldr	r3, [r2, #0]
 8001afc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b00:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8001b02:	2001      	movs	r0, #1
 8001b04:	e7a7      	b.n	8001a56 <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 8001b06:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0e4      	beq.n	8001ad6 <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0c:	462a      	mov	r2, r5
 8001b0e:	4631      	mov	r1, r6
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff fd09 	bl	8001528 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d1e9      	bne.n	8001aee <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001b22:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001b24:	1c43      	adds	r3, r0, #1
 8001b26:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8001b28:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001b30:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8001b32:	3901      	subs	r1, #1
 8001b34:	b289      	uxth	r1, r1
 8001b36:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b38:	6822      	ldr	r2, [r4, #0]
 8001b3a:	6951      	ldr	r1, [r2, #20]
 8001b3c:	f011 0f04 	tst.w	r1, #4
 8001b40:	d0e1      	beq.n	8001b06 <HAL_I2C_Mem_Write+0xd2>
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0c7      	beq.n	8001ad6 <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b46:	7843      	ldrb	r3, [r0, #1]
 8001b48:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001b4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8001b50:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001b52:	3b01      	subs	r3, #1
 8001b54:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8001b56:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001b5e:	e7d2      	b.n	8001b06 <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b60:	6822      	ldr	r2, [r4, #0]
 8001b62:	6813      	ldr	r3, [r2, #0]
 8001b64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b68:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	e773      	b.n	8001a56 <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b76:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001b84:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8001b88:	e765      	b.n	8001a56 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	e763      	b.n	8001a56 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8001b8e:	2002      	movs	r0, #2
 8001b90:	e761      	b.n	8001a56 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
 8001b94:	e75f      	b.n	8001a56 <HAL_I2C_Mem_Write+0x22>
 8001b96:	bf00      	nop
 8001b98:	00100002 	.word	0x00100002
 8001b9c:	ffff0000 	.word	0xffff0000

08001ba0 <HAL_I2C_Mem_Read>:
{
 8001ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ba4:	b087      	sub	sp, #28
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	460f      	mov	r7, r1
 8001baa:	4690      	mov	r8, r2
 8001bac:	4699      	mov	r9, r3
 8001bae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff fa9a 	bl	80010e8 <HAL_GetTick>
 8001bb4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb6:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8001bba:	b2c0      	uxtb	r0, r0
 8001bbc:	2820      	cmp	r0, #32
 8001bbe:	d005      	beq.n	8001bcc <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8001bc0:	f04f 0902 	mov.w	r9, #2
}
 8001bc4:	4648      	mov	r0, r9
 8001bc6:	b007      	add	sp, #28
 8001bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bcc:	9500      	str	r5, [sp, #0]
 8001bce:	2319      	movs	r3, #25
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	498a      	ldr	r1, [pc, #552]	@ (8001dfc <HAL_I2C_Mem_Read+0x25c>)
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff fc07 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	f040 814e 	bne.w	8001e7c <HAL_I2C_Mem_Read+0x2dc>
    __HAL_LOCK(hi2c);
 8001be0:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	f000 814c 	beq.w	8001e82 <HAL_I2C_Mem_Read+0x2e2>
 8001bea:	2301      	movs	r3, #1
 8001bec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	f012 0f01 	tst.w	r2, #1
 8001bf8:	d103      	bne.n	8001c02 <HAL_I2C_Mem_Read+0x62>
      __HAL_I2C_ENABLE(hi2c);
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	f042 0201 	orr.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	6813      	ldr	r3, [r2, #0]
 8001c06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c0a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c0c:	2322      	movs	r3, #34	@ 0x22
 8001c0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c12:	2340      	movs	r3, #64	@ 0x40
 8001c14:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001c1e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c20:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8001c24:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c26:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001c28:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c2a:	4b75      	ldr	r3, [pc, #468]	@ (8001e00 <HAL_I2C_Mem_Read+0x260>)
 8001c2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c2e:	9501      	str	r5, [sp, #4]
 8001c30:	9600      	str	r6, [sp, #0]
 8001c32:	464b      	mov	r3, r9
 8001c34:	4642      	mov	r2, r8
 8001c36:	4639      	mov	r1, r7
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f7ff fd15 	bl	8001668 <I2C_RequestMemoryRead>
 8001c3e:	4681      	mov	r9, r0
 8001c40:	2800      	cmp	r0, #0
 8001c42:	f040 8121 	bne.w	8001e88 <HAL_I2C_Mem_Read+0x2e8>
    if (hi2c->XferSize == 0U)
 8001c46:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001c48:	b993      	cbnz	r3, 8001c70 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	9202      	str	r2, [sp, #8]
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	9202      	str	r2, [sp, #8]
 8001c56:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5e:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 8001c60:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8101 	beq.w	8001e6a <HAL_I2C_Mem_Read+0x2ca>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c68:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001e04 <HAL_I2C_Mem_Read+0x264>
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	e077      	b.n	8001d60 <HAL_I2C_Mem_Read+0x1c0>
    else if (hi2c->XferSize == 1U)
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d00b      	beq.n	8001c8c <HAL_I2C_Mem_Read+0xec>
    else if (hi2c->XferSize == 2U)
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d01b      	beq.n	8001cb0 <HAL_I2C_Mem_Read+0x110>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9305      	str	r3, [sp, #20]
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	9205      	str	r2, [sp, #20]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	9305      	str	r3, [sp, #20]
 8001c86:	9b05      	ldr	r3, [sp, #20]
    while (hi2c->XferSize > 0U)
 8001c88:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001c8a:	e7ed      	b.n	8001c68 <HAL_I2C_Mem_Read+0xc8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c8c:	6822      	ldr	r2, [r4, #0]
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c94:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c96:	2300      	movs	r3, #0
 8001c98:	9303      	str	r3, [sp, #12]
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	9203      	str	r2, [sp, #12]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	9203      	str	r2, [sp, #12]
 8001ca4:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e7d7      	b.n	8001c60 <HAL_I2C_Mem_Read+0xc0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb0:	6822      	ldr	r2, [r4, #0]
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001cb8:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cba:	6822      	ldr	r2, [r4, #0]
 8001cbc:	6813      	ldr	r3, [r2, #0]
 8001cbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cc2:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9304      	str	r3, [sp, #16]
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	9204      	str	r2, [sp, #16]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	9304      	str	r3, [sp, #16]
 8001cd2:	9b04      	ldr	r3, [sp, #16]
 8001cd4:	e7c4      	b.n	8001c60 <HAL_I2C_Mem_Read+0xc0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd6:	462a      	mov	r2, r5
 8001cd8:	4631      	mov	r1, r6
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7ff fda5 	bl	800182a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	f040 80d4 	bne.w	8001e8e <HAL_I2C_Mem_Read+0x2ee>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cec:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001cee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001cf4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001cfa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001d02:	e029      	b.n	8001d58 <HAL_I2C_Mem_Read+0x1b8>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d04:	9500      	str	r5, [sp, #0]
 8001d06:	4633      	mov	r3, r6
 8001d08:	463a      	mov	r2, r7
 8001d0a:	4641      	mov	r1, r8
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff fb6b 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 8001d12:	2800      	cmp	r0, #0
 8001d14:	f040 80be 	bne.w	8001e94 <HAL_I2C_Mem_Read+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d18:	6822      	ldr	r2, [r4, #0]
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d20:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d28:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001d2a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001d2c:	1c53      	adds	r3, r2, #1
 8001d2e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001d30:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001d36:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001d44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d46:	3301      	adds	r3, #1
 8001d48:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001d4a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001d50:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d58:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8085 	beq.w	8001e6a <HAL_I2C_Mem_Read+0x2ca>
      if (hi2c->XferSize <= 3U)
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d851      	bhi.n	8001e08 <HAL_I2C_Mem_Read+0x268>
        if (hi2c->XferSize == 1U)
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d0b6      	beq.n	8001cd6 <HAL_I2C_Mem_Read+0x136>
        else if (hi2c->XferSize == 2U)
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d0cb      	beq.n	8001d04 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d6c:	9500      	str	r5, [sp, #0]
 8001d6e:	4633      	mov	r3, r6
 8001d70:	463a      	mov	r2, r7
 8001d72:	4641      	mov	r1, r8
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff fb37 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	f040 808d 	bne.w	8001e9a <HAL_I2C_Mem_Read+0x2fa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d80:	6822      	ldr	r2, [r4, #0]
 8001d82:	6813      	ldr	r3, [r2, #0]
 8001d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d88:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d90:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001d92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d94:	3301      	adds	r3, #1
 8001d96:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001d98:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001d9e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da6:	9500      	str	r5, [sp, #0]
 8001da8:	4633      	mov	r3, r6
 8001daa:	463a      	mov	r2, r7
 8001dac:	4641      	mov	r1, r8
 8001dae:	4620      	mov	r0, r4
 8001db0:	f7ff fb1a 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d173      	bne.n	8001ea0 <HAL_I2C_Mem_Read+0x300>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db8:	6822      	ldr	r2, [r4, #0]
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001dc8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001dca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001dcc:	1c53      	adds	r3, r2, #1
 8001dce:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001dd0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001de4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001de6:	3301      	adds	r3, #1
 8001de8:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001dea:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001df0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001df8:	e7ae      	b.n	8001d58 <HAL_I2C_Mem_Read+0x1b8>
 8001dfa:	bf00      	nop
 8001dfc:	00100002 	.word	0x00100002
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e08:	462a      	mov	r2, r5
 8001e0a:	4631      	mov	r1, r6
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7ff fd0c 	bl	800182a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e12:	2800      	cmp	r0, #0
 8001e14:	d147      	bne.n	8001ea6 <HAL_I2C_Mem_Read+0x306>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e20:	3301      	adds	r3, #1
 8001e22:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8001e24:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8001e2c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001e2e:	3a01      	subs	r2, #1
 8001e30:	b292      	uxth	r2, r2
 8001e32:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e34:	6822      	ldr	r2, [r4, #0]
 8001e36:	6951      	ldr	r1, [r2, #20]
 8001e38:	f011 0f04 	tst.w	r1, #4
 8001e3c:	d08c      	beq.n	8001d58 <HAL_I2C_Mem_Read+0x1b8>
          if (hi2c->XferSize == 3U)
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d00e      	beq.n	8001e60 <HAL_I2C_Mem_Read+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e48:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001e4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001e50:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001e56:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001e5e:	e77b      	b.n	8001d58 <HAL_I2C_Mem_Read+0x1b8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e60:	6813      	ldr	r3, [r2, #0]
 8001e62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e7eb      	b.n	8001e42 <HAL_I2C_Mem_Read+0x2a2>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001e76:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8001e7a:	e6a3      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x24>
      return HAL_BUSY;
 8001e7c:	f04f 0902 	mov.w	r9, #2
 8001e80:	e6a0      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8001e82:	f04f 0902 	mov.w	r9, #2
 8001e86:	e69d      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 8001e88:	f04f 0901 	mov.w	r9, #1
 8001e8c:	e69a      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8001e8e:	f04f 0901 	mov.w	r9, #1
 8001e92:	e697      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8001e94:	f04f 0901 	mov.w	r9, #1
 8001e98:	e694      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8001e9a:	f04f 0901 	mov.w	r9, #1
 8001e9e:	e691      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8001ea0:	f04f 0901 	mov.w	r9, #1
 8001ea4:	e68e      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x24>
          return HAL_ERROR;
 8001ea6:	f04f 0901 	mov.w	r9, #1
 8001eaa:	e68b      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x24>

08001eac <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eac:	2800      	cmp	r0, #0
 8001eae:	f000 809d 	beq.w	8001fec <HAL_RCC_ClockConfig+0x140>
{
 8001eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb6:	460d      	mov	r5, r1
 8001eb8:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eba:	4b50      	ldr	r3, [pc, #320]	@ (8001ffc <HAL_RCC_ClockConfig+0x150>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	428b      	cmp	r3, r1
 8001ec4:	d208      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x2c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	b2cb      	uxtb	r3, r1
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8001ffc <HAL_RCC_ClockConfig+0x150>)
 8001eca:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ecc:	6813      	ldr	r3, [r2, #0]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	428b      	cmp	r3, r1
 8001ed4:	f040 808c 	bne.w	8001ff0 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	f013 0f02 	tst.w	r3, #2
 8001ede:	d017      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x64>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	f013 0f04 	tst.w	r3, #4
 8001ee4:	d004      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee6:	4a46      	ldr	r2, [pc, #280]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001ee8:	6893      	ldr	r3, [r2, #8]
 8001eea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001eee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	f013 0f08 	tst.w	r3, #8
 8001ef6:	d004      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x56>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4a41      	ldr	r2, [pc, #260]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001efa:	6893      	ldr	r3, [r2, #8]
 8001efc:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f00:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f02:	4a3f      	ldr	r2, [pc, #252]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001f04:	6893      	ldr	r3, [r2, #8]
 8001f06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f0a:	68a1      	ldr	r1, [r4, #8]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	f013 0f01 	tst.w	r3, #1
 8001f16:	d032      	beq.n	8001f7e <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f18:	6862      	ldr	r2, [r4, #4]
 8001f1a:	2a01      	cmp	r2, #1
 8001f1c:	d021      	beq.n	8001f62 <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1e:	1e93      	subs	r3, r2, #2
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d925      	bls.n	8001f70 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f013 0f02 	tst.w	r3, #2
 8001f2c:	d062      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x148>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4934      	ldr	r1, [pc, #208]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001f30:	688b      	ldr	r3, [r1, #8]
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3a:	f7ff f8d5 	bl	80010e8 <HAL_GetTick>
 8001f3e:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f40:	4f2f      	ldr	r7, [pc, #188]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f42:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	6862      	ldr	r2, [r4, #4]
 8001f4e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f52:	d014      	beq.n	8001f7e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7ff f8c8 	bl	80010e8 <HAL_GetTick>
 8001f58:	1b80      	subs	r0, r0, r6
 8001f5a:	4540      	cmp	r0, r8
 8001f5c:	d9f3      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_TIMEOUT;
 8001f5e:	2003      	movs	r0, #3
 8001f60:	e042      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b27      	ldr	r3, [pc, #156]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001f6a:	d1e0      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	e03b      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f70:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001f78:	d1d9      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	e034      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x13c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <HAL_RCC_ClockConfig+0x150>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	42ab      	cmp	r3, r5
 8001f88:	d907      	bls.n	8001f9a <HAL_RCC_ClockConfig+0xee>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	b2ea      	uxtb	r2, r5
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_RCC_ClockConfig+0x150>)
 8001f8e:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	42ab      	cmp	r3, r5
 8001f98:	d12e      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x14c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	f013 0f04 	tst.w	r3, #4
 8001fa0:	d006      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x104>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa2:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001fa4:	6893      	ldr	r3, [r2, #8]
 8001fa6:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001faa:	68e1      	ldr	r1, [r4, #12]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	f013 0f08 	tst.w	r3, #8
 8001fb6:	d007      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x11c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb8:	4a11      	ldr	r2, [pc, #68]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001fba:	6893      	ldr	r3, [r2, #8]
 8001fbc:	6921      	ldr	r1, [r4, #16]
 8001fbe:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001fc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fc6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fc8:	f000 f842 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <HAL_RCC_ClockConfig+0x154>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002004 <HAL_RCC_ClockConfig+0x158>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	40d8      	lsrs	r0, r3
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_RCC_ClockConfig+0x15c>)
 8001fdc:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_RCC_ClockConfig+0x160>)
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	f7ff f835 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8001fe6:	2000      	movs	r0, #0
}
 8001fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001fec:	2001      	movs	r0, #1
}
 8001fee:	4770      	bx	lr
      return HAL_ERROR;
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	e7f9      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	e7f7      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	e7f5      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x13c>
 8001ffc:	40023c00 	.word	0x40023c00
 8002000:	40023800 	.word	0x40023800
 8002004:	08002f68 	.word	0x08002f68
 8002008:	20000000 	.word	0x20000000
 800200c:	20000008 	.word	0x20000008

08002010 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002018:	4a03      	ldr	r2, [pc, #12]	@ (8002028 <HAL_RCC_GetPCLK1Freq+0x18>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	4a03      	ldr	r2, [pc, #12]	@ (800202c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800201e:	6810      	ldr	r0, [r2, #0]
}
 8002020:	40d8      	lsrs	r0, r3
 8002022:	4770      	bx	lr
 8002024:	40023800 	.word	0x40023800
 8002028:	08002f60 	.word	0x08002f60
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002030:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002038:	4a03      	ldr	r2, [pc, #12]	@ (8002048 <HAL_RCC_GetPCLK2Freq+0x18>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	4a03      	ldr	r2, [pc, #12]	@ (800204c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800203e:	6810      	ldr	r0, [r2, #0]
}
 8002040:	40d8      	lsrs	r0, r3
 8002042:	4770      	bx	lr
 8002044:	40023800 	.word	0x40023800
 8002048:	08002f60 	.word	0x08002f60
 800204c:	20000000 	.word	0x20000000

08002050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002052:	4b60      	ldr	r3, [pc, #384]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b08      	cmp	r3, #8
 800205c:	d007      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x1e>
 800205e:	2b0c      	cmp	r3, #12
 8002060:	d05f      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002062:	485d      	ldr	r0, [pc, #372]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002064:	4a5d      	ldr	r2, [pc, #372]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x18c>)
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf18      	it	ne
 800206a:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800206c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800206e:	4b59      	ldr	r3, [pc, #356]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800207c:	d02c      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207e:	4b55      	ldr	r3, [pc, #340]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002080:	6858      	ldr	r0, [r3, #4]
 8002082:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002086:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800208a:	ebbc 0c00 	subs.w	ip, ip, r0
 800208e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002092:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002096:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800209a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800209e:	ebb1 010c 	subs.w	r1, r1, ip
 80020a2:	eb63 030e 	sbc.w	r3, r3, lr
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ac:	00c9      	lsls	r1, r1, #3
 80020ae:	eb11 0c00 	adds.w	ip, r1, r0
 80020b2:	f143 0300 	adc.w	r3, r3, #0
 80020b6:	0259      	lsls	r1, r3, #9
 80020b8:	2300      	movs	r3, #0
 80020ba:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80020be:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80020c2:	f7fe f8a7 	bl	8000214 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020c6:	4b43      	ldr	r3, [pc, #268]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80020d2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80020d6:	e7c9      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d8:	4b3e      	ldr	r3, [pc, #248]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80020da:	6858      	ldr	r0, [r3, #4]
 80020dc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80020e0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80020e4:	ebbc 0c00 	subs.w	ip, ip, r0
 80020e8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80020ec:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80020f0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80020f4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80020f8:	ebb1 010c 	subs.w	r1, r1, ip
 80020fc:	eb63 030e 	sbc.w	r3, r3, lr
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002106:	00c9      	lsls	r1, r1, #3
 8002108:	eb11 0c00 	adds.w	ip, r1, r0
 800210c:	f143 0300 	adc.w	r3, r3, #0
 8002110:	0299      	lsls	r1, r3, #10
 8002112:	2300      	movs	r3, #0
 8002114:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002118:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800211c:	f7fe f87a 	bl	8000214 <__aeabi_uldivmod>
 8002120:	e7d1      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002122:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002130:	d02a      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002132:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002134:	6858      	ldr	r0, [r3, #4]
 8002136:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800213a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800213e:	ebbc 0c00 	subs.w	ip, ip, r0
 8002142:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002146:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800214a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800214e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002152:	ebb1 010c 	subs.w	r1, r1, ip
 8002156:	eb63 030e 	sbc.w	r3, r3, lr
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002160:	00c9      	lsls	r1, r1, #3
 8002162:	eb11 0c00 	adds.w	ip, r1, r0
 8002166:	f143 0300 	adc.w	r3, r3, #0
 800216a:	0259      	lsls	r1, r3, #9
 800216c:	2300      	movs	r3, #0
 800216e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002172:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002176:	f7fe f84d 	bl	8000214 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800217a:	4b16      	ldr	r3, [pc, #88]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8002182:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002186:	e771      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800218a:	6858      	ldr	r0, [r3, #4]
 800218c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002190:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002194:	ebbc 0c00 	subs.w	ip, ip, r0
 8002198:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800219c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80021a0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80021a4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80021a8:	ebb1 010c 	subs.w	r1, r1, ip
 80021ac:	eb63 030e 	sbc.w	r3, r3, lr
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021b6:	00c9      	lsls	r1, r1, #3
 80021b8:	eb11 0c00 	adds.w	ip, r1, r0
 80021bc:	f143 0300 	adc.w	r3, r3, #0
 80021c0:	0299      	lsls	r1, r3, #10
 80021c2:	2300      	movs	r3, #0
 80021c4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80021c8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80021cc:	f7fe f822 	bl	8000214 <__aeabi_uldivmod>
 80021d0:	e7d3      	b.n	800217a <HAL_RCC_GetSysClockFreq+0x12a>
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	007a1200 	.word	0x007a1200
 80021dc:	00f42400 	.word	0x00f42400

080021e0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e0:	2800      	cmp	r0, #0
 80021e2:	f000 8204 	beq.w	80025ee <HAL_RCC_OscConfig+0x40e>
{
 80021e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	6803      	ldr	r3, [r0, #0]
 80021f0:	f013 0f01 	tst.w	r3, #1
 80021f4:	d041      	beq.n	800227a <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021f6:	4b9a      	ldr	r3, [pc, #616]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d032      	beq.n	8002268 <HAL_RCC_OscConfig+0x88>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002202:	4b97      	ldr	r3, [pc, #604]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
        || \
 800220a:	2b08      	cmp	r3, #8
 800220c:	d027      	beq.n	800225e <HAL_RCC_OscConfig+0x7e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220e:	4b94      	ldr	r3, [pc, #592]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d059      	beq.n	80022ce <HAL_RCC_OscConfig+0xee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	6863      	ldr	r3, [r4, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002220:	d05b      	beq.n	80022da <HAL_RCC_OscConfig+0xfa>
 8002222:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002226:	d05e      	beq.n	80022e6 <HAL_RCC_OscConfig+0x106>
 8002228:	4b8d      	ldr	r3, [pc, #564]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002238:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800223a:	6863      	ldr	r3, [r4, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05c      	beq.n	80022fa <HAL_RCC_OscConfig+0x11a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe ff52 	bl	80010e8 <HAL_GetTick>
 8002244:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4e86      	ldr	r6, [pc, #536]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002248:	6833      	ldr	r3, [r6, #0]
 800224a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800224e:	d114      	bne.n	800227a <HAL_RCC_OscConfig+0x9a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7fe ff4a 	bl	80010e8 <HAL_GetTick>
 8002254:	1b40      	subs	r0, r0, r5
 8002256:	2864      	cmp	r0, #100	@ 0x64
 8002258:	d9f6      	bls.n	8002248 <HAL_RCC_OscConfig+0x68>
          {
            return HAL_TIMEOUT;
 800225a:	2003      	movs	r0, #3
 800225c:	e1ce      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800225e:	4b80      	ldr	r3, [pc, #512]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002266:	d0d2      	beq.n	800220e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b7d      	ldr	r3, [pc, #500]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002270:	d003      	beq.n	800227a <HAL_RCC_OscConfig+0x9a>
 8002272:	6863      	ldr	r3, [r4, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 81bc 	beq.w	80025f2 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	f013 0f02 	tst.w	r3, #2
 8002280:	d060      	beq.n	8002344 <HAL_RCC_OscConfig+0x164>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002282:	4b77      	ldr	r3, [pc, #476]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f013 0f0c 	tst.w	r3, #12
 800228a:	d04a      	beq.n	8002322 <HAL_RCC_OscConfig+0x142>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800228c:	4b74      	ldr	r3, [pc, #464]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
        || \
 8002294:	2b08      	cmp	r3, #8
 8002296:	d03f      	beq.n	8002318 <HAL_RCC_OscConfig+0x138>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002298:	4b71      	ldr	r3, [pc, #452]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	d069      	beq.n	8002378 <HAL_RCC_OscConfig+0x198>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a4:	68e3      	ldr	r3, [r4, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d075      	beq.n	8002396 <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002464 <HAL_RCC_OscConfig+0x284>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe ff1a 	bl	80010e8 <HAL_GetTick>
 80022b4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4e6a      	ldr	r6, [pc, #424]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022b8:	6833      	ldr	r3, [r6, #0]
 80022ba:	f013 0f02 	tst.w	r3, #2
 80022be:	d161      	bne.n	8002384 <HAL_RCC_OscConfig+0x1a4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe ff12 	bl	80010e8 <HAL_GetTick>
 80022c4:	1b40      	subs	r0, r0, r5
 80022c6:	2802      	cmp	r0, #2
 80022c8:	d9f6      	bls.n	80022b8 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 80022ca:	2003      	movs	r0, #3
 80022cc:	e196      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4b64      	ldr	r3, [pc, #400]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80022d6:	d0a0      	beq.n	800221a <HAL_RCC_OscConfig+0x3a>
 80022d8:	e7c6      	b.n	8002268 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022da:	4a61      	ldr	r2, [pc, #388]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e7a9      	b.n	800223a <HAL_RCC_OscConfig+0x5a>
 80022e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e79f      	b.n	800223a <HAL_RCC_OscConfig+0x5a>
        tickstart = HAL_GetTick();
 80022fa:	f7fe fef5 	bl	80010e8 <HAL_GetTick>
 80022fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002300:	4e57      	ldr	r6, [pc, #348]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002302:	6833      	ldr	r3, [r6, #0]
 8002304:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002308:	d0b7      	beq.n	800227a <HAL_RCC_OscConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230a:	f7fe feed 	bl	80010e8 <HAL_GetTick>
 800230e:	1b40      	subs	r0, r0, r5
 8002310:	2864      	cmp	r0, #100	@ 0x64
 8002312:	d9f6      	bls.n	8002302 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002314:	2003      	movs	r0, #3
 8002316:	e171      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002318:	4b51      	ldr	r3, [pc, #324]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002320:	d1ba      	bne.n	8002298 <HAL_RCC_OscConfig+0xb8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b4f      	ldr	r3, [pc, #316]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f013 0f02 	tst.w	r3, #2
 800232a:	d003      	beq.n	8002334 <HAL_RCC_OscConfig+0x154>
 800232c:	68e3      	ldr	r3, [r4, #12]
 800232e:	2b01      	cmp	r3, #1
 8002330:	f040 8161 	bne.w	80025f6 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002334:	4a4a      	ldr	r2, [pc, #296]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002336:	6813      	ldr	r3, [r2, #0]
 8002338:	6921      	ldr	r1, [r4, #16]
 800233a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800233e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002342:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	f013 0f08 	tst.w	r3, #8
 800234a:	d049      	beq.n	80023e0 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800234c:	6963      	ldr	r3, [r4, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d033      	beq.n	80023ba <HAL_RCC_OscConfig+0x1da>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <HAL_RCC_OscConfig+0x284>)
 8002354:	2201      	movs	r2, #1
 8002356:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fec5 	bl	80010e8 <HAL_GetTick>
 800235e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002360:	4e3f      	ldr	r6, [pc, #252]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002362:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002364:	f013 0f02 	tst.w	r3, #2
 8002368:	d13a      	bne.n	80023e0 <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236a:	f7fe febd 	bl	80010e8 <HAL_GetTick>
 800236e:	1b40      	subs	r0, r0, r5
 8002370:	2802      	cmp	r0, #2
 8002372:	d9f6      	bls.n	8002362 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002374:	2003      	movs	r0, #3
 8002376:	e141      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002378:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002380:	d190      	bne.n	80022a4 <HAL_RCC_OscConfig+0xc4>
 8002382:	e7ce      	b.n	8002322 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4a36      	ldr	r2, [pc, #216]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002386:	6813      	ldr	r3, [r2, #0]
 8002388:	6921      	ldr	r1, [r4, #16]
 800238a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800238e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e7d6      	b.n	8002344 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002396:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <HAL_RCC_OscConfig+0x284>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800239c:	f7fe fea4 	bl	80010e8 <HAL_GetTick>
 80023a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	4e2f      	ldr	r6, [pc, #188]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023a4:	6833      	ldr	r3, [r6, #0]
 80023a6:	f013 0f02 	tst.w	r3, #2
 80023aa:	d0cb      	beq.n	8002344 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ac:	f7fe fe9c 	bl	80010e8 <HAL_GetTick>
 80023b0:	1b40      	subs	r0, r0, r5
 80023b2:	2802      	cmp	r0, #2
 80023b4:	d9f6      	bls.n	80023a4 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 80023b6:	2003      	movs	r0, #3
 80023b8:	e120      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <HAL_RCC_OscConfig+0x284>)
 80023bc:	2200      	movs	r2, #0
 80023be:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe fe91 	bl	80010e8 <HAL_GetTick>
 80023c6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4e25      	ldr	r6, [pc, #148]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023ca:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80023cc:	f013 0f02 	tst.w	r3, #2
 80023d0:	d006      	beq.n	80023e0 <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d2:	f7fe fe89 	bl	80010e8 <HAL_GetTick>
 80023d6:	1b40      	subs	r0, r0, r5
 80023d8:	2802      	cmp	r0, #2
 80023da:	d9f6      	bls.n	80023ca <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 80023dc:	2003      	movs	r0, #3
 80023de:	e10d      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	f013 0f04 	tst.w	r3, #4
 80023e6:	d077      	beq.n	80024d8 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80023f0:	d133      	bne.n	800245a <HAL_RCC_OscConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023fa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800240a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <HAL_RCC_OscConfig+0x288>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002414:	d02a      	beq.n	800246c <HAL_RCC_OscConfig+0x28c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002416:	68a3      	ldr	r3, [r4, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d03b      	beq.n	8002494 <HAL_RCC_OscConfig+0x2b4>
 800241c:	2b05      	cmp	r3, #5
 800241e:	d03f      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2c0>
 8002420:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002422:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	671a      	str	r2, [r3, #112]	@ 0x70
 800242a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800242c:	f022 0204 	bic.w	r2, r2, #4
 8002430:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002432:	68a3      	ldr	r3, [r4, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d03d      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe fe56 	bl	80010e8 <HAL_GetTick>
 800243c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	4f08      	ldr	r7, [pc, #32]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002446:	f013 0f02 	tst.w	r3, #2
 800244a:	d144      	bne.n	80024d6 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7fe fe4c 	bl	80010e8 <HAL_GetTick>
 8002450:	1b80      	subs	r0, r0, r6
 8002452:	4540      	cmp	r0, r8
 8002454:	d9f6      	bls.n	8002444 <HAL_RCC_OscConfig+0x264>
        {
          return HAL_TIMEOUT;
 8002456:	2003      	movs	r0, #3
 8002458:	e0d0      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2500      	movs	r5, #0
 800245c:	e7d6      	b.n	800240c <HAL_RCC_OscConfig+0x22c>
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	42470000 	.word	0x42470000
 8002468:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246c:	4a6b      	ldr	r2, [pc, #428]	@ (800261c <HAL_RCC_OscConfig+0x43c>)
 800246e:	6813      	ldr	r3, [r2, #0]
 8002470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002474:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002476:	f7fe fe37 	bl	80010e8 <HAL_GetTick>
 800247a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	4f67      	ldr	r7, [pc, #412]	@ (800261c <HAL_RCC_OscConfig+0x43c>)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002484:	d1c7      	bne.n	8002416 <HAL_RCC_OscConfig+0x236>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7fe fe2f 	bl	80010e8 <HAL_GetTick>
 800248a:	1b80      	subs	r0, r0, r6
 800248c:	2802      	cmp	r0, #2
 800248e:	d9f6      	bls.n	800247e <HAL_RCC_OscConfig+0x29e>
          return HAL_TIMEOUT;
 8002490:	2003      	movs	r0, #3
 8002492:	e0b3      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002494:	4a62      	ldr	r2, [pc, #392]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
 8002496:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6713      	str	r3, [r2, #112]	@ 0x70
 800249e:	e7c8      	b.n	8002432 <HAL_RCC_OscConfig+0x252>
 80024a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
 80024a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024a4:	f042 0204 	orr.w	r2, r2, #4
 80024a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80024aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80024b2:	e7be      	b.n	8002432 <HAL_RCC_OscConfig+0x252>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7fe fe18 	bl	80010e8 <HAL_GetTick>
 80024b8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ba:	4f59      	ldr	r7, [pc, #356]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024c2:	f013 0f02 	tst.w	r3, #2
 80024c6:	d006      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7fe fe0e 	bl	80010e8 <HAL_GetTick>
 80024cc:	1b80      	subs	r0, r0, r6
 80024ce:	4540      	cmp	r0, r8
 80024d0:	d9f6      	bls.n	80024c0 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 80024d2:	2003      	movs	r0, #3
 80024d4:	e092      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024d6:	b9ed      	cbnz	r5, 8002514 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d8:	69a3      	ldr	r3, [r4, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 808d 	beq.w	80025fa <HAL_RCC_OscConfig+0x41a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	f002 020c 	and.w	r2, r2, #12
 80024e8:	2a08      	cmp	r2, #8
 80024ea:	d054      	beq.n	8002596 <HAL_RCC_OscConfig+0x3b6>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d017      	beq.n	8002520 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002624 <HAL_RCC_OscConfig+0x444>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fdf7 	bl	80010e8 <HAL_GetTick>
 80024fa:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fc:	4d48      	ldr	r5, [pc, #288]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
 80024fe:	682b      	ldr	r3, [r5, #0]
 8002500:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002504:	d045      	beq.n	8002592 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe fdef 	bl	80010e8 <HAL_GetTick>
 800250a:	1b00      	subs	r0, r0, r4
 800250c:	2802      	cmp	r0, #2
 800250e:	d9f6      	bls.n	80024fe <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002510:	2003      	movs	r0, #3
 8002512:	e073      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002514:	4a42      	ldr	r2, [pc, #264]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
 8002516:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	e7db      	b.n	80024d8 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002520:	4b40      	ldr	r3, [pc, #256]	@ (8002624 <HAL_RCC_OscConfig+0x444>)
 8002522:	2200      	movs	r2, #0
 8002524:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002526:	f7fe fddf 	bl	80010e8 <HAL_GetTick>
 800252a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252c:	4e3c      	ldr	r6, [pc, #240]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
 800252e:	6833      	ldr	r3, [r6, #0]
 8002530:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002534:	d006      	beq.n	8002544 <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fdd7 	bl	80010e8 <HAL_GetTick>
 800253a:	1b40      	subs	r0, r0, r5
 800253c:	2802      	cmp	r0, #2
 800253e:	d9f6      	bls.n	800252e <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8002540:	2003      	movs	r0, #3
 8002542:	e05b      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002544:	69e3      	ldr	r3, [r4, #28]
 8002546:	6a22      	ldr	r2, [r4, #32]
 8002548:	4313      	orrs	r3, r2
 800254a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800254c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002550:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002552:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002556:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002558:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800255c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800255e:	0852      	lsrs	r2, r2, #1
 8002560:	3a01      	subs	r2, #1
 8002562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002566:	4a2e      	ldr	r2, [pc, #184]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
 8002568:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800256a:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <HAL_RCC_OscConfig+0x444>)
 800256c:	2201      	movs	r2, #1
 800256e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002570:	f7fe fdba 	bl	80010e8 <HAL_GetTick>
 8002574:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4d2a      	ldr	r5, [pc, #168]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe fdb2 	bl	80010e8 <HAL_GetTick>
 8002584:	1b00      	subs	r0, r0, r4
 8002586:	2802      	cmp	r0, #2
 8002588:	d9f6      	bls.n	8002578 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800258a:	2003      	movs	r0, #3
 800258c:	e036      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800258e:	2000      	movs	r0, #0
 8002590:	e034      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
 8002592:	2000      	movs	r0, #0
 8002594:	e032      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002596:	2b01      	cmp	r3, #1
 8002598:	d033      	beq.n	8002602 <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->PLLCFGR;
 800259a:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <HAL_RCC_OscConfig+0x440>)
 800259c:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a2:	69e2      	ldr	r2, [r4, #28]
 80025a4:	4291      	cmp	r1, r2
 80025a6:	d12e      	bne.n	8002606 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ac:	6a21      	ldr	r1, [r4, #32]
 80025ae:	428a      	cmp	r2, r1
 80025b0:	d12b      	bne.n	800260a <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b4:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80025b8:	401a      	ands	r2, r3
 80025ba:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80025be:	d126      	bne.n	800260e <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c0:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80025c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80025c6:	0852      	lsrs	r2, r2, #1
 80025c8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ca:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80025ce:	d120      	bne.n	8002612 <HAL_RCC_OscConfig+0x432>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d0:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d6:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80025da:	d11c      	bne.n	8002616 <HAL_RCC_OscConfig+0x436>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80025de:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e2:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80025e6:	bf14      	ite	ne
 80025e8:	2001      	movne	r0, #1
 80025ea:	2000      	moveq	r0, #0
 80025ec:	e006      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
    return HAL_ERROR;
 80025ee:	2001      	movs	r0, #1
}
 80025f0:	4770      	bx	lr
        return HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
 80025f4:	e002      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        return HAL_ERROR;
 80025f6:	2001      	movs	r0, #1
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 80025fa:	2000      	movs	r0, #0
}
 80025fc:	b002      	add	sp, #8
 80025fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
 8002604:	e7fa      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
 8002606:	2001      	movs	r0, #1
 8002608:	e7f8      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
 800260a:	2001      	movs	r0, #1
 800260c:	e7f6      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
 800260e:	2001      	movs	r0, #1
 8002610:	e7f4      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
 8002612:	2001      	movs	r0, #1
 8002614:	e7f2      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
 8002616:	2001      	movs	r0, #1
 8002618:	e7f0      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
 800261a:	bf00      	nop
 800261c:	40007000 	.word	0x40007000
 8002620:	40023800 	.word	0x40023800
 8002624:	42470000 	.word	0x42470000

08002628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002628:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800262c:	6a02      	ldr	r2, [r0, #32]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002634:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002636:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002638:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800263c:	680d      	ldr	r5, [r1, #0]
 800263e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002640:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002644:	688d      	ldr	r5, [r1, #8]
 8002646:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002648:	4d0d      	ldr	r5, [pc, #52]	@ (8002680 <TIM_OC1_SetConfig+0x58>)
 800264a:	42a8      	cmp	r0, r5
 800264c:	d003      	beq.n	8002656 <TIM_OC1_SetConfig+0x2e>
 800264e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002652:	42a8      	cmp	r0, r5
 8002654:	d10d      	bne.n	8002672 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002656:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800265a:	68cd      	ldr	r5, [r1, #12]
 800265c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800265e:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002662:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002666:	698d      	ldr	r5, [r1, #24]
 8002668:	694e      	ldr	r6, [r1, #20]
 800266a:	ea46 0c05 	orr.w	ip, r6, r5
 800266e:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002672:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002674:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002676:	684a      	ldr	r2, [r1, #4]
 8002678:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267a:	6203      	str	r3, [r0, #32]
}
 800267c:	bc70      	pop	{r4, r5, r6}
 800267e:	4770      	bx	lr
 8002680:	40010000 	.word	0x40010000

08002684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002686:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002688:	6a02      	ldr	r2, [r0, #32]
 800268a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800268e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002690:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002692:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002694:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002698:	680d      	ldr	r5, [r1, #0]
 800269a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800269c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026a0:	688d      	ldr	r5, [r1, #8]
 80026a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026a6:	4d0e      	ldr	r5, [pc, #56]	@ (80026e0 <TIM_OC3_SetConfig+0x5c>)
 80026a8:	42a8      	cmp	r0, r5
 80026aa:	d003      	beq.n	80026b4 <TIM_OC3_SetConfig+0x30>
 80026ac:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80026b0:	42a8      	cmp	r0, r5
 80026b2:	d10e      	bne.n	80026d2 <TIM_OC3_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026b8:	68cd      	ldr	r5, [r1, #12]
 80026ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026c2:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026c6:	698d      	ldr	r5, [r1, #24]
 80026c8:	694e      	ldr	r6, [r1, #20]
 80026ca:	ea46 0c05 	orr.w	ip, r6, r5
 80026ce:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026d4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026d6:	684a      	ldr	r2, [r1, #4]
 80026d8:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026da:	6203      	str	r3, [r0, #32]
}
 80026dc:	bc70      	pop	{r4, r5, r6}
 80026de:	4770      	bx	lr
 80026e0:	40010000 	.word	0x40010000

080026e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026e8:	6a02      	ldr	r2, [r0, #32]
 80026ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026ee:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026f4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f8:	680d      	ldr	r5, [r1, #0]
 80026fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002702:	688d      	ldr	r5, [r1, #8]
 8002704:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002708:	4d09      	ldr	r5, [pc, #36]	@ (8002730 <TIM_OC4_SetConfig+0x4c>)
 800270a:	42a8      	cmp	r0, r5
 800270c:	d003      	beq.n	8002716 <TIM_OC4_SetConfig+0x32>
 800270e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002712:	42a8      	cmp	r0, r5
 8002714:	d104      	bne.n	8002720 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002716:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800271a:	694d      	ldr	r5, [r1, #20]
 800271c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002720:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002722:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002724:	684a      	ldr	r2, [r1, #4]
 8002726:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002728:	6203      	str	r3, [r0, #32]
}
 800272a:	bc30      	pop	{r4, r5}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40010000 	.word	0x40010000

08002734 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002734:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002736:	4a4d      	ldr	r2, [pc, #308]	@ (800286c <TIM_Base_SetConfig+0x138>)
 8002738:	4290      	cmp	r0, r2
 800273a:	d067      	beq.n	800280c <TIM_Base_SetConfig+0xd8>
 800273c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002740:	d07e      	beq.n	8002840 <TIM_Base_SetConfig+0x10c>
 8002742:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002746:	4290      	cmp	r0, r2
 8002748:	d056      	beq.n	80027f8 <TIM_Base_SetConfig+0xc4>
 800274a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800274e:	4290      	cmp	r0, r2
 8002750:	d057      	beq.n	8002802 <TIM_Base_SetConfig+0xce>
 8002752:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002756:	4290      	cmp	r0, r2
 8002758:	f000 8083 	beq.w	8002862 <TIM_Base_SetConfig+0x12e>
 800275c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002760:	4290      	cmp	r0, r2
 8002762:	d01f      	beq.n	80027a4 <TIM_Base_SetConfig+0x70>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002764:	4a42      	ldr	r2, [pc, #264]	@ (8002870 <TIM_Base_SetConfig+0x13c>)
 8002766:	4290      	cmp	r0, r2
 8002768:	d06e      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
 800276a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800276e:	4290      	cmp	r0, r2
 8002770:	d06a      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
 8002772:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002776:	4290      	cmp	r0, r2
 8002778:	d066      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
 800277a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800277e:	4290      	cmp	r0, r2
 8002780:	d062      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
 8002782:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002786:	4290      	cmp	r0, r2
 8002788:	d05e      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
 800278a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800278e:	4290      	cmp	r0, r2
 8002790:	d05a      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002796:	694a      	ldr	r2, [r1, #20]
 8002798:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800279a:	688a      	ldr	r2, [r1, #8]
 800279c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800279e:	680a      	ldr	r2, [r1, #0]
 80027a0:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a2:	e045      	b.n	8002830 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80027a8:	684a      	ldr	r2, [r1, #4]
 80027aa:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ac:	4a2f      	ldr	r2, [pc, #188]	@ (800286c <TIM_Base_SetConfig+0x138>)
 80027ae:	4290      	cmp	r0, r2
 80027b0:	d030      	beq.n	8002814 <TIM_Base_SetConfig+0xe0>
 80027b2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80027b6:	d047      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
 80027b8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80027bc:	4290      	cmp	r0, r2
 80027be:	d043      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
 80027c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027c4:	4290      	cmp	r0, r2
 80027c6:	d03f      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
 80027c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027cc:	4290      	cmp	r0, r2
 80027ce:	d03b      	beq.n	8002848 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d4:	68ca      	ldr	r2, [r1, #12]
 80027d6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027dc:	694a      	ldr	r2, [r1, #20]
 80027de:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e0:	688a      	ldr	r2, [r1, #8]
 80027e2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80027e4:	680a      	ldr	r2, [r1, #0]
 80027e6:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e8:	4a20      	ldr	r2, [pc, #128]	@ (800286c <TIM_Base_SetConfig+0x138>)
 80027ea:	4290      	cmp	r0, r2
 80027ec:	d01e      	beq.n	800282c <TIM_Base_SetConfig+0xf8>
 80027ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027f2:	4290      	cmp	r0, r2
 80027f4:	d01a      	beq.n	800282c <TIM_Base_SetConfig+0xf8>
 80027f6:	e01b      	b.n	8002830 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80027fc:	684a      	ldr	r2, [r1, #4]
 80027fe:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002800:	e022      	b.n	8002848 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002806:	684a      	ldr	r2, [r1, #4]
 8002808:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280a:	e01d      	b.n	8002848 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800280c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002810:	684a      	ldr	r2, [r1, #4]
 8002812:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002818:	68ca      	ldr	r2, [r1, #12]
 800281a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002820:	694a      	ldr	r2, [r1, #20]
 8002822:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002824:	688a      	ldr	r2, [r1, #8]
 8002826:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002828:	680a      	ldr	r2, [r1, #0]
 800282a:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800282c:	690a      	ldr	r2, [r1, #16]
 800282e:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002830:	6802      	ldr	r2, [r0, #0]
 8002832:	f042 0204 	orr.w	r2, r2, #4
 8002836:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002838:	2201      	movs	r2, #1
 800283a:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 800283c:	6003      	str	r3, [r0, #0]
}
 800283e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002844:	684a      	ldr	r2, [r1, #4]
 8002846:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284c:	68ca      	ldr	r2, [r1, #12]
 800284e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002854:	694a      	ldr	r2, [r1, #20]
 8002856:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002858:	688a      	ldr	r2, [r1, #8]
 800285a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800285c:	680a      	ldr	r2, [r1, #0]
 800285e:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002860:	e7e6      	b.n	8002830 <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002866:	684a      	ldr	r2, [r1, #4]
 8002868:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286a:	e7ed      	b.n	8002848 <TIM_Base_SetConfig+0x114>
 800286c:	40010000 	.word	0x40010000
 8002870:	40014000 	.word	0x40014000

08002874 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002874:	b340      	cbz	r0, 80028c8 <HAL_TIM_PWM_Init+0x54>
{
 8002876:	b510      	push	{r4, lr}
 8002878:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800287e:	b1f3      	cbz	r3, 80028be <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	2302      	movs	r3, #2
 8002882:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002886:	4621      	mov	r1, r4
 8002888:	f851 0b04 	ldr.w	r0, [r1], #4
 800288c:	f7ff ff52 	bl	8002734 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002890:	2301      	movs	r3, #1
 8002892:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002896:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800289a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800289e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80028a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80028b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80028ba:	2000      	movs	r0, #0
}
 80028bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80028be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80028c2:	f7fe fac9 	bl	8000e58 <HAL_TIM_PWM_MspInit>
 80028c6:	e7db      	b.n	8002880 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80028c8:	2001      	movs	r0, #1
}
 80028ca:	4770      	bx	lr

080028cc <TIM_OC2_SetConfig>:
{
 80028cc:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80028ce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d0:	6a02      	ldr	r2, [r0, #32]
 80028d2:	f022 0210 	bic.w	r2, r2, #16
 80028d6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80028da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028dc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e0:	680d      	ldr	r5, [r1, #0]
 80028e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80028e6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028ea:	688d      	ldr	r5, [r1, #8]
 80028ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028f0:	4d0e      	ldr	r5, [pc, #56]	@ (800292c <TIM_OC2_SetConfig+0x60>)
 80028f2:	42a8      	cmp	r0, r5
 80028f4:	d003      	beq.n	80028fe <TIM_OC2_SetConfig+0x32>
 80028f6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80028fa:	42a8      	cmp	r0, r5
 80028fc:	d10e      	bne.n	800291c <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 80028fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002902:	68cd      	ldr	r5, [r1, #12]
 8002904:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800290c:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002910:	698d      	ldr	r5, [r1, #24]
 8002912:	694e      	ldr	r6, [r1, #20]
 8002914:	ea46 0c05 	orr.w	ip, r6, r5
 8002918:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 800291c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800291e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002920:	684a      	ldr	r2, [r1, #4]
 8002922:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002924:	6203      	str	r3, [r0, #32]
}
 8002926:	bc70      	pop	{r4, r5, r6}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40010000 	.word	0x40010000

08002930 <HAL_TIM_PWM_ConfigChannel>:
{
 8002930:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002932:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d066      	beq.n	8002a08 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800293a:	4604      	mov	r4, r0
 800293c:	460d      	mov	r5, r1
 800293e:	2301      	movs	r3, #1
 8002940:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002944:	2a0c      	cmp	r2, #12
 8002946:	d85a      	bhi.n	80029fe <HAL_TIM_PWM_ConfigChannel+0xce>
 8002948:	e8df f002 	tbb	[pc, r2]
 800294c:	59595907 	.word	0x59595907
 8002950:	5959591b 	.word	0x5959591b
 8002954:	59595930 	.word	0x59595930
 8002958:	44          	.byte	0x44
 8002959:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800295a:	6800      	ldr	r0, [r0, #0]
 800295c:	f7ff fe64 	bl	8002628 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002960:	6822      	ldr	r2, [r4, #0]
 8002962:	6993      	ldr	r3, [r2, #24]
 8002964:	f043 0308 	orr.w	r3, r3, #8
 8002968:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	6993      	ldr	r3, [r2, #24]
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002974:	6822      	ldr	r2, [r4, #0]
 8002976:	6993      	ldr	r3, [r2, #24]
 8002978:	6929      	ldr	r1, [r5, #16]
 800297a:	430b      	orrs	r3, r1
 800297c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2000      	movs	r0, #0
      break;
 8002980:	e03e      	b.n	8002a00 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002982:	6800      	ldr	r0, [r0, #0]
 8002984:	f7ff ffa2 	bl	80028cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002988:	6822      	ldr	r2, [r4, #0]
 800298a:	6993      	ldr	r3, [r2, #24]
 800298c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002990:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	6993      	ldr	r3, [r2, #24]
 8002996:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800299a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800299c:	6822      	ldr	r2, [r4, #0]
 800299e:	6993      	ldr	r3, [r2, #24]
 80029a0:	6929      	ldr	r1, [r5, #16]
 80029a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029a6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80029a8:	2000      	movs	r0, #0
      break;
 80029aa:	e029      	b.n	8002a00 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029ac:	6800      	ldr	r0, [r0, #0]
 80029ae:	f7ff fe69 	bl	8002684 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029b2:	6822      	ldr	r2, [r4, #0]
 80029b4:	69d3      	ldr	r3, [r2, #28]
 80029b6:	f043 0308 	orr.w	r3, r3, #8
 80029ba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029bc:	6822      	ldr	r2, [r4, #0]
 80029be:	69d3      	ldr	r3, [r2, #28]
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029c6:	6822      	ldr	r2, [r4, #0]
 80029c8:	69d3      	ldr	r3, [r2, #28]
 80029ca:	6929      	ldr	r1, [r5, #16]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80029d0:	2000      	movs	r0, #0
      break;
 80029d2:	e015      	b.n	8002a00 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029d4:	6800      	ldr	r0, [r0, #0]
 80029d6:	f7ff fe85 	bl	80026e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029da:	6822      	ldr	r2, [r4, #0]
 80029dc:	69d3      	ldr	r3, [r2, #28]
 80029de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029e2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029e4:	6822      	ldr	r2, [r4, #0]
 80029e6:	69d3      	ldr	r3, [r2, #28]
 80029e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029ec:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ee:	6822      	ldr	r2, [r4, #0]
 80029f0:	69d3      	ldr	r3, [r2, #28]
 80029f2:	6929      	ldr	r1, [r5, #16]
 80029f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029f8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2000      	movs	r0, #0
      break;
 80029fc:	e000      	b.n	8002a00 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80029fe:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002a00:	2300      	movs	r3, #0
 8002a02:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002a08:	2002      	movs	r0, #2
 8002a0a:	e7fc      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0xd6>

08002a0c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a0c:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a10:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a12:	f04f 0c01 	mov.w	ip, #1
 8002a16:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8002a1a:	ea23 030c 	bic.w	r3, r3, ip
 8002a1e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a20:	6a03      	ldr	r3, [r0, #32]
 8002a22:	408a      	lsls	r2, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	6202      	str	r2, [r0, #32]
}
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_TIM_PWM_Start>:
{
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a30:	4608      	mov	r0, r1
 8002a32:	bba1      	cbnz	r1, 8002a9e <HAL_TIM_PWM_Start+0x72>
 8002a34:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d167      	bne.n	8002b0e <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a44:	2201      	movs	r2, #1
 8002a46:	4601      	mov	r1, r0
 8002a48:	6820      	ldr	r0, [r4, #0]
 8002a4a:	f7ff ffdf 	bl	8002a0c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	4a31      	ldr	r2, [pc, #196]	@ (8002b18 <HAL_TIM_PWM_Start+0xec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d048      	beq.n	8002ae8 <HAL_TIM_PWM_Start+0xbc>
 8002a56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d044      	beq.n	8002ae8 <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a62:	d049      	beq.n	8002af8 <HAL_TIM_PWM_Start+0xcc>
 8002a64:	4a2d      	ldr	r2, [pc, #180]	@ (8002b1c <HAL_TIM_PWM_Start+0xf0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d046      	beq.n	8002af8 <HAL_TIM_PWM_Start+0xcc>
 8002a6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d042      	beq.n	8002af8 <HAL_TIM_PWM_Start+0xcc>
 8002a72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d03e      	beq.n	8002af8 <HAL_TIM_PWM_Start+0xcc>
 8002a7a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d03a      	beq.n	8002af8 <HAL_TIM_PWM_Start+0xcc>
 8002a82:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d036      	beq.n	8002af8 <HAL_TIM_PWM_Start+0xcc>
 8002a8a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d032      	beq.n	8002af8 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f042 0201 	orr.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	e036      	b.n	8002b0c <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a9e:	2904      	cmp	r1, #4
 8002aa0:	d00c      	beq.n	8002abc <HAL_TIM_PWM_Start+0x90>
 8002aa2:	2908      	cmp	r1, #8
 8002aa4:	bf0c      	ite	eq
 8002aa6:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 8002aaa:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	bf18      	it	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	b143      	cbz	r3, 8002aca <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 8002ab8:	2001      	movs	r0, #1
 8002aba:	e027      	b.n	8002b0c <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002abc:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	bf18      	it	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	e7f5      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aca:	2804      	cmp	r0, #4
 8002acc:	d008      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0xb4>
 8002ace:	2808      	cmp	r0, #8
 8002ad0:	f04f 0302 	mov.w	r3, #2
 8002ad4:	bf0c      	ite	eq
 8002ad6:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8002ada:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8002ade:	e7b1      	b.n	8002a44 <HAL_TIM_PWM_Start+0x18>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002ae6:	e7ad      	b.n	8002a44 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8002ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aee:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <HAL_TIM_PWM_Start+0xec>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d1b2      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afe:	2a06      	cmp	r2, #6
 8002b00:	d007      	beq.n	8002b12 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b0a:	2000      	movs	r0, #0
}
 8002b0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b0e:	2001      	movs	r0, #1
 8002b10:	e7fc      	b.n	8002b0c <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8002b12:	2000      	movs	r0, #0
 8002b14:	e7fa      	b.n	8002b0c <HAL_TIM_PWM_Start+0xe0>
 8002b16:	bf00      	nop
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	40000400 	.word	0x40000400

08002b20 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b20:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002b24:	2a01      	cmp	r2, #1
 8002b26:	d03b      	beq.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8002b28:	b430      	push	{r4, r5}
 8002b2a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b32:	2202      	movs	r2, #2
 8002b34:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b38:	6804      	ldr	r4, [r0, #0]
 8002b3a:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b3c:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b3e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b42:	680d      	ldr	r5, [r1, #0]
 8002b44:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b46:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4c16      	ldr	r4, [pc, #88]	@ (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8002b4c:	42a2      	cmp	r2, r4
 8002b4e:	d01a      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002b50:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002b54:	d017      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002b56:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 8002b5a:	42a2      	cmp	r2, r4
 8002b5c:	d013      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002b5e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b62:	42a2      	cmp	r2, r4
 8002b64:	d00f      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002b66:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b6a:	42a2      	cmp	r2, r4
 8002b6c:	d00b      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002b6e:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 8002b72:	42a2      	cmp	r2, r4
 8002b74:	d007      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002b76:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 8002b7a:	42a2      	cmp	r2, r4
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002b7e:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8002b82:	42a2      	cmp	r2, r4
 8002b84:	d104      	bne.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b86:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b8a:	6849      	ldr	r1, [r1, #4]
 8002b8c:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b8e:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002b9c:	bc30      	pop	{r4, r5}
 8002b9e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002ba0:	2002      	movs	r0, #2
}
 8002ba2:	4770      	bx	lr
 8002ba4:	40010000 	.word	0x40010000

08002ba8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	f102 030c 	add.w	r3, r2, #12
 8002bae:	e853 3f00 	ldrex	r3, [r3]
 8002bb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	320c      	adds	r2, #12
 8002bb8:	e842 3100 	strex	r1, r3, [r2]
 8002bbc:	2900      	cmp	r1, #0
 8002bbe:	d1f3      	bne.n	8002ba8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	f102 0314 	add.w	r3, r2, #20
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	3214      	adds	r2, #20
 8002bd0:	e842 3100 	strex	r1, r3, [r2]
 8002bd4:	2900      	cmp	r1, #0
 8002bd6:	d1f3      	bne.n	8002bc0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d005      	beq.n	8002bea <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bde:	2320      	movs	r3, #32
 8002be0:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be4:	2300      	movs	r3, #0
 8002be6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002be8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	f102 030c 	add.w	r3, r2, #12
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	320c      	adds	r2, #12
 8002bfa:	e842 3100 	strex	r1, r3, [r2]
 8002bfe:	2900      	cmp	r1, #0
 8002c00:	d1f3      	bne.n	8002bea <UART_EndRxTransfer+0x42>
 8002c02:	e7ec      	b.n	8002bde <UART_EndRxTransfer+0x36>

08002c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	6802      	ldr	r2, [r0, #0]
 8002c0a:	6913      	ldr	r3, [r2, #16]
 8002c0c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c10:	68c1      	ldr	r1, [r0, #12]
 8002c12:	430b      	orrs	r3, r1
 8002c14:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002c16:	6801      	ldr	r1, [r0, #0]
 8002c18:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c1a:	6883      	ldr	r3, [r0, #8]
 8002c1c:	6900      	ldr	r0, [r0, #16]
 8002c1e:	4303      	orrs	r3, r0
 8002c20:	6960      	ldr	r0, [r4, #20]
 8002c22:	4303      	orrs	r3, r0
 8002c24:	69e0      	ldr	r0, [r4, #28]
 8002c26:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002c28:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8002c2c:	f022 020c 	bic.w	r2, r2, #12
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c34:	6822      	ldr	r2, [r4, #0]
 8002c36:	6953      	ldr	r3, [r2, #20]
 8002c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3c:	69a1      	ldr	r1, [r4, #24]
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	4a2e      	ldr	r2, [pc, #184]	@ (8002d00 <UART_SetConfig+0xfc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d006      	beq.n	8002c58 <UART_SetConfig+0x54>
 8002c4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d002      	beq.n	8002c58 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c52:	f7ff f9dd 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8002c56:	e001      	b.n	8002c5c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7ff f9ea 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c5c:	69e3      	ldr	r3, [r4, #28]
 8002c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c62:	d024      	beq.n	8002cae <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c64:	2100      	movs	r1, #0
 8002c66:	1803      	adds	r3, r0, r0
 8002c68:	4149      	adcs	r1, r1
 8002c6a:	181b      	adds	r3, r3, r0
 8002c6c:	f141 0100 	adc.w	r1, r1, #0
 8002c70:	00c9      	lsls	r1, r1, #3
 8002c72:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	1818      	adds	r0, r3, r0
 8002c7a:	6863      	ldr	r3, [r4, #4]
 8002c7c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002c80:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002c84:	f141 0100 	adc.w	r1, r1, #0
 8002c88:	f7fd fac4 	bl	8000214 <__aeabi_uldivmod>
 8002c8c:	6821      	ldr	r1, [r4, #0]
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <UART_SetConfig+0x100>)
 8002c90:	fba2 4300 	umull	r4, r3, r2, r0
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	2464      	movs	r4, #100	@ 0x64
 8002c98:	fb04 0013 	mls	r0, r4, r3, r0
 8002c9c:	0100      	lsls	r0, r0, #4
 8002c9e:	3032      	adds	r0, #50	@ 0x32
 8002ca0:	fba2 2000 	umull	r2, r0, r2, r0
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8002caa:	608b      	str	r3, [r1, #8]
  }
}
 8002cac:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	1802      	adds	r2, r0, r0
 8002cb2:	eb43 0103 	adc.w	r1, r3, r3
 8002cb6:	1812      	adds	r2, r2, r0
 8002cb8:	f141 0100 	adc.w	r1, r1, #0
 8002cbc:	00c9      	lsls	r1, r1, #3
 8002cbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cc2:	00d2      	lsls	r2, r2, #3
 8002cc4:	1810      	adds	r0, r2, r0
 8002cc6:	f141 0100 	adc.w	r1, r1, #0
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	1892      	adds	r2, r2, r2
 8002cce:	415b      	adcs	r3, r3
 8002cd0:	f7fd faa0 	bl	8000214 <__aeabi_uldivmod>
 8002cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002d04 <UART_SetConfig+0x100>)
 8002cd6:	fba2 3100 	umull	r3, r1, r2, r0
 8002cda:	0949      	lsrs	r1, r1, #5
 8002cdc:	2364      	movs	r3, #100	@ 0x64
 8002cde:	fb03 0311 	mls	r3, r3, r1, r0
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	3332      	adds	r3, #50	@ 0x32
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	6820      	ldr	r0, [r4, #0]
 8002cec:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002cf0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cfa:	4413      	add	r3, r2
 8002cfc:	6083      	str	r3, [r0, #8]
 8002cfe:	e7d5      	b.n	8002cac <UART_SetConfig+0xa8>
 8002d00:	40011000 	.word	0x40011000
 8002d04:	51eb851f 	.word	0x51eb851f

08002d08 <UART_WaitOnFlagUntilTimeout>:
{
 8002d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	4680      	mov	r8, r0
 8002d10:	460d      	mov	r5, r1
 8002d12:	4616      	mov	r6, r2
 8002d14:	4699      	mov	r9, r3
 8002d16:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d18:	f8d8 3000 	ldr.w	r3, [r8]
 8002d1c:	681c      	ldr	r4, [r3, #0]
 8002d1e:	ea35 0404 	bics.w	r4, r5, r4
 8002d22:	bf0c      	ite	eq
 8002d24:	2401      	moveq	r4, #1
 8002d26:	2400      	movne	r4, #0
 8002d28:	42b4      	cmp	r4, r6
 8002d2a:	d128      	bne.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002d2c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002d30:	d0f4      	beq.n	8002d1c <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe f9d9 	bl	80010e8 <HAL_GetTick>
 8002d36:	eba0 0009 	sub.w	r0, r0, r9
 8002d3a:	42b8      	cmp	r0, r7
 8002d3c:	d823      	bhi.n	8002d86 <UART_WaitOnFlagUntilTimeout+0x7e>
 8002d3e:	b327      	cbz	r7, 8002d8a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d40:	f8d8 3000 	ldr.w	r3, [r8]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	f012 0f04 	tst.w	r2, #4
 8002d4a:	d0e5      	beq.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x10>
 8002d4c:	2d80      	cmp	r5, #128	@ 0x80
 8002d4e:	d0e3      	beq.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x10>
 8002d50:	2d40      	cmp	r5, #64	@ 0x40
 8002d52:	d0e1      	beq.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	f012 0f08 	tst.w	r2, #8
 8002d5a:	d0dd      	beq.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d5c:	2400      	movs	r4, #0
 8002d5e:	9401      	str	r4, [sp, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	9201      	str	r2, [sp, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002d6a:	4640      	mov	r0, r8
 8002d6c:	f7ff ff1c 	bl	8002ba8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d70:	2308      	movs	r3, #8
 8002d72:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002d76:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	e000      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002d7e:	2000      	movs	r0, #0
}
 8002d80:	b003      	add	sp, #12
 8002d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002d86:	2003      	movs	r0, #3
 8002d88:	e7fa      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0x78>
 8002d8a:	2003      	movs	r0, #3
 8002d8c:	e7f8      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0x78>

08002d8e <HAL_UART_Init>:
  if (huart == NULL)
 8002d8e:	b360      	cbz	r0, 8002dea <HAL_UART_Init+0x5c>
{
 8002d90:	b510      	push	{r4, lr}
 8002d92:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d94:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d98:	b313      	cbz	r3, 8002de0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d9a:	2324      	movs	r3, #36	@ 0x24
 8002d9c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	68d3      	ldr	r3, [r2, #12]
 8002da4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002da8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002daa:	4620      	mov	r0, r4
 8002dac:	f7ff ff2a 	bl	8002c04 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	6913      	ldr	r3, [r2, #16]
 8002db4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002db8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	6953      	ldr	r3, [r2, #20]
 8002dbe:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002dc2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	68d3      	ldr	r3, [r2, #12]
 8002dc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dcc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dce:	2000      	movs	r0, #0
 8002dd0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ddc:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002dde:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002de0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002de4:	f7fe f8bc 	bl	8000f60 <HAL_UART_MspInit>
 8002de8:	e7d7      	b.n	8002d9a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002dea:	2001      	movs	r0, #1
}
 8002dec:	4770      	bx	lr

08002dee <HAL_UART_Transmit>:
{
 8002dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002df6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d15c      	bne.n	8002eba <HAL_UART_Transmit+0xcc>
 8002e00:	4604      	mov	r4, r0
 8002e02:	460d      	mov	r5, r1
 8002e04:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002e06:	2900      	cmp	r1, #0
 8002e08:	d05b      	beq.n	8002ec2 <HAL_UART_Transmit+0xd4>
 8002e0a:	b90a      	cbnz	r2, 8002e10 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	e055      	b.n	8002ebc <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e14:	2321      	movs	r3, #33	@ 0x21
 8002e16:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002e1a:	f7fe f965 	bl	80010e8 <HAL_GetTick>
 8002e1e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002e20:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e24:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e28:	68a3      	ldr	r3, [r4, #8]
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e2e:	d009      	beq.n	8002e44 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8002e30:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8002e34:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	b373      	cbz	r3, 8002e98 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	f04f 0900 	mov.w	r9, #0
 8002e3e:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8002e42:	e019      	b.n	8002e78 <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e44:	6923      	ldr	r3, [r4, #16]
 8002e46:	b113      	cbz	r3, 8002e4e <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002e48:	f04f 0a00 	mov.w	sl, #0
 8002e4c:	e7f2      	b.n	8002e34 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8002e4e:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8002e50:	2500      	movs	r5, #0
 8002e52:	e7ef      	b.n	8002e34 <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 8002e54:	2320      	movs	r3, #32
 8002e56:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	e02e      	b.n	8002ebc <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e5e:	6822      	ldr	r2, [r4, #0]
 8002e60:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8002e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e68:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002e6a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e72:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	b17b      	cbz	r3, 8002e98 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e78:	9600      	str	r6, [sp, #0]
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	464a      	mov	r2, r9
 8002e7e:	4641      	mov	r1, r8
 8002e80:	4620      	mov	r0, r4
 8002e82:	f7ff ff41 	bl	8002d08 <UART_WaitOnFlagUntilTimeout>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d1e4      	bne.n	8002e54 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8002e8a:	2d00      	cmp	r5, #0
 8002e8c:	d0e7      	beq.n	8002e5e <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002e94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e96:	e7e8      	b.n	8002e6a <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e98:	9600      	str	r6, [sp, #0]
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2140      	movs	r1, #64	@ 0x40
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f7ff ff31 	bl	8002d08 <UART_WaitOnFlagUntilTimeout>
 8002ea6:	b918      	cbnz	r0, 8002eb0 <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002eae:	e005      	b.n	8002ebc <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002eb6:	2003      	movs	r0, #3
 8002eb8:	e000      	b.n	8002ebc <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 8002eba:	2002      	movs	r0, #2
}
 8002ebc:	b002      	add	sp, #8
 8002ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	e7fa      	b.n	8002ebc <HAL_UART_Transmit+0xce>

08002ec6 <memset>:
 8002ec6:	4402      	add	r2, r0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d100      	bne.n	8002ed0 <memset+0xa>
 8002ece:	4770      	bx	lr
 8002ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed4:	e7f9      	b.n	8002eca <memset+0x4>
	...

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	4d0d      	ldr	r5, [pc, #52]	@ (8002f10 <__libc_init_array+0x38>)
 8002edc:	4c0d      	ldr	r4, [pc, #52]	@ (8002f14 <__libc_init_array+0x3c>)
 8002ede:	1b64      	subs	r4, r4, r5
 8002ee0:	10a4      	asrs	r4, r4, #2
 8002ee2:	2600      	movs	r6, #0
 8002ee4:	42a6      	cmp	r6, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8002f18 <__libc_init_array+0x40>)
 8002eea:	4c0c      	ldr	r4, [pc, #48]	@ (8002f1c <__libc_init_array+0x44>)
 8002eec:	f000 f818 	bl	8002f20 <_init>
 8002ef0:	1b64      	subs	r4, r4, r5
 8002ef2:	10a4      	asrs	r4, r4, #2
 8002ef4:	2600      	movs	r6, #0
 8002ef6:	42a6      	cmp	r6, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f00:	4798      	blx	r3
 8002f02:	3601      	adds	r6, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0a:	4798      	blx	r3
 8002f0c:	3601      	adds	r6, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	08002f80 	.word	0x08002f80
 8002f14:	08002f80 	.word	0x08002f80
 8002f18:	08002f80 	.word	0x08002f80
 8002f1c:	08002f84 	.word	0x08002f84

08002f20 <_init>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr

08002f2c <_fini>:
 8002f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2e:	bf00      	nop
 8002f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f32:	bc08      	pop	{r3}
 8002f34:	469e      	mov	lr, r3
 8002f36:	4770      	bx	lr
