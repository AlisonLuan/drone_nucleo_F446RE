
drone_nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bcc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004d9c  08004d9c  00005d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e90  08004e90  000060a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e90  08004e90  00005e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e98  08004e98  000060a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e9c  08004e9c  00005e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08004ea0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200000a4  08004f44  000060a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08004f44  0000659c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b52  00000000  00000000  000060d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282b  00000000  00000000  0001cc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000cc55  00000000  00000000  0001f451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  0002c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c57  00000000  00000000  0002ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c99  00000000  00000000  0002db07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019914  00000000  00000000  000507a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4613  00000000  00000000  0006a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e6c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ed4  00000000  00000000  0013e70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001415e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004d84 	.word	0x08004d84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	08004d84 	.word	0x08004d84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <ShortDelay>:

static uint32_t last_button_time = 0;

/* Simple cycle-based delay used during I2C bus recovery */
static void ShortDelay(void)
{
 8000e28:	b082      	sub	sp, #8
	for (volatile uint32_t i = 0; i < SHORT_DELAY_CYCLES; ++i)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	9b01      	ldr	r3, [sp, #4]
 8000e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e34:	d207      	bcs.n	8000e46 <ShortDelay+0x1e>
	{
		__NOP();
 8000e36:	bf00      	nop
	for (volatile uint32_t i = 0; i < SHORT_DELAY_CYCLES; ++i)
 8000e38:	9b01      	ldr	r3, [sp, #4]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	9b01      	ldr	r3, [sp, #4]
 8000e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e44:	d3f7      	bcc.n	8000e36 <ShortDelay+0xe>
	}
}
 8000e46:	b002      	add	sp, #8
 8000e48:	4770      	bx	lr
	...

08000e4c <IMU_Filter>:
static MPU6050_Physical_t accel_lp = {0};
static MPU6050_Physical_t gyro_hp = {0};
static MPU6050_Physical_t gyro_prev_in = {0};

void IMU_Filter(const MPU6050_Physical_t *in, MPU6050_Physical_t *out)
{
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4605      	mov	r5, r0
 8000e50:	460c      	mov	r4, r1
	/* low-pass / high-pass smoothing using macros */
	out->accel_x = ACCEL_LP_ALPHA * (in->accel_x - imu_bias.accel_x) +
 8000e52:	4a40      	ldr	r2, [pc, #256]	@ (8000f54 <IMU_Filter+0x108>)
 8000e54:	edd0 7a00 	vldr	s15, [r0]
 8000e58:	ed92 7a00 	vldr	s14, [r2]
 8000e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e60:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8000f58 <IMU_Filter+0x10c>
 8000e64:	ee67 7aa6 	vmul.f32	s15, s15, s13
			(1.0f - ACCEL_LP_ALPHA) * accel_lp.accel_x;
 8000e68:	4b3c      	ldr	r3, [pc, #240]	@ (8000f5c <IMU_Filter+0x110>)
 8000e6a:	ed93 6a00 	vldr	s12, [r3]
 8000e6e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000f60 <IMU_Filter+0x114>
 8000e72:	ee26 6a07 	vmul.f32	s12, s12, s14
	out->accel_x = ACCEL_LP_ALPHA * (in->accel_x - imu_bias.accel_x) +
 8000e76:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000e7a:	edc1 7a00 	vstr	s15, [r1]
	out->accel_y = ACCEL_LP_ALPHA * (in->accel_y - imu_bias.accel_y) +
 8000e7e:	edd0 7a01 	vldr	s15, [r0, #4]
 8000e82:	ed92 6a01 	vldr	s12, [r2, #4]
 8000e86:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000e8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			(1.0f - ACCEL_LP_ALPHA) * accel_lp.accel_y;
 8000e8e:	ed93 6a01 	vldr	s12, [r3, #4]
 8000e92:	ee26 6a07 	vmul.f32	s12, s12, s14
	out->accel_y = ACCEL_LP_ALPHA * (in->accel_y - imu_bias.accel_y) +
 8000e96:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000e9a:	edc1 7a01 	vstr	s15, [r1, #4]
	out->accel_z = ACCEL_LP_ALPHA * (in->accel_z - imu_bias.accel_z) +
 8000e9e:	edd0 7a02 	vldr	s15, [r0, #8]
 8000ea2:	ed92 6a02 	vldr	s12, [r2, #8]
 8000ea6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000eaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
			(1.0f - ACCEL_LP_ALPHA) * accel_lp.accel_z;
 8000eae:	edd3 6a02 	vldr	s13, [r3, #8]
 8000eb2:	ee66 6a87 	vmul.f32	s13, s13, s14
	out->accel_z = ACCEL_LP_ALPHA * (in->accel_z - imu_bias.accel_z) +
 8000eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000eba:	edc1 7a02 	vstr	s15, [r1, #8]
	accel_lp = *out;
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	460e      	mov	r6, r1
 8000ec2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ec4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000ec8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8000ecc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

	out->gyro_x = GYRO_HP_ALPHA * (gyro_hp.gyro_x + in->gyro_x - gyro_prev_in.gyro_x);
 8000ed0:	f8df c094 	ldr.w	ip, [pc, #148]	@ 8000f68 <IMU_Filter+0x11c>
 8000ed4:	eddc 7a03 	vldr	s15, [ip, #12]
 8000ed8:	edd5 6a03 	vldr	s13, [r5, #12]
 8000edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <IMU_Filter+0x118>)
 8000ee2:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ee6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eee:	edc4 7a03 	vstr	s15, [r4, #12]
	out->gyro_y = GYRO_HP_ALPHA * (gyro_hp.gyro_y + in->gyro_y - gyro_prev_in.gyro_y);
 8000ef2:	eddc 7a04 	vldr	s15, [ip, #16]
 8000ef6:	edd5 6a04 	vldr	s13, [r5, #16]
 8000efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000efe:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0a:	edc4 7a04 	vstr	s15, [r4, #16]
	out->gyro_z = GYRO_HP_ALPHA * (gyro_hp.gyro_z + in->gyro_z - gyro_prev_in.gyro_z);
 8000f0e:	eddc 7a05 	vldr	s15, [ip, #20]
 8000f12:	edd5 6a05 	vldr	s13, [r5, #20]
 8000f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000f1a:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f26:	edc4 7a05 	vstr	s15, [r4, #20]

	gyro_prev_in = *in;
 8000f2a:	469e      	mov	lr, r3
 8000f2c:	462e      	mov	r6, r5
 8000f2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f30:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000f34:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8000f38:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
	gyro_hp     = *out;
 8000f3c:	46a6      	mov	lr, r4
 8000f3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000f42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000f46:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000f4a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	out->temp   = in->temp;
 8000f4e:	69ab      	ldr	r3, [r5, #24]
 8000f50:	61a3      	str	r3, [r4, #24]
}
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
 8000f54:	20000270 	.word	0x20000270
 8000f58:	3e4ccccd 	.word	0x3e4ccccd
 8000f5c:	200000f8 	.word	0x200000f8
 8000f60:	3f4ccccd 	.word	0x3f4ccccd
 8000f64:	200000c0 	.word	0x200000c0
 8000f68:	200000dc 	.word	0x200000dc

08000f6c <Debug_Send>:

void Debug_Send(const char *msg)
{
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000f70:	f7ff f94e 	bl	8000210 <strlen>
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	b282      	uxth	r2, r0
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	4801      	ldr	r0, [pc, #4]	@ (8000f84 <Debug_Send+0x18>)
 8000f7e:	f003 f8e4 	bl	800414a <HAL_UART_Transmit>
}
 8000f82:	bd10      	pop	{r4, pc}
 8000f84:	20000310 	.word	0x20000310

08000f88 <IMU_UpdateAverage>:

void IMU_UpdateAverage(const MPU6050_Physical_t *sample)
{
 8000f88:	b530      	push	{r4, r5, lr}
 8000f8a:	4684      	mov	ip, r0
	if (imu_count < IMU_WINDOW_SIZE)
 8000f8c:	4b83      	ldr	r3, [pc, #524]	@ (800119c <IMU_UpdateAverage+0x214>)
 8000f8e:	f893 e000 	ldrb.w	lr, [r3]
 8000f92:	f1be 0f09 	cmp.w	lr, #9
 8000f96:	f200 808c 	bhi.w	80010b2 <IMU_UpdateAverage+0x12a>
	{
		imu_window[imu_index] = *sample;
 8000f9a:	4b81      	ldr	r3, [pc, #516]	@ (80011a0 <IMU_UpdateAverage+0x218>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000fa2:	4c80      	ldr	r4, [pc, #512]	@ (80011a4 <IMU_UpdateAverage+0x21c>)
 8000fa4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000fa8:	4605      	mov	r5, r0
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		imu_sum.accel_x += sample->accel_x;
 8000fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80011a8 <IMU_UpdateAverage+0x220>)
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	ed9c 7a00 	vldr	s14, [ip]
 8000fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc4:	edc3 7a00 	vstr	s15, [r3]
		imu_sum.accel_y += sample->accel_y;
 8000fc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fcc:	ed9c 7a01 	vldr	s14, [ip, #4]
 8000fd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fd4:	edc3 7a01 	vstr	s15, [r3, #4]
		imu_sum.accel_z += sample->accel_z;
 8000fd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fdc:	ed9c 7a02 	vldr	s14, [ip, #8]
 8000fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fe4:	edc3 7a02 	vstr	s15, [r3, #8]
		imu_sum.gyro_x  += sample->gyro_x;
 8000fe8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fec:	ed9c 7a03 	vldr	s14, [ip, #12]
 8000ff0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ff4:	edc3 7a03 	vstr	s15, [r3, #12]
		imu_sum.gyro_y  += sample->gyro_y;
 8000ff8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ffc:	ed9c 7a04 	vldr	s14, [ip, #16]
 8001000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001004:	edc3 7a04 	vstr	s15, [r3, #16]
		imu_sum.gyro_z  += sample->gyro_z;
 8001008:	edd3 7a05 	vldr	s15, [r3, #20]
 800100c:	ed9c 7a05 	vldr	s14, [ip, #20]
 8001010:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001014:	edc3 7a05 	vstr	s15, [r3, #20]
		imu_sum.temp    += sample->temp;
 8001018:	edd3 7a06 	vldr	s15, [r3, #24]
 800101c:	ed9c 7a06 	vldr	s14, [ip, #24]
 8001020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001024:	edc3 7a06 	vstr	s15, [r3, #24]
		imu_count++;
 8001028:	f10e 0e01 	add.w	lr, lr, #1
 800102c:	4b5b      	ldr	r3, [pc, #364]	@ (800119c <IMU_UpdateAverage+0x214>)
 800102e:	f883 e000 	strb.w	lr, [r3]
		imu_sum.gyro_y  += sample->gyro_y;
		imu_sum.gyro_z  += sample->gyro_z;
		imu_sum.temp    += sample->temp;
	}

	imu_index = (imu_index + 1) % IMU_WINDOW_SIZE;
 8001032:	485b      	ldr	r0, [pc, #364]	@ (80011a0 <IMU_UpdateAverage+0x218>)
 8001034:	7803      	ldrb	r3, [r0, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a5c      	ldr	r2, [pc, #368]	@ (80011ac <IMU_UpdateAverage+0x224>)
 800103a:	fb82 1203 	smull	r1, r2, r2, r3
 800103e:	f002 01fc 	and.w	r1, r2, #252	@ 0xfc
 8001042:	eb01 02a2 	add.w	r2, r1, r2, asr #2
 8001046:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800104a:	7003      	strb	r3, [r0, #0]
	float div = (float)imu_count;
 800104c:	4b53      	ldr	r3, [pc, #332]	@ (800119c <IMU_UpdateAverage+0x214>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7a67 	vcvt.f32.u32	s15, s15

	imu_avg.accel_x = imu_sum.accel_x / div;
 8001058:	4b55      	ldr	r3, [pc, #340]	@ (80011b0 <IMU_UpdateAverage+0x228>)
 800105a:	4a53      	ldr	r2, [pc, #332]	@ (80011a8 <IMU_UpdateAverage+0x220>)
 800105c:	edd2 6a00 	vldr	s13, [r2]
 8001060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001064:	ed83 7a00 	vstr	s14, [r3]
	imu_avg.accel_y = imu_sum.accel_y / div;
 8001068:	edd2 6a01 	vldr	s13, [r2, #4]
 800106c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001070:	ed83 7a01 	vstr	s14, [r3, #4]
	imu_avg.accel_z = imu_sum.accel_z / div;
 8001074:	edd2 6a02 	vldr	s13, [r2, #8]
 8001078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800107c:	ed83 7a02 	vstr	s14, [r3, #8]
	imu_avg.gyro_x  = imu_sum.gyro_x  / div;
 8001080:	edd2 6a03 	vldr	s13, [r2, #12]
 8001084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001088:	ed83 7a03 	vstr	s14, [r3, #12]
	imu_avg.gyro_y  = imu_sum.gyro_y  / div;
 800108c:	edd2 6a04 	vldr	s13, [r2, #16]
 8001090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001094:	ed83 7a04 	vstr	s14, [r3, #16]
	imu_avg.gyro_z  = imu_sum.gyro_z  / div;
 8001098:	edd2 6a05 	vldr	s13, [r2, #20]
 800109c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010a0:	ed83 7a05 	vstr	s14, [r3, #20]
	imu_avg.temp    = imu_sum.temp    / div;
 80010a4:	edd2 6a06 	vldr	s13, [r2, #24]
 80010a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010ac:	ed83 7a06 	vstr	s14, [r3, #24]
}
 80010b0:	bd30      	pop	{r4, r5, pc}
		imu_sum.accel_x -= imu_window[imu_index].accel_x;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	@ (80011a0 <IMU_UpdateAverage+0x218>)
 80010b4:	7819      	ldrb	r1, [r3, #0]
 80010b6:	4c3c      	ldr	r4, [pc, #240]	@ (80011a8 <IMU_UpdateAverage+0x220>)
 80010b8:	4b3a      	ldr	r3, [pc, #232]	@ (80011a4 <IMU_UpdateAverage+0x21c>)
 80010ba:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80010be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80010c2:	edd4 4a00 	vldr	s9, [r4]
 80010c6:	edd2 7a00 	vldr	s15, [r2]
 80010ca:	ee74 4ae7 	vsub.f32	s9, s9, s15
 80010ce:	edc4 4a00 	vstr	s9, [r4]
		imu_sum.accel_y -= imu_window[imu_index].accel_y;
 80010d2:	ed94 5a01 	vldr	s10, [r4, #4]
 80010d6:	edd2 7a01 	vldr	s15, [r2, #4]
 80010da:	ee35 5a67 	vsub.f32	s10, s10, s15
 80010de:	ed84 5a01 	vstr	s10, [r4, #4]
		imu_sum.accel_z -= imu_window[imu_index].accel_z;
 80010e2:	edd4 5a02 	vldr	s11, [r4, #8]
 80010e6:	edd2 7a02 	vldr	s15, [r2, #8]
 80010ea:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80010ee:	edc4 5a02 	vstr	s11, [r4, #8]
		imu_sum.gyro_x  -= imu_window[imu_index].gyro_x;
 80010f2:	ed94 6a03 	vldr	s12, [r4, #12]
 80010f6:	edd2 7a03 	vldr	s15, [r2, #12]
 80010fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80010fe:	ed84 6a03 	vstr	s12, [r4, #12]
		imu_sum.gyro_y  -= imu_window[imu_index].gyro_y;
 8001102:	edd4 6a04 	vldr	s13, [r4, #16]
 8001106:	edd2 7a04 	vldr	s15, [r2, #16]
 800110a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800110e:	edc4 6a04 	vstr	s13, [r4, #16]
		imu_sum.gyro_z  -= imu_window[imu_index].gyro_z;
 8001112:	ed94 7a05 	vldr	s14, [r4, #20]
 8001116:	edd2 7a05 	vldr	s15, [r2, #20]
 800111a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800111e:	ed84 7a05 	vstr	s14, [r4, #20]
		imu_sum.temp    -= imu_window[imu_index].temp;
 8001122:	edd4 7a06 	vldr	s15, [r4, #24]
 8001126:	ed92 4a06 	vldr	s8, [r2, #24]
 800112a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800112e:	edc4 7a06 	vstr	s15, [r4, #24]
		imu_window[imu_index] = *sample;
 8001132:	4696      	mov	lr, r2
 8001134:	4605      	mov	r5, r0
 8001136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001138:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800113c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001140:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
		imu_sum.accel_x += sample->accel_x;
 8001144:	ed9c 4a00 	vldr	s8, [ip]
 8001148:	ee74 4a24 	vadd.f32	s9, s8, s9
 800114c:	edc4 4a00 	vstr	s9, [r4]
		imu_sum.accel_y += sample->accel_y;
 8001150:	eddc 4a01 	vldr	s9, [ip, #4]
 8001154:	ee34 5a85 	vadd.f32	s10, s9, s10
 8001158:	ed84 5a01 	vstr	s10, [r4, #4]
		imu_sum.accel_z += sample->accel_z;
 800115c:	ed9c 5a02 	vldr	s10, [ip, #8]
 8001160:	ee75 5a25 	vadd.f32	s11, s10, s11
 8001164:	edc4 5a02 	vstr	s11, [r4, #8]
		imu_sum.gyro_x  += sample->gyro_x;
 8001168:	eddc 5a03 	vldr	s11, [ip, #12]
 800116c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8001170:	ed84 6a03 	vstr	s12, [r4, #12]
		imu_sum.gyro_y  += sample->gyro_y;
 8001174:	ed9c 6a04 	vldr	s12, [ip, #16]
 8001178:	ee76 6a26 	vadd.f32	s13, s12, s13
 800117c:	edc4 6a04 	vstr	s13, [r4, #16]
		imu_sum.gyro_z  += sample->gyro_z;
 8001180:	eddc 6a05 	vldr	s13, [ip, #20]
 8001184:	ee36 7a87 	vadd.f32	s14, s13, s14
 8001188:	ed84 7a05 	vstr	s14, [r4, #20]
		imu_sum.temp    += sample->temp;
 800118c:	ed9c 7a06 	vldr	s14, [ip, #24]
 8001190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001194:	edc4 7a06 	vstr	s15, [r4, #24]
 8001198:	e74b      	b.n	8001032 <IMU_UpdateAverage+0xaa>
 800119a:	bf00      	nop
 800119c:	20000137 	.word	0x20000137
 80011a0:	20000138 	.word	0x20000138
 80011a4:	20000158 	.word	0x20000158
 80011a8:	2000013c 	.word	0x2000013c
 80011ac:	66666667 	.word	0x66666667
 80011b0:	2000028c 	.word	0x2000028c

080011b4 <PID_Update>:

float PID_Update(PID_t *pid, float error, float dt)
{
	pid->integral += error * dt;
 80011b4:	ee60 7a20 	vmul.f32	s15, s0, s1
 80011b8:	ed90 7a04 	vldr	s14, [r0, #16]
 80011bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c0:	edc0 7a04 	vstr	s15, [r0, #16]
	float derivative = (error - pid->last_err) / dt;
 80011c4:	edd0 6a03 	vldr	s13, [r0, #12]
 80011c8:	ee70 6a66 	vsub.f32	s13, s0, s13
 80011cc:	ee86 7aa0 	vdiv.f32	s14, s13, s1
	pid->last_err = error;
 80011d0:	ed80 0a03 	vstr	s0, [r0, #12]
	return pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 80011d4:	edd0 6a00 	vldr	s13, [r0]
 80011d8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80011dc:	edd0 6a01 	vldr	s13, [r0, #4]
 80011e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80011e8:	edd0 7a02 	vldr	s15, [r0, #8]
 80011ec:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80011f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80011f4:	4770      	bx	lr
	...

080011f8 <SoftStartPWM>:
void SoftStartPWM(uint32_t *current, const uint32_t target)
{
	uint32_t desired = target;

	/* Optional branch to ramp down smoothly when control is disabled */
	if (!control_enabled)
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <SoftStartPWM+0x6c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b1d3      	cbz	r3, 8001234 <SoftStartPWM+0x3c>
		memset(&accel_lp, 0, sizeof(accel_lp));
		memset(&gyro_hp,  0, sizeof(gyro_hp));
		desired = 0;
	}

	int32_t error = (int32_t)desired - (int32_t)(*current);
 80011fe:	6802      	ldr	r2, [r0, #0]
 8001200:	1a8b      	subs	r3, r1, r2
 8001202:	ee07 3a90 	vmov	s15, r3
	int32_t step = (int32_t)(PWM_RAMP_KP * error);
 8001206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001268 <SoftStartPWM+0x70>
 800120e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001216:	ee17 3a90 	vmov	r3, s15

	if (step > PWM_MAX_STEP) step = PWM_MAX_STEP;
	else if (step < -PWM_MAX_STEP) step = -PWM_MAX_STEP;
 800121a:	ea43 7ce3 	orr.w	ip, r3, r3, asr #31

	*current += step;
 800121e:	f1bc 0f01 	cmp.w	ip, #1
 8001222:	bfd4      	ite	le
 8001224:	4462      	addle	r2, ip
 8001226:	3201      	addgt	r2, #1
 8001228:	6002      	str	r2, [r0, #0]

	if ((step > 0 && *current > desired) || (step < 0 && *current < desired))
 800122a:	2b00      	cmp	r3, #0
 800122c:	dd14      	ble.n	8001258 <SoftStartPWM+0x60>
 800122e:	428a      	cmp	r2, r1
 8001230:	d816      	bhi.n	8001260 <SoftStartPWM+0x68>
 8001232:	4770      	bx	lr
		memset(&accel_lp, 0, sizeof(accel_lp));
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <SoftStartPWM+0x74>)
 8001236:	2100      	movs	r1, #0
 8001238:	6019      	str	r1, [r3, #0]
 800123a:	6059      	str	r1, [r3, #4]
 800123c:	6099      	str	r1, [r3, #8]
 800123e:	60d9      	str	r1, [r3, #12]
 8001240:	6119      	str	r1, [r3, #16]
 8001242:	6159      	str	r1, [r3, #20]
 8001244:	6199      	str	r1, [r3, #24]
		memset(&gyro_hp,  0, sizeof(gyro_hp));
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <SoftStartPWM+0x78>)
 8001248:	6019      	str	r1, [r3, #0]
 800124a:	6059      	str	r1, [r3, #4]
 800124c:	6099      	str	r1, [r3, #8]
 800124e:	60d9      	str	r1, [r3, #12]
 8001250:	6119      	str	r1, [r3, #16]
 8001252:	6159      	str	r1, [r3, #20]
 8001254:	6199      	str	r1, [r3, #24]
		desired = 0;
 8001256:	e7d2      	b.n	80011fe <SoftStartPWM+0x6>
	if ((step > 0 && *current > desired) || (step < 0 && *current < desired))
 8001258:	2b00      	cmp	r3, #0
 800125a:	da02      	bge.n	8001262 <SoftStartPWM+0x6a>
 800125c:	428a      	cmp	r2, r1
 800125e:	d200      	bcs.n	8001262 <SoftStartPWM+0x6a>
	{
		*current = desired;
 8001260:	6001      	str	r1, [r0, #0]
	}
}
 8001262:	4770      	bx	lr
 8001264:	20000136 	.word	0x20000136
 8001268:	3e4ccccd 	.word	0x3e4ccccd
 800126c:	200000f8 	.word	0x200000f8
 8001270:	200000dc 	.word	0x200000dc

08001274 <UpdatePWM>:

void UpdatePWM(void)
{
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SoftStartPWM((uint32_t*)&PWM_D9, PWM_D9_Target);
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <UpdatePWM+0x4c>)
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	4f12      	ldr	r7, [pc, #72]	@ (80012c4 <UpdatePWM+0x50>)
 800127c:	4638      	mov	r0, r7
 800127e:	f7ff ffbb 	bl	80011f8 <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D6, PWM_D6_Target);
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <UpdatePWM+0x54>)
 8001284:	6819      	ldr	r1, [r3, #0]
 8001286:	4e11      	ldr	r6, [pc, #68]	@ (80012cc <UpdatePWM+0x58>)
 8001288:	4630      	mov	r0, r6
 800128a:	f7ff ffb5 	bl	80011f8 <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D5, PWM_D5_Target);
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <UpdatePWM+0x5c>)
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	4d10      	ldr	r5, [pc, #64]	@ (80012d4 <UpdatePWM+0x60>)
 8001294:	4628      	mov	r0, r5
 8001296:	f7ff ffaf 	bl	80011f8 <SoftStartPWM>
	SoftStartPWM((uint32_t*)&PWM_D3, PWM_D3_Target);
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <UpdatePWM+0x64>)
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	4c0f      	ldr	r4, [pc, #60]	@ (80012dc <UpdatePWM+0x68>)
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7ff ffa9 	bl	80011f8 <SoftStartPWM>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_D9);
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <UpdatePWM+0x6c>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	6393      	str	r3, [r2, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM_D6);
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <UpdatePWM+0x70>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6831      	ldr	r1, [r6, #0]
 80012b4:	63d9      	str	r1, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_D5);
 80012b6:	6829      	ldr	r1, [r5, #0]
 80012b8:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_D3);
 80012ba:	6822      	ldr	r2, [r4, #0]
 80012bc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c0:	200002fc 	.word	0x200002fc
 80012c4:	2000030c 	.word	0x2000030c
 80012c8:	200002f8 	.word	0x200002f8
 80012cc:	20000308 	.word	0x20000308
 80012d0:	200002f4 	.word	0x200002f4
 80012d4:	20000304 	.word	0x20000304
 80012d8:	200002f0 	.word	0x200002f0
 80012dc:	20000300 	.word	0x20000300
 80012e0:	20000358 	.word	0x20000358
 80012e4:	200003a0 	.word	0x200003a0

080012e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin)
 80012e8:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 80012ec:	d000      	beq.n	80012f0 <HAL_GPIO_EXTI_Callback+0x8>
 80012ee:	4770      	bx	lr
{
 80012f0:	b508      	push	{r3, lr}
	{
		uint32_t now = HAL_GetTick();
 80012f2:	f000 ffb3 	bl	800225c <HAL_GetTick>
		if (now - last_button_time > BUTTON_DEBOUNCE_MS)
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_GPIO_EXTI_Callback+0x28>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1ac3      	subs	r3, r0, r3
 80012fc:	2b32      	cmp	r3, #50	@ 0x32
 80012fe:	d906      	bls.n	800130e <HAL_GPIO_EXTI_Callback+0x26>
		{
			button_pressed = 1;
 8001300:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
			button_press_time = now;
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <HAL_GPIO_EXTI_Callback+0x30>)
 8001308:	6018      	str	r0, [r3, #0]
			last_button_time = now;
 800130a:	4b01      	ldr	r3, [pc, #4]	@ (8001310 <HAL_GPIO_EXTI_Callback+0x28>)
 800130c:	6018      	str	r0, [r3, #0]
		}
	}
}
 800130e:	bd08      	pop	{r3, pc}
 8001310:	20000114 	.word	0x20000114
 8001314:	20000134 	.word	0x20000134
 8001318:	20000130 	.word	0x20000130

0800131c <I2C_ResetBus>:

void I2C_ResetBus(void)
{
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	b087      	sub	sp, #28
	HAL_I2C_DeInit(&hi2c1);
 8001320:	4822      	ldr	r0, [pc, #136]	@ (80013ac <I2C_ResetBus+0x90>)
 8001322:	f001 fd19 	bl	8002d58 <HAL_I2C_DeInit>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	2300      	movs	r3, #0
 8001328:	9304      	str	r3, [sp, #16]
 800132a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800132c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001330:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001332:	2311      	movs	r3, #17
 8001334:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	a901      	add	r1, sp, #4
 800133c:	481c      	ldr	r0, [pc, #112]	@ (80013b0 <I2C_ResetBus+0x94>)
 800133e:	f001 f811 	bl	8002364 <HAL_GPIO_Init>
 8001342:	2409      	movs	r4, #9

	for (int i = 0; i < 9; i++)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001344:	4e1a      	ldr	r6, [pc, #104]	@ (80013b0 <I2C_ResetBus+0x94>)
 8001346:	2701      	movs	r7, #1
 8001348:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800134c:	463a      	mov	r2, r7
 800134e:	4629      	mov	r1, r5
 8001350:	4630      	mov	r0, r6
 8001352:	f001 f9a5 	bl	80026a0 <HAL_GPIO_WritePin>
		ShortDelay();
 8001356:	f7ff fd67 	bl	8000e28 <ShortDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	4629      	mov	r1, r5
 800135e:	4630      	mov	r0, r6
 8001360:	f001 f99e 	bl	80026a0 <HAL_GPIO_WritePin>
		ShortDelay();
 8001364:	f7ff fd60 	bl	8000e28 <ShortDelay>
	for (int i = 0; i < 9; i++)
 8001368:	3c01      	subs	r4, #1
 800136a:	d1ef      	bne.n	800134c <I2C_ResetBus+0x30>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001372:	480f      	ldr	r0, [pc, #60]	@ (80013b0 <I2C_ResetBus+0x94>)
 8001374:	f001 f994 	bl	80026a0 <HAL_GPIO_WritePin>
	ShortDelay();
 8001378:	f7ff fd56 	bl	8000e28 <ShortDelay>

	hi2c1.Instance = I2C1;
 800137c:	480b      	ldr	r0, [pc, #44]	@ (80013ac <I2C_ResetBus+0x90>)
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <I2C_ResetBus+0x98>)
 8001380:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <I2C_ResetBus+0x9c>)
 8001384:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001386:	2300      	movs	r3, #0
 8001388:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800138a:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001390:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001392:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001394:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001396:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001398:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800139a:	f001 fc1b 	bl	8002bd4 <HAL_I2C_Init>
 800139e:	b908      	cbnz	r0, 80013a4 <I2C_ResetBus+0x88>
	{
		Error_Handler();
	}
}
 80013a0:	b007      	add	sp, #28
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Error_Handler();
 80013a4:	f000 f830 	bl	8001408 <Error_Handler>
}
 80013a8:	e7fa      	b.n	80013a0 <I2C_ResetBus+0x84>
 80013aa:	bf00      	nop
 80013ac:	200003e8 	.word	0x200003e8
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40005400 	.word	0x40005400
 80013b8:	000186a0 	.word	0x000186a0

080013bc <CalibrateIMU>:
void CalibrateIMU(I2C_HandleTypeDef *hi2c,
		MPU6050_Physical_t *sum,
		MPU6050_Physical_t window[],
		uint8_t *idx,
		uint8_t *count)
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	b08c      	sub	sp, #48	@ 0x30
 80013c0:	4604      	mov	r4, r0
 80013c2:	460a      	mov	r2, r1
 80013c4:	4619      	mov	r1, r3
	const int SAMPLES = 200;
	memset(sum, 0, sizeof(*sum));
 80013c6:	2300      	movs	r3, #0
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	6053      	str	r3, [r2, #4]
 80013cc:	6093      	str	r3, [r2, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
 80013d0:	6113      	str	r3, [r2, #16]
 80013d2:	6153      	str	r3, [r2, #20]
 80013d4:	6193      	str	r3, [r2, #24]
	*idx = *count = 0;
 80013d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80013d8:	7013      	strb	r3, [r2, #0]
 80013da:	700b      	strb	r3, [r1, #0]
 80013dc:	25c8      	movs	r5, #200	@ 0xc8
		MPU6050_Data_t raw;
		MPU6050_Physical_t phys;
		while (MPU6050_ReadAll(hi2c, &raw) != HAL_OK);
		MPU6050_ConvertToPhysical(&raw, &phys);
		IMU_UpdateAverage(&phys);
		HAL_Delay(5);
 80013de:	2605      	movs	r6, #5
		while (MPU6050_ReadAll(hi2c, &raw) != HAL_OK);
 80013e0:	a901      	add	r1, sp, #4
 80013e2:	4620      	mov	r0, r4
 80013e4:	f000 fc41 	bl	8001c6a <MPU6050_ReadAll>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d1f9      	bne.n	80013e0 <CalibrateIMU+0x24>
		MPU6050_ConvertToPhysical(&raw, &phys);
 80013ec:	a905      	add	r1, sp, #20
 80013ee:	a801      	add	r0, sp, #4
 80013f0:	f000 fc80 	bl	8001cf4 <MPU6050_ConvertToPhysical>
		IMU_UpdateAverage(&phys);
 80013f4:	a805      	add	r0, sp, #20
 80013f6:	f7ff fdc7 	bl	8000f88 <IMU_UpdateAverage>
		HAL_Delay(5);
 80013fa:	4630      	mov	r0, r6
 80013fc:	f000 ff34 	bl	8002268 <HAL_Delay>
	for (int i = 0; i < SAMPLES; ++i) {
 8001400:	3d01      	subs	r5, #1
 8001402:	d1ed      	bne.n	80013e0 <CalibrateIMU+0x24>
	}
	/* now imu_avg holds bias; caller may store it */
}
 8001404:	b00c      	add	sp, #48	@ 0x30
 8001406:	bd70      	pop	{r4, r5, r6, pc}

08001408 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001408:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	Debug_Send("Error_Handler\r\n");
 800140a:	4802      	ldr	r0, [pc, #8]	@ (8001414 <Error_Handler+0xc>)
 800140c:	f7ff fdae 	bl	8000f6c <Debug_Send>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
	__disable_irq();
	while (1)
 8001412:	e7fe      	b.n	8001412 <Error_Handler+0xa>
 8001414:	08004d9c 	.word	0x08004d9c

08001418 <SystemClock_Config>:
{
 8001418:	b500      	push	{lr}
 800141a:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141c:	2234      	movs	r2, #52	@ 0x34
 800141e:	2100      	movs	r1, #0
 8001420:	a807      	add	r0, sp, #28
 8001422:	f002 ff35 	bl	8004290 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001426:	2300      	movs	r3, #0
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	9303      	str	r3, [sp, #12]
 800142c:	9304      	str	r3, [sp, #16]
 800142e:	9305      	str	r3, [sp, #20]
 8001430:	9306      	str	r3, [sp, #24]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <SystemClock_Config+0x9c>)
 8001436:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001438:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800143c:	6411      	str	r1, [r2, #64]	@ 0x40
 800143e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001440:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001444:	9200      	str	r2, [sp, #0]
 8001446:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	491b      	ldr	r1, [pc, #108]	@ (80014b8 <SystemClock_Config+0xa0>)
 800144c:	680a      	ldr	r2, [r1, #0]
 800144e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001456:	600a      	str	r2, [r1, #0]
 8001458:	680a      	ldr	r2, [r1, #0]
 800145a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800145e:	9201      	str	r2, [sp, #4]
 8001460:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001462:	2202      	movs	r2, #2
 8001464:	9207      	str	r2, [sp, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001466:	2101      	movs	r1, #1
 8001468:	910a      	str	r1, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146a:	2110      	movs	r1, #16
 800146c:	910b      	str	r1, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	920d      	str	r2, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001470:	930e      	str	r3, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001472:	910f      	str	r1, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001474:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001478:	9310      	str	r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800147a:	2304      	movs	r3, #4
 800147c:	9311      	str	r3, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800147e:	9212      	str	r2, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001480:	9213      	str	r2, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001482:	a807      	add	r0, sp, #28
 8001484:	f002 f85a 	bl	800353c <HAL_RCC_OscConfig>
 8001488:	b980      	cbnz	r0, 80014ac <SystemClock_Config+0x94>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148a:	230f      	movs	r3, #15
 800148c:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148e:	2102      	movs	r1, #2
 8001490:	9103      	str	r1, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001496:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800149a:	9205      	str	r2, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149c:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149e:	a802      	add	r0, sp, #8
 80014a0:	f001 feb2 	bl	8003208 <HAL_RCC_ClockConfig>
 80014a4:	b920      	cbnz	r0, 80014b0 <SystemClock_Config+0x98>
}
 80014a6:	b015      	add	sp, #84	@ 0x54
 80014a8:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80014ac:	f7ff ffac 	bl	8001408 <Error_Handler>
		Error_Handler();
 80014b0:	f7ff ffaa 	bl	8001408 <Error_Handler>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000
 80014bc:	00000000 	.word	0x00000000

080014c0 <main>:
{
 80014c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c4:	ed2d 8b04 	vpush	{d8-d9}
 80014c8:	b092      	sub	sp, #72	@ 0x48
	HAL_Init();
 80014ca:	f000 fea1 	bl	8002210 <HAL_Init>
	SystemClock_Config();
 80014ce:	f7ff ffa3 	bl	8001418 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	2400      	movs	r4, #0
 80014d4:	9408      	str	r4, [sp, #32]
 80014d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80014d8:	940a      	str	r4, [sp, #40]	@ 0x28
 80014da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80014dc:	940c      	str	r4, [sp, #48]	@ 0x30
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	9402      	str	r4, [sp, #8]
 80014e0:	4ba8      	ldr	r3, [pc, #672]	@ (8001784 <main+0x2c4>)
 80014e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014e4:	f042 0204 	orr.w	r2, r2, #4
 80014e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80014ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ec:	f002 0204 	and.w	r2, r2, #4
 80014f0:	9202      	str	r2, [sp, #8]
 80014f2:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014f4:	9403      	str	r4, [sp, #12]
 80014f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80014fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001500:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001504:	9203      	str	r2, [sp, #12]
 8001506:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	9404      	str	r4, [sp, #16]
 800150a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	631a      	str	r2, [r3, #48]	@ 0x30
 8001512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001514:	f002 0201 	and.w	r2, r2, #1
 8001518:	9204      	str	r2, [sp, #16]
 800151a:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	9405      	str	r4, [sp, #20]
 800151e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001520:	f042 0202 	orr.w	r2, r2, #2
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	9305      	str	r3, [sp, #20]
 800152e:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001530:	4d95      	ldr	r5, [pc, #596]	@ (8001788 <main+0x2c8>)
 8001532:	4622      	mov	r2, r4
 8001534:	2120      	movs	r1, #32
 8001536:	4628      	mov	r0, r5
 8001538:	f001 f8b2 	bl	80026a0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 800153c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001540:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001542:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001546:	9309      	str	r3, [sp, #36]	@ 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	940a      	str	r4, [sp, #40]	@ 0x28
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154a:	a908      	add	r1, sp, #32
 800154c:	488f      	ldr	r0, [pc, #572]	@ (800178c <main+0x2cc>)
 800154e:	f000 ff09 	bl	8002364 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 8001552:	2320      	movs	r3, #32
 8001554:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	9309      	str	r3, [sp, #36]	@ 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	940a      	str	r4, [sp, #40]	@ 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	940b      	str	r4, [sp, #44]	@ 0x2c
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800155e:	a908      	add	r1, sp, #32
 8001560:	4628      	mov	r0, r5
 8001562:	f000 feff 	bl	8002364 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001566:	4622      	mov	r2, r4
 8001568:	4621      	mov	r1, r4
 800156a:	2028      	movs	r0, #40	@ 0x28
 800156c:	f000 fea2 	bl	80022b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001570:	2028      	movs	r0, #40	@ 0x28
 8001572:	f000 fed5 	bl	8002320 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8001576:	4886      	ldr	r0, [pc, #536]	@ (8001790 <main+0x2d0>)
 8001578:	4b86      	ldr	r3, [pc, #536]	@ (8001794 <main+0x2d4>)
 800157a:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 800157c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001580:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001584:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001586:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001588:	230c      	movs	r3, #12
 800158a:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158c:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800158e:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001590:	f002 fdab 	bl	80040ea <HAL_UART_Init>
 8001594:	2800      	cmp	r0, #0
 8001596:	f040 8140 	bne.w	800181a <main+0x35a>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159a:	2300      	movs	r3, #0
 800159c:	9306      	str	r3, [sp, #24]
 800159e:	9307      	str	r3, [sp, #28]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80015a0:	9308      	str	r3, [sp, #32]
 80015a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80015a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80015a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80015a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80015aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80015ac:	930e      	str	r3, [sp, #56]	@ 0x38
	htim2.Instance = TIM2;
 80015ae:	487a      	ldr	r0, [pc, #488]	@ (8001798 <main+0x2d8>)
 80015b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015b4:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 0;
 80015b6:	6043      	str	r3, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 4199;
 80015ba:	f241 0267 	movw	r2, #4199	@ 0x1067
 80015be:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015c4:	f002 fb04 	bl	8003bd0 <HAL_TIM_PWM_Init>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	f040 8128 	bne.w	800181e <main+0x35e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	9306      	str	r3, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	9307      	str	r3, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d4:	a906      	add	r1, sp, #24
 80015d6:	4870      	ldr	r0, [pc, #448]	@ (8001798 <main+0x2d8>)
 80015d8:	f002 fc50 	bl	8003e7c <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	2800      	cmp	r0, #0
 80015de:	f040 8120 	bne.w	8001822 <main+0x362>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e2:	2360      	movs	r3, #96	@ 0x60
 80015e4:	9308      	str	r3, [sp, #32]
	sConfigOC.Pulse = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	9309      	str	r3, [sp, #36]	@ 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ea:	930a      	str	r3, [sp, #40]	@ 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ec:	930c      	str	r3, [sp, #48]	@ 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ee:	2204      	movs	r2, #4
 80015f0:	a908      	add	r1, sp, #32
 80015f2:	4869      	ldr	r0, [pc, #420]	@ (8001798 <main+0x2d8>)
 80015f4:	f002 fb4a 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	f040 8114 	bne.w	8001826 <main+0x366>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015fe:	2208      	movs	r2, #8
 8001600:	a908      	add	r1, sp, #32
 8001602:	4865      	ldr	r0, [pc, #404]	@ (8001798 <main+0x2d8>)
 8001604:	f002 fb42 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8001608:	2800      	cmp	r0, #0
 800160a:	f040 810e 	bne.w	800182a <main+0x36a>
	HAL_TIM_MspPostInit(&htim2);
 800160e:	4862      	ldr	r0, [pc, #392]	@ (8001798 <main+0x2d8>)
 8001610:	f000 fcda 	bl	8001fc8 <HAL_TIM_MspPostInit>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	2300      	movs	r3, #0
 8001616:	9306      	str	r3, [sp, #24]
 8001618:	9307      	str	r3, [sp, #28]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800161a:	9308      	str	r3, [sp, #32]
 800161c:	9309      	str	r3, [sp, #36]	@ 0x24
 800161e:	930a      	str	r3, [sp, #40]	@ 0x28
 8001620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001622:	930c      	str	r3, [sp, #48]	@ 0x30
 8001624:	930d      	str	r3, [sp, #52]	@ 0x34
 8001626:	930e      	str	r3, [sp, #56]	@ 0x38
	htim3.Instance = TIM3;
 8001628:	485c      	ldr	r0, [pc, #368]	@ (800179c <main+0x2dc>)
 800162a:	4a5d      	ldr	r2, [pc, #372]	@ (80017a0 <main+0x2e0>)
 800162c:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 0;
 800162e:	6043      	str	r3, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 4199;
 8001632:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001636:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800163c:	f002 fac8 	bl	8003bd0 <HAL_TIM_PWM_Init>
 8001640:	2800      	cmp	r0, #0
 8001642:	f040 80f4 	bne.w	800182e <main+0x36e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	9306      	str	r3, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	9307      	str	r3, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164c:	a906      	add	r1, sp, #24
 800164e:	4853      	ldr	r0, [pc, #332]	@ (800179c <main+0x2dc>)
 8001650:	f002 fc14 	bl	8003e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	2800      	cmp	r0, #0
 8001656:	f040 80ec 	bne.w	8001832 <main+0x372>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165a:	2360      	movs	r3, #96	@ 0x60
 800165c:	9308      	str	r3, [sp, #32]
	sConfigOC.Pulse = 0;
 800165e:	2200      	movs	r2, #0
 8001660:	9209      	str	r2, [sp, #36]	@ 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001662:	920a      	str	r2, [sp, #40]	@ 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001664:	920c      	str	r2, [sp, #48]	@ 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001666:	a908      	add	r1, sp, #32
 8001668:	484c      	ldr	r0, [pc, #304]	@ (800179c <main+0x2dc>)
 800166a:	f002 fb0f 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 800166e:	2800      	cmp	r0, #0
 8001670:	f040 80e1 	bne.w	8001836 <main+0x376>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001674:	2204      	movs	r2, #4
 8001676:	a908      	add	r1, sp, #32
 8001678:	4848      	ldr	r0, [pc, #288]	@ (800179c <main+0x2dc>)
 800167a:	f002 fb07 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 800167e:	2800      	cmp	r0, #0
 8001680:	f040 80db 	bne.w	800183a <main+0x37a>
	HAL_TIM_MspPostInit(&htim3);
 8001684:	4845      	ldr	r0, [pc, #276]	@ (800179c <main+0x2dc>)
 8001686:	f000 fc9f 	bl	8001fc8 <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 800168a:	4846      	ldr	r0, [pc, #280]	@ (80017a4 <main+0x2e4>)
 800168c:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <main+0x2e8>)
 800168e:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001690:	4b46      	ldr	r3, [pc, #280]	@ (80017ac <main+0x2ec>)
 8001692:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001694:	2300      	movs	r3, #0
 8001696:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001698:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169e:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80016a2:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a4:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a6:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a8:	f001 fa94 	bl	8002bd4 <HAL_I2C_Init>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	f040 80c6 	bne.w	800183e <main+0x37e>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016b2:	4c39      	ldr	r4, [pc, #228]	@ (8001798 <main+0x2d8>)
 80016b4:	2104      	movs	r1, #4
 80016b6:	4620      	mov	r0, r4
 80016b8:	f002 fb66 	bl	8003d88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80016bc:	2108      	movs	r1, #8
 80016be:	4620      	mov	r0, r4
 80016c0:	f002 fb62 	bl	8003d88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016c4:	4c35      	ldr	r4, [pc, #212]	@ (800179c <main+0x2dc>)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4620      	mov	r0, r4
 80016ca:	f002 fb5d 	bl	8003d88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016ce:	2104      	movs	r1, #4
 80016d0:	4620      	mov	r0, r4
 80016d2:	f002 fb59 	bl	8003d88 <HAL_TIM_PWM_Start>
	Debug_Send("System Init Complete\r\n");
 80016d6:	4836      	ldr	r0, [pc, #216]	@ (80017b0 <main+0x2f0>)
 80016d8:	f7ff fc48 	bl	8000f6c <Debug_Send>
	MPU6050_Init(&hi2c1);
 80016dc:	4c31      	ldr	r4, [pc, #196]	@ (80017a4 <main+0x2e4>)
 80016de:	4620      	mov	r0, r4
 80016e0:	f000 fa46 	bl	8001b70 <MPU6050_Init>
	Debug_Send("Calibrating IMU...\r\n");
 80016e4:	4833      	ldr	r0, [pc, #204]	@ (80017b4 <main+0x2f4>)
 80016e6:	f7ff fc41 	bl	8000f6c <Debug_Send>
	CalibrateIMU(&hi2c1, &imu_sum, imu_window, &imu_index, &imu_count);
 80016ea:	4b33      	ldr	r3, [pc, #204]	@ (80017b8 <main+0x2f8>)
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	4b33      	ldr	r3, [pc, #204]	@ (80017bc <main+0x2fc>)
 80016f0:	4a33      	ldr	r2, [pc, #204]	@ (80017c0 <main+0x300>)
 80016f2:	4934      	ldr	r1, [pc, #208]	@ (80017c4 <main+0x304>)
 80016f4:	4620      	mov	r0, r4
 80016f6:	f7ff fe61 	bl	80013bc <CalibrateIMU>
	imu_bias = imu_avg;
 80016fa:	4c33      	ldr	r4, [pc, #204]	@ (80017c8 <main+0x308>)
 80016fc:	4d33      	ldr	r5, [pc, #204]	@ (80017cc <main+0x30c>)
 80016fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Debug_Send("Calibration done.\r\n");
 800170a:	4831      	ldr	r0, [pc, #196]	@ (80017d0 <main+0x310>)
 800170c:	f7ff fc2e 	bl	8000f6c <Debug_Send>
	last_pid_time = HAL_GetTick();
 8001710:	f000 fda4 	bl	800225c <HAL_GetTick>
 8001714:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <main+0x314>)
 8001716:	6018      	str	r0, [r3, #0]
	uint32_t lastBlink = 0;
 8001718:	2500      	movs	r5, #0
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800171a:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 8001788 <main+0x2c8>
		if (button_pressed && HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 800171e:	4e2e      	ldr	r6, [pc, #184]	@ (80017d8 <main+0x318>)
 8001720:	4f1a      	ldr	r7, [pc, #104]	@ (800178c <main+0x2cc>)
		uint32_t now = HAL_GetTick();
 8001722:	f000 fd9b 	bl	800225c <HAL_GetTick>
 8001726:	4604      	mov	r4, r0
		if (now - lastBlink >= 500)
 8001728:	1b43      	subs	r3, r0, r5
 800172a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800172e:	f080 8088 	bcs.w	8001842 <main+0x382>
		if (button_pressed && HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8001732:	7833      	ldrb	r3, [r6, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f040 808a 	bne.w	800184e <main+0x38e>
		control_enabled = (control_state == CONTROL_ARMED);
 800173a:	4b28      	ldr	r3, [pc, #160]	@ (80017dc <main+0x31c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	bf14      	ite	ne
 8001744:	2300      	movne	r3, #0
 8001746:	2301      	moveq	r3, #1
 8001748:	4a25      	ldr	r2, [pc, #148]	@ (80017e0 <main+0x320>)
 800174a:	7013      	strb	r3, [r2, #0]
		if (now - last_update >= 10)
 800174c:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <main+0x324>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1ae3      	subs	r3, r4, r3
 8001752:	2b09      	cmp	r3, #9
 8001754:	d9e5      	bls.n	8001722 <main+0x262>
			last_update = now;
 8001756:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <main+0x324>)
 8001758:	601c      	str	r4, [r3, #0]
			if (MPU6050_ReadAll(&hi2c1, &imu_data) != HAL_OK || HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_NONE)
 800175a:	4923      	ldr	r1, [pc, #140]	@ (80017e8 <main+0x328>)
 800175c:	4811      	ldr	r0, [pc, #68]	@ (80017a4 <main+0x2e4>)
 800175e:	f000 fa84 	bl	8001c6a <MPU6050_ReadAll>
 8001762:	2800      	cmp	r0, #0
 8001764:	f000 80ab 	beq.w	80018be <main+0x3fe>
				snprintf(buf, sizeof(buf), "I2C error:%lu\r\n", HAL_I2C_GetError(&hi2c1));
 8001768:	480e      	ldr	r0, [pc, #56]	@ (80017a4 <main+0x2e4>)
 800176a:	f001 fd4b 	bl	8003204 <HAL_I2C_GetError>
 800176e:	4603      	mov	r3, r0
 8001770:	4a1e      	ldr	r2, [pc, #120]	@ (80017ec <main+0x32c>)
 8001772:	2128      	movs	r1, #40	@ 0x28
 8001774:	a808      	add	r0, sp, #32
 8001776:	f002 fd55 	bl	8004224 <sniprintf>
				Debug_Send(buf);
 800177a:	a808      	add	r0, sp, #32
 800177c:	f7ff fbf6 	bl	8000f6c <Debug_Send>
				PWM_D9_Target = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	e035      	b.n	80017f0 <main+0x330>
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020800 	.word	0x40020800
 8001790:	20000310 	.word	0x20000310
 8001794:	40004400 	.word	0x40004400
 8001798:	200003a0 	.word	0x200003a0
 800179c:	20000358 	.word	0x20000358
 80017a0:	40000400 	.word	0x40000400
 80017a4:	200003e8 	.word	0x200003e8
 80017a8:	40005400 	.word	0x40005400
 80017ac:	000186a0 	.word	0x000186a0
 80017b0:	08004dac 	.word	0x08004dac
 80017b4:	08004dc4 	.word	0x08004dc4
 80017b8:	20000137 	.word	0x20000137
 80017bc:	20000138 	.word	0x20000138
 80017c0:	20000158 	.word	0x20000158
 80017c4:	2000013c 	.word	0x2000013c
 80017c8:	20000270 	.word	0x20000270
 80017cc:	2000028c 	.word	0x2000028c
 80017d0:	08004ddc 	.word	0x08004ddc
 80017d4:	20000120 	.word	0x20000120
 80017d8:	20000134 	.word	0x20000134
 80017dc:	20000135 	.word	0x20000135
 80017e0:	20000136 	.word	0x20000136
 80017e4:	20000118 	.word	0x20000118
 80017e8:	200002e0 	.word	0x200002e0
 80017ec:	08004e14 	.word	0x08004e14
 80017f0:	4ac1      	ldr	r2, [pc, #772]	@ (8001af8 <main+0x638>)
 80017f2:	6013      	str	r3, [r2, #0]
				PWM_D6_Target = 0;
 80017f4:	4ac1      	ldr	r2, [pc, #772]	@ (8001afc <main+0x63c>)
 80017f6:	6013      	str	r3, [r2, #0]
				PWM_D5_Target = 0;
 80017f8:	4ac1      	ldr	r2, [pc, #772]	@ (8001b00 <main+0x640>)
 80017fa:	6013      	str	r3, [r2, #0]
				PWM_D3_Target = 0;
 80017fc:	4ac1      	ldr	r2, [pc, #772]	@ (8001b04 <main+0x644>)
 80017fe:	6013      	str	r3, [r2, #0]
				UpdatePWM();
 8001800:	f7ff fd38 	bl	8001274 <UpdatePWM>
				I2C_ResetBus();
 8001804:	f7ff fd8a 	bl	800131c <I2C_ResetBus>
				if (++i2c_retry_count > MAX_I2C_RETRIES)
 8001808:	4abf      	ldr	r2, [pc, #764]	@ (8001b08 <main+0x648>)
 800180a:	7813      	ldrb	r3, [r2, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	7013      	strb	r3, [r2, #0]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d985      	bls.n	8001722 <main+0x262>
					Error_Handler();
 8001816:	f7ff fdf7 	bl	8001408 <Error_Handler>
		Error_Handler();
 800181a:	f7ff fdf5 	bl	8001408 <Error_Handler>
		Error_Handler();
 800181e:	f7ff fdf3 	bl	8001408 <Error_Handler>
		Error_Handler();
 8001822:	f7ff fdf1 	bl	8001408 <Error_Handler>
		Error_Handler();
 8001826:	f7ff fdef 	bl	8001408 <Error_Handler>
		Error_Handler();
 800182a:	f7ff fded 	bl	8001408 <Error_Handler>
		Error_Handler();
 800182e:	f7ff fdeb 	bl	8001408 <Error_Handler>
		Error_Handler();
 8001832:	f7ff fde9 	bl	8001408 <Error_Handler>
		Error_Handler();
 8001836:	f7ff fde7 	bl	8001408 <Error_Handler>
		Error_Handler();
 800183a:	f7ff fde5 	bl	8001408 <Error_Handler>
		Error_Handler();
 800183e:	f7ff fde3 	bl	8001408 <Error_Handler>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001842:	2120      	movs	r1, #32
 8001844:	4640      	mov	r0, r8
 8001846:	f000 ff31 	bl	80026ac <HAL_GPIO_TogglePin>
			lastBlink = now;
 800184a:	4625      	mov	r5, r4
 800184c:	e771      	b.n	8001732 <main+0x272>
		if (button_pressed && HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 800184e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001852:	4638      	mov	r0, r7
 8001854:	f000 ff1e 	bl	8002694 <HAL_GPIO_ReadPin>
 8001858:	2801      	cmp	r0, #1
 800185a:	f47f af6e 	bne.w	800173a <main+0x27a>
			uint32_t duration = now - button_press_time;
 800185e:	4bab      	ldr	r3, [pc, #684]	@ (8001b0c <main+0x64c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	1ae3      	subs	r3, r4, r3
			button_pressed = 0;
 8001864:	4aaa      	ldr	r2, [pc, #680]	@ (8001b10 <main+0x650>)
 8001866:	2100      	movs	r1, #0
 8001868:	7011      	strb	r1, [r2, #0]
			if (duration >= BUTTON_LONG_PRESS_MS)
 800186a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800186e:	d20e      	bcs.n	800188e <main+0x3ce>
			else if (duration >= BUTTON_DEBOUNCE_MS)
 8001870:	2b31      	cmp	r3, #49	@ 0x31
 8001872:	f67f af62 	bls.w	800173a <main+0x27a>
				if (control_state == CONTROL_ARMED)
 8001876:	4ba7      	ldr	r3, [pc, #668]	@ (8001b14 <main+0x654>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d017      	beq.n	80018b0 <main+0x3f0>
					control_state = CONTROL_ARMED;
 8001880:	4ba4      	ldr	r3, [pc, #656]	@ (8001b14 <main+0x654>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
					Debug_Send("Armed\r\n");
 8001886:	48a4      	ldr	r0, [pc, #656]	@ (8001b18 <main+0x658>)
 8001888:	f7ff fb70 	bl	8000f6c <Debug_Send>
 800188c:	e755      	b.n	800173a <main+0x27a>
				Debug_Send("Calibration\r\n");
 800188e:	48a3      	ldr	r0, [pc, #652]	@ (8001b1c <main+0x65c>)
 8001890:	f7ff fb6c 	bl	8000f6c <Debug_Send>
				pid_pitch.integral = 0.0f;
 8001894:	48a2      	ldr	r0, [pc, #648]	@ (8001b20 <main+0x660>)
 8001896:	2300      	movs	r3, #0
 8001898:	6103      	str	r3, [r0, #16]
				pid_roll.integral  = 0.0f;
 800189a:	49a2      	ldr	r1, [pc, #648]	@ (8001b24 <main+0x664>)
 800189c:	610b      	str	r3, [r1, #16]
				pid_yaw.integral   = 0.0f;
 800189e:	4aa2      	ldr	r2, [pc, #648]	@ (8001b28 <main+0x668>)
 80018a0:	6113      	str	r3, [r2, #16]
				pid_pitch.last_err = 0.0f;
 80018a2:	60c3      	str	r3, [r0, #12]
				pid_roll.last_err  = 0.0f;
 80018a4:	60cb      	str	r3, [r1, #12]
				pid_yaw.last_err   = 0.0f;
 80018a6:	60d3      	str	r3, [r2, #12]
				control_state = CONTROL_DISARMED;
 80018a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001b14 <main+0x654>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e744      	b.n	800173a <main+0x27a>
					control_state = CONTROL_DISARMED;
 80018b0:	4b98      	ldr	r3, [pc, #608]	@ (8001b14 <main+0x654>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
					Debug_Send("Disarmed\r\n");
 80018b6:	489d      	ldr	r0, [pc, #628]	@ (8001b2c <main+0x66c>)
 80018b8:	f7ff fb58 	bl	8000f6c <Debug_Send>
 80018bc:	e73d      	b.n	800173a <main+0x27a>
			if (MPU6050_ReadAll(&hi2c1, &imu_data) != HAL_OK || HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_NONE)
 80018be:	489c      	ldr	r0, [pc, #624]	@ (8001b30 <main+0x670>)
 80018c0:	f001 fca0 	bl	8003204 <HAL_I2C_GetError>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	f47f af4f 	bne.w	8001768 <main+0x2a8>
				i2c_retry_count = 0;
 80018ca:	4b8f      	ldr	r3, [pc, #572]	@ (8001b08 <main+0x648>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
			MPU6050_ConvertToPhysical(&imu_data, &imu_phys);
 80018d0:	f8df a280 	ldr.w	sl, [pc, #640]	@ 8001b54 <main+0x694>
 80018d4:	4651      	mov	r1, sl
 80018d6:	4897      	ldr	r0, [pc, #604]	@ (8001b34 <main+0x674>)
 80018d8:	f000 fa0c 	bl	8001cf4 <MPU6050_ConvertToPhysical>
			IMU_Filter(&imu_phys, &imu_filt);
 80018dc:	f8df 928c 	ldr.w	r9, [pc, #652]	@ 8001b6c <main+0x6ac>
 80018e0:	4649      	mov	r1, r9
 80018e2:	4650      	mov	r0, sl
 80018e4:	f7ff fab2 	bl	8000e4c <IMU_Filter>
			IMU_UpdateAverage(&imu_filt);
 80018e8:	4648      	mov	r0, r9
 80018ea:	f7ff fb4d 	bl	8000f88 <IMU_UpdateAverage>
			float pitch = atanf(imu_avg.accel_y /
 80018ee:	4b92      	ldr	r3, [pc, #584]	@ (8001b38 <main+0x678>)
 80018f0:	ed93 9a01 	vldr	s18, [r3, #4]
					sqrtf(imu_avg.accel_x * imu_avg.accel_x +
 80018f4:	ed93 8a00 	vldr	s16, [r3]
							imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 80018f8:	edd3 8a02 	vldr	s17, [r3, #8]
 80018fc:	ee28 0aa8 	vmul.f32	s0, s17, s17
					sqrtf(imu_avg.accel_x * imu_avg.accel_x +
 8001900:	ee08 0a08 	vmla.f32	s0, s16, s16
 8001904:	f003 f942 	bl	8004b8c <sqrtf>
			float pitch = atanf(imu_avg.accel_y /
 8001908:	ee89 0a00 	vdiv.f32	s0, s18, s0
 800190c:	f003 f95c 	bl	8004bc8 <atanf>
							imu_avg.accel_z * imu_avg.accel_z)) * 180.0f / M_PI;
 8001910:	eddf 9a8a 	vldr	s19, [pc, #552]	@ 8001b3c <main+0x67c>
 8001914:	ee60 7a29 	vmul.f32	s15, s0, s19
 8001918:	ee17 0a90 	vmov	r0, s15
 800191c:	f7fe fe34 	bl	8000588 <__aeabi_f2d>
 8001920:	a373      	add	r3, pc, #460	@ (adr r3, 8001af0 <main+0x630>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe ffb1 	bl	800088c <__aeabi_ddiv>
			float pitch = atanf(imu_avg.accel_y /
 800192a:	f7ff f897 	bl	8000a5c <__aeabi_d2f>
 800192e:	ee09 0a10 	vmov	s18, r0
			float roll  = atanf(-imu_avg.accel_x / imu_avg.accel_z) * 180.0f / M_PI;
 8001932:	eeb1 0a48 	vneg.f32	s0, s16
 8001936:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800193a:	f003 f945 	bl	8004bc8 <atanf>
 800193e:	ee60 7a29 	vmul.f32	s15, s0, s19
 8001942:	ee17 0a90 	vmov	r0, s15
 8001946:	f7fe fe1f 	bl	8000588 <__aeabi_f2d>
 800194a:	a369      	add	r3, pc, #420	@ (adr r3, 8001af0 <main+0x630>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe ff9c 	bl	800088c <__aeabi_ddiv>
 8001954:	f7ff f882 	bl	8000a5c <__aeabi_d2f>
 8001958:	ee08 0a10 	vmov	s16, r0
			float dt = (now - last_pid_time) / 1000.0f;
 800195c:	4a78      	ldr	r2, [pc, #480]	@ (8001b40 <main+0x680>)
 800195e:	6813      	ldr	r3, [r2, #0]
 8001960:	1ae3      	subs	r3, r4, r3
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196a:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001b44 <main+0x684>
 800196e:	eec7 8a87 	vdiv.f32	s17, s15, s14
			last_pid_time = now;
 8001972:	6014      	str	r4, [r2, #0]
			if (dt <= 0.0f) dt = 0.001f;
 8001974:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	bf98      	it	ls
 800197e:	eddf 8a72 	vldrls	s17, [pc, #456]	@ 8001b48 <main+0x688>
			float error_pitch = target_pitch - pitch;
 8001982:	4b72      	ldr	r3, [pc, #456]	@ (8001b4c <main+0x68c>)
 8001984:	ed93 0a00 	vldr	s0, [r3]
			float output_pitch = PID_Update(&pid_pitch, error_pitch, dt);
 8001988:	eef0 0a68 	vmov.f32	s1, s17
 800198c:	ee30 0a49 	vsub.f32	s0, s0, s18
 8001990:	4863      	ldr	r0, [pc, #396]	@ (8001b20 <main+0x660>)
 8001992:	f7ff fc0f 	bl	80011b4 <PID_Update>
 8001996:	eeb0 9a40 	vmov.f32	s18, s0
			float error_roll  = target_roll - roll;
 800199a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b50 <main+0x690>)
 800199c:	ed93 0a00 	vldr	s0, [r3]
			float output_roll  = PID_Update(&pid_roll, error_roll, dt);
 80019a0:	eef0 0a68 	vmov.f32	s1, s17
 80019a4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80019a8:	485e      	ldr	r0, [pc, #376]	@ (8001b24 <main+0x664>)
 80019aa:	f7ff fc03 	bl	80011b4 <PID_Update>
 80019ae:	eeb0 8a40 	vmov.f32	s16, s0
			float error_yaw      = target_yaw - (imu_phys.gyro_z * dt);
 80019b2:	4b68      	ldr	r3, [pc, #416]	@ (8001b54 <main+0x694>)
 80019b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80019b8:	4b67      	ldr	r3, [pc, #412]	@ (8001b58 <main+0x698>)
 80019ba:	ed93 0a00 	vldr	s0, [r3]
			float output_yaw     = PID_Update(&pid_yaw, error_yaw, dt);
 80019be:	eef0 0a68 	vmov.f32	s1, s17
 80019c2:	ee08 0ae7 	vmls.f32	s0, s17, s15
 80019c6:	4858      	ldr	r0, [pc, #352]	@ (8001b28 <main+0x668>)
 80019c8:	f7ff fbf4 	bl	80011b4 <PID_Update>
			float throttle = throttle_base;
 80019cc:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <main+0x69c>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
			if (throttle_override >= 0.0f)
 80019d2:	4b63      	ldr	r3, [pc, #396]	@ (8001b60 <main+0x6a0>)
 80019d4:	ed93 7a00 	vldr	s14, [r3]
 80019d8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				throttle = throttle_override;
 80019e0:	bfa8      	it	ge
 80019e2:	edd3 7a00 	vldrge	s15, [r3]
			float m1 = throttle + output_pitch + output_roll + output_yaw;
 80019e6:	ee37 7a89 	vadd.f32	s14, s15, s18
 80019ea:	ee37 6a08 	vadd.f32	s12, s14, s16
 80019ee:	ee36 6a00 	vadd.f32	s12, s12, s0
			float m2 = throttle + output_pitch - output_roll - output_yaw;
 80019f2:	ee37 7a48 	vsub.f32	s14, s14, s16
 80019f6:	ee37 7a40 	vsub.f32	s14, s14, s0
			float m3 = throttle - output_pitch + output_roll - output_yaw;
 80019fa:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80019fe:	ee77 6a88 	vadd.f32	s13, s15, s16
 8001a02:	ee76 6ac0 	vsub.f32	s13, s13, s0
			float m4 = throttle - output_pitch - output_roll + output_yaw;
 8001a06:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8001a0a:	ee37 0a80 	vadd.f32	s0, s15, s0
			if (m1 > MAX_PWM) m1 = MAX_PWM; else if (m1 < MIN_PWM) m1 = MIN_PWM;
 8001a0e:	eddf 7a55 	vldr	s15, [pc, #340]	@ 8001b64 <main+0x6a4>
 8001a12:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	dc52      	bgt.n	8001ac2 <main+0x602>
 8001a1c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8001b44 <main+0x684>
 8001a20:	eeb4 6a67 	vcmp.f32	s12, s15
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	bf48      	it	mi
 8001a2a:	eeb0 6a67 	vmovmi.f32	s12, s15
			if (m2 > MAX_PWM) m2 = MAX_PWM; else if (m2 < MIN_PWM) m2 = MIN_PWM;
 8001a2e:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8001b64 <main+0x6a4>
 8001a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	dc45      	bgt.n	8001ac8 <main+0x608>
 8001a3c:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8001b44 <main+0x684>
 8001a40:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	bf48      	it	mi
 8001a4a:	eeb0 7a67 	vmovmi.f32	s14, s15
			if (m3 > MAX_PWM) m3 = MAX_PWM; else if (m3 < MIN_PWM) m3 = MIN_PWM;
 8001a4e:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8001b64 <main+0x6a4>
 8001a52:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	dc38      	bgt.n	8001ace <main+0x60e>
 8001a5c:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8001b44 <main+0x684>
 8001a60:	eef4 6a67 	vcmp.f32	s13, s15
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	bf48      	it	mi
 8001a6a:	eef0 6a67 	vmovmi.f32	s13, s15
			if (m4 > MAX_PWM) m4 = MAX_PWM; else if (m4 < MIN_PWM) m4 = MIN_PWM;
 8001a6e:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8001b64 <main+0x6a4>
 8001a72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	dc2b      	bgt.n	8001ad4 <main+0x614>
 8001a7c:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8001b44 <main+0x684>
 8001a80:	eeb4 0a67 	vcmp.f32	s0, s15
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	bf48      	it	mi
 8001a8a:	eeb0 0a67 	vmovmi.f32	s0, s15
			if(control_enabled)
 8001a8e:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <main+0x6a8>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b313      	cbz	r3, 8001ada <main+0x61a>
				PWM_D9_Target = (uint32_t)m1;
 8001a94:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <main+0x638>)
 8001a9a:	ed83 6a00 	vstr	s12, [r3]
				PWM_D6_Target = (uint32_t)m2;
 8001a9e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <main+0x63c>)
 8001aa4:	ed83 7a00 	vstr	s14, [r3]
				PWM_D5_Target = (uint32_t)m3;
 8001aa8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001aac:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <main+0x640>)
 8001aae:	edc3 6a00 	vstr	s13, [r3]
				PWM_D3_Target = (uint32_t)m4;
 8001ab2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <main+0x644>)
 8001ab8:	ed83 0a00 	vstr	s0, [r3]
			UpdatePWM(); // Runs every 10 ms with control loop
 8001abc:	f7ff fbda 	bl	8001274 <UpdatePWM>
 8001ac0:	e62f      	b.n	8001722 <main+0x262>
			if (m1 > MAX_PWM) m1 = MAX_PWM; else if (m1 < MIN_PWM) m1 = MIN_PWM;
 8001ac2:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8001b64 <main+0x6a4>
 8001ac6:	e7b2      	b.n	8001a2e <main+0x56e>
			if (m2 > MAX_PWM) m2 = MAX_PWM; else if (m2 < MIN_PWM) m2 = MIN_PWM;
 8001ac8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001b64 <main+0x6a4>
 8001acc:	e7bf      	b.n	8001a4e <main+0x58e>
			if (m3 > MAX_PWM) m3 = MAX_PWM; else if (m3 < MIN_PWM) m3 = MIN_PWM;
 8001ace:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001b64 <main+0x6a4>
 8001ad2:	e7cc      	b.n	8001a6e <main+0x5ae>
			if (m4 > MAX_PWM) m4 = MAX_PWM; else if (m4 < MIN_PWM) m4 = MIN_PWM;
 8001ad4:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001b64 <main+0x6a4>
 8001ad8:	e7d9      	b.n	8001a8e <main+0x5ce>
				PWM_D9_Target = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	4a06      	ldr	r2, [pc, #24]	@ (8001af8 <main+0x638>)
 8001ade:	6013      	str	r3, [r2, #0]
				PWM_D6_Target = 0;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	@ (8001afc <main+0x63c>)
 8001ae2:	6013      	str	r3, [r2, #0]
				PWM_D5_Target = 0;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	@ (8001b00 <main+0x640>)
 8001ae6:	6013      	str	r3, [r2, #0]
				PWM_D3_Target = 0;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	@ (8001b04 <main+0x644>)
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e7e6      	b.n	8001abc <main+0x5fc>
 8001aee:	bf00      	nop
 8001af0:	54442d18 	.word	0x54442d18
 8001af4:	400921fb 	.word	0x400921fb
 8001af8:	200002fc 	.word	0x200002fc
 8001afc:	200002f8 	.word	0x200002f8
 8001b00:	200002f4 	.word	0x200002f4
 8001b04:	200002f0 	.word	0x200002f0
 8001b08:	2000011c 	.word	0x2000011c
 8001b0c:	20000130 	.word	0x20000130
 8001b10:	20000134 	.word	0x20000134
 8001b14:	20000135 	.word	0x20000135
 8001b18:	08004e0c 	.word	0x08004e0c
 8001b1c:	08004df0 	.word	0x08004df0
 8001b20:	20000028 	.word	0x20000028
 8001b24:	20000014 	.word	0x20000014
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	08004e00 	.word	0x08004e00
 8001b30:	200003e8 	.word	0x200003e8
 8001b34:	200002e0 	.word	0x200002e0
 8001b38:	2000028c 	.word	0x2000028c
 8001b3c:	43340000 	.word	0x43340000
 8001b40:	20000120 	.word	0x20000120
 8001b44:	447a0000 	.word	0x447a0000
 8001b48:	3a83126f 	.word	0x3a83126f
 8001b4c:	2000012c 	.word	0x2000012c
 8001b50:	20000128 	.word	0x20000128
 8001b54:	200002c4 	.word	0x200002c4
 8001b58:	20000124 	.word	0x20000124
 8001b5c:	20000040 	.word	0x20000040
 8001b60:	2000003c 	.word	0x2000003c
 8001b64:	44fa0000 	.word	0x44fa0000
 8001b68:	20000136 	.word	0x20000136
 8001b6c:	200002a8 	.word	0x200002a8

08001b70 <MPU6050_Init>:

/* USER CODE BEGIN 1 */
#define WHO_AM_I_REG  0x75
#define WHO_AM_I_VAL  0x68
HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8001b70:	b510      	push	{r4, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	4604      	mov	r4, r0
	uint8_t data;

	/* Wake up the sensor */
	data = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	2301      	movs	r3, #1
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	f10d 0217 	add.w	r2, sp, #23
 8001b8a:	9200      	str	r2, [sp, #0]
 8001b8c:	226b      	movs	r2, #107	@ 0x6b
 8001b8e:	21d0      	movs	r1, #208	@ 0xd0
 8001b90:	f001 f8fc 	bl	8002d8c <HAL_I2C_Mem_Write>
 8001b94:	b110      	cbz	r0, 8001b9c <MPU6050_Init+0x2c>
		return HAL_ERROR;
 8001b96:	2001      	movs	r0, #1
	data = 0x08;
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
		return HAL_ERROR;

	return HAL_OK;
}
 8001b98:	b006      	add	sp, #24
 8001b9a:	bd10      	pop	{r4, pc}
	uint8_t who = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f88d 3016 	strb.w	r3, [sp, #22]
	if (HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &who, 1, HAL_MAX_DELAY) != HAL_OK || who != WHO_AM_I_VAL)
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	f10d 0216 	add.w	r2, sp, #22
 8001bb0:	9200      	str	r2, [sp, #0]
 8001bb2:	2275      	movs	r2, #117	@ 0x75
 8001bb4:	21d0      	movs	r1, #208	@ 0xd0
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f001 f99e 	bl	8002ef8 <HAL_I2C_Mem_Read>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d152      	bne.n	8001c66 <MPU6050_Init+0xf6>
 8001bc0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001bc4:	2b68      	cmp	r3, #104	@ 0x68
 8001bc6:	d001      	beq.n	8001bcc <MPU6050_Init+0x5c>
		return HAL_ERROR;
 8001bc8:	2001      	movs	r0, #1
 8001bca:	e7e5      	b.n	8001b98 <MPU6050_Init+0x28>
	data = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	f10d 0217 	add.w	r2, sp, #23
 8001be0:	9200      	str	r2, [sp, #0]
 8001be2:	2219      	movs	r2, #25
 8001be4:	21d0      	movs	r1, #208	@ 0xd0
 8001be6:	4620      	mov	r0, r4
 8001be8:	f001 f8d0 	bl	8002d8c <HAL_I2C_Mem_Write>
 8001bec:	b108      	cbz	r0, 8001bf2 <MPU6050_Init+0x82>
		return HAL_ERROR;
 8001bee:	2001      	movs	r0, #1
 8001bf0:	e7d2      	b.n	8001b98 <MPU6050_Init+0x28>
	data = 0x03;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfc:	9302      	str	r3, [sp, #8]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	f10d 0217 	add.w	r2, sp, #23
 8001c06:	9200      	str	r2, [sp, #0]
 8001c08:	221a      	movs	r2, #26
 8001c0a:	21d0      	movs	r1, #208	@ 0xd0
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f001 f8bd 	bl	8002d8c <HAL_I2C_Mem_Write>
 8001c12:	b108      	cbz	r0, 8001c18 <MPU6050_Init+0xa8>
		return HAL_ERROR;
 8001c14:	2001      	movs	r0, #1
 8001c16:	e7bf      	b.n	8001b98 <MPU6050_Init+0x28>
	data = 0x08;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	2301      	movs	r3, #1
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	f10d 0217 	add.w	r2, sp, #23
 8001c2c:	9200      	str	r2, [sp, #0]
 8001c2e:	221b      	movs	r2, #27
 8001c30:	21d0      	movs	r1, #208	@ 0xd0
 8001c32:	4620      	mov	r0, r4
 8001c34:	f001 f8aa 	bl	8002d8c <HAL_I2C_Mem_Write>
 8001c38:	b108      	cbz	r0, 8001c3e <MPU6050_Init+0xce>
		return HAL_ERROR;
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	e7ac      	b.n	8001b98 <MPU6050_Init+0x28>
	data = 0x08;
 8001c3e:	2308      	movs	r3, #8
 8001c40:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	f10d 0217 	add.w	r2, sp, #23
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	221c      	movs	r2, #28
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f001 f897 	bl	8002d8c <HAL_I2C_Mem_Write>
 8001c5e:	3800      	subs	r0, #0
 8001c60:	bf18      	it	ne
 8001c62:	2001      	movne	r0, #1
 8001c64:	e798      	b.n	8001b98 <MPU6050_Init+0x28>
		return HAL_ERROR;
 8001c66:	2001      	movs	r0, #1
 8001c68:	e796      	b.n	8001b98 <MPU6050_Init+0x28>

08001c6a <MPU6050_ReadAll>:

HAL_StatusTypeDef MPU6050_ReadAll(I2C_HandleTypeDef *hi2c, MPU6050_Data_t *data)
{
 8001c6a:	b510      	push	{r4, lr}
 8001c6c:	b088      	sub	sp, #32
 8001c6e:	460c      	mov	r4, r1
	uint8_t buf[14];
	if (HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, MPU6050_REG_ACCEL_XOUT_H, 1, buf, sizeof(buf), HAL_MAX_DELAY) != HAL_OK)
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	9302      	str	r3, [sp, #8]
 8001c76:	230e      	movs	r3, #14
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	ab04      	add	r3, sp, #16
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	223b      	movs	r2, #59	@ 0x3b
 8001c82:	21d0      	movs	r1, #208	@ 0xd0
 8001c84:	f001 f938 	bl	8002ef8 <HAL_I2C_Mem_Read>
 8001c88:	bb90      	cbnz	r0, 8001cf0 <MPU6050_ReadAll+0x86>
		return HAL_ERROR;

	data->accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 8001c8a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001c8e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001c92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c96:	8023      	strh	r3, [r4, #0]
	data->accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 8001c98:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8001c9c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001ca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ca4:	8063      	strh	r3, [r4, #2]
	data->accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 8001ca6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001caa:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001cae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cb2:	80a3      	strh	r3, [r4, #4]
	data->temp    = (int16_t)(buf[6] << 8 | buf[7]);
 8001cb4:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001cb8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001cbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cc0:	81a3      	strh	r3, [r4, #12]
	data->gyro_x  = (int16_t)(buf[8] << 8 | buf[9]);
 8001cc2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001cc6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001cca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cce:	80e3      	strh	r3, [r4, #6]
	data->gyro_y  = (int16_t)(buf[10] << 8 | buf[11]);
 8001cd0:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8001cd4:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8001cd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cdc:	8123      	strh	r3, [r4, #8]
	data->gyro_z  = (int16_t)(buf[12] << 8 | buf[13]);
 8001cde:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8001ce2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8001ce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cea:	8163      	strh	r3, [r4, #10]

	return HAL_OK;
}
 8001cec:	b008      	add	sp, #32
 8001cee:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	e7fb      	b.n	8001cec <MPU6050_ReadAll+0x82>

08001cf4 <MPU6050_ConvertToPhysical>:

void MPU6050_ConvertToPhysical(const MPU6050_Data_t *raw, MPU6050_Physical_t *out)
{
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	468c      	mov	ip, r1
	const float gyro_lsb  = 65.5f;     /* LSB/(deg/s) for +-500dps */
	const float g = 9.80665f;          /* m/s^2 per g */

	static MPU6050_Data_t prev = {0};
	static bool first_call = true;
	if (first_call) {
 8001cfa:	4a5d      	ldr	r2, [pc, #372]	@ (8001e70 <MPU6050_ConvertToPhysical+0x17c>)
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	b14a      	cbz	r2, 8001d14 <MPU6050_ConvertToPhysical+0x20>
		prev = *raw;
 8001d00:	4c5c      	ldr	r4, [pc, #368]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001d02:	6800      	ldr	r0, [r0, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	c407      	stmia	r4!, {r0, r1, r2}
 8001d0a:	899a      	ldrh	r2, [r3, #12]
 8001d0c:	8022      	strh	r2, [r4, #0]
		first_call = false;
 8001d0e:	4a58      	ldr	r2, [pc, #352]	@ (8001e70 <MPU6050_ConvertToPhysical+0x17c>)
 8001d10:	2100      	movs	r1, #0
 8001d12:	7011      	strb	r1, [r2, #0]
	}
	MPU6050_Data_t clean = *raw;
 8001d14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d18:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8001d1c:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8001d20:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 8001d24:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8001d28:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8001d2c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d30:	ee07 3a10 	vmov	s14, r3

	if (abs((int32_t)raw->accel_x - prev.accel_x) > ACCEL_SPIKE_THRESH) clean.accel_x = prev.accel_x; else prev.accel_x = raw->accel_x;
 8001d34:	4b4f      	ldr	r3, [pc, #316]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001d36:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d3a:	1a53      	subs	r3, r2, r1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bfb8      	it	lt
 8001d40:	425b      	neglt	r3, r3
 8001d42:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001d46:	dc02      	bgt.n	8001d4e <MPU6050_ConvertToPhysical+0x5a>
 8001d48:	4b4a      	ldr	r3, [pc, #296]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001d4a:	801a      	strh	r2, [r3, #0]
	MPU6050_Data_t clean = *raw;
 8001d4c:	4611      	mov	r1, r2
	if (abs((int32_t)raw->accel_y - prev.accel_y) > ACCEL_SPIKE_THRESH) clean.accel_y = prev.accel_y; else prev.accel_y = raw->accel_y;
 8001d4e:	4b49      	ldr	r3, [pc, #292]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001d50:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001d54:	1a83      	subs	r3, r0, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bfb8      	it	lt
 8001d5a:	425b      	neglt	r3, r3
 8001d5c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001d60:	dc02      	bgt.n	8001d68 <MPU6050_ConvertToPhysical+0x74>
 8001d62:	4b44      	ldr	r3, [pc, #272]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001d64:	8058      	strh	r0, [r3, #2]
	MPU6050_Data_t clean = *raw;
 8001d66:	4602      	mov	r2, r0
	if (abs((int32_t)raw->accel_z - prev.accel_z) > ACCEL_SPIKE_THRESH) clean.accel_z = prev.accel_z; else prev.accel_z = raw->accel_z;
 8001d68:	4b42      	ldr	r3, [pc, #264]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001d6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d6e:	1ae0      	subs	r0, r4, r3
 8001d70:	2800      	cmp	r0, #0
 8001d72:	bfb8      	it	lt
 8001d74:	4240      	neglt	r0, r0
 8001d76:	f5b0 5f7a 	cmp.w	r0, #16000	@ 0x3e80
 8001d7a:	dc02      	bgt.n	8001d82 <MPU6050_ConvertToPhysical+0x8e>
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001d7e:	809c      	strh	r4, [r3, #4]
	MPU6050_Data_t clean = *raw;
 8001d80:	4623      	mov	r3, r4

	if (abs((int32_t)raw->gyro_x - prev.gyro_x) > GYRO_SPIKE_THRESH) clean.gyro_x = prev.gyro_x; else prev.gyro_x = raw->gyro_x;
 8001d82:	483c      	ldr	r0, [pc, #240]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001d84:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8001d88:	ebae 0004 	sub.w	r0, lr, r4
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	bfb8      	it	lt
 8001d90:	4240      	neglt	r0, r0
 8001d92:	f241 3788 	movw	r7, #5000	@ 0x1388
 8001d96:	42b8      	cmp	r0, r7
 8001d98:	dc03      	bgt.n	8001da2 <MPU6050_ConvertToPhysical+0xae>
 8001d9a:	4836      	ldr	r0, [pc, #216]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001d9c:	f8a0 e006 	strh.w	lr, [r0, #6]
	MPU6050_Data_t clean = *raw;
 8001da0:	4674      	mov	r4, lr
	if (abs((int32_t)raw->gyro_y - prev.gyro_y) > GYRO_SPIKE_THRESH) clean.gyro_y = prev.gyro_y; else prev.gyro_y = raw->gyro_y;
 8001da2:	4834      	ldr	r0, [pc, #208]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001da4:	f9b0 e008 	ldrsh.w	lr, [r0, #8]
 8001da8:	eba5 000e 	sub.w	r0, r5, lr
 8001dac:	2800      	cmp	r0, #0
 8001dae:	bfb8      	it	lt
 8001db0:	4240      	neglt	r0, r0
 8001db2:	f241 3788 	movw	r7, #5000	@ 0x1388
 8001db6:	42b8      	cmp	r0, r7
 8001db8:	dc02      	bgt.n	8001dc0 <MPU6050_ConvertToPhysical+0xcc>
 8001dba:	482e      	ldr	r0, [pc, #184]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001dbc:	8105      	strh	r5, [r0, #8]
	MPU6050_Data_t clean = *raw;
 8001dbe:	46ae      	mov	lr, r5
	if (abs((int32_t)raw->gyro_z - prev.gyro_z) > GYRO_SPIKE_THRESH) clean.gyro_z = prev.gyro_z; else prev.gyro_z = raw->gyro_z;
 8001dc0:	482c      	ldr	r0, [pc, #176]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001dc2:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8001dc6:	1a35      	subs	r5, r6, r0
 8001dc8:	2d00      	cmp	r5, #0
 8001dca:	bfb8      	it	lt
 8001dcc:	426d      	neglt	r5, r5
 8001dce:	f241 3788 	movw	r7, #5000	@ 0x1388
 8001dd2:	42bd      	cmp	r5, r7
 8001dd4:	dc02      	bgt.n	8001ddc <MPU6050_ConvertToPhysical+0xe8>
 8001dd6:	4827      	ldr	r0, [pc, #156]	@ (8001e74 <MPU6050_ConvertToPhysical+0x180>)
 8001dd8:	8146      	strh	r6, [r0, #10]
	MPU6050_Data_t clean = *raw;
 8001dda:	4630      	mov	r0, r6

	out->accel_x = (clean.accel_x / accel_lsb) * g;
 8001ddc:	ee07 1a90 	vmov	s15, r1
 8001de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de4:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8001e78 <MPU6050_ConvertToPhysical+0x184>
 8001de8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001dec:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001e7c <MPU6050_ConvertToPhysical+0x188>
 8001df0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001df4:	edcc 7a00 	vstr	s15, [ip]
	out->accel_y = (clean.accel_y / accel_lsb) * g;
 8001df8:	ee07 2a90 	vmov	s15, r2
 8001dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e00:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001e04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e08:	edcc 7a01 	vstr	s15, [ip, #4]
	out->accel_z = (clean.accel_z / accel_lsb) * g;
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001e18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e1c:	edcc 7a02 	vstr	s15, [ip, #8]

	out->gyro_x  = clean.gyro_x / gyro_lsb;
 8001e20:	ee07 4a90 	vmov	s15, r4
 8001e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e28:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001e80 <MPU6050_ConvertToPhysical+0x18c>
 8001e2c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001e30:	ed8c 6a03 	vstr	s12, [ip, #12]
	out->gyro_y  = clean.gyro_y / gyro_lsb;
 8001e34:	ee07 ea90 	vmov	s15, lr
 8001e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001e40:	ed8c 6a04 	vstr	s12, [ip, #16]
	out->gyro_z  = clean.gyro_z / gyro_lsb;
 8001e44:	ee07 0a90 	vmov	s15, r0
 8001e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001e50:	ed8c 6a05 	vstr	s12, [ip, #20]

	out->temp = (clean.temp / 340.0f) + 36.53f;
 8001e54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e58:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001e84 <MPU6050_ConvertToPhysical+0x190>
 8001e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e60:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001e88 <MPU6050_ConvertToPhysical+0x194>
 8001e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e68:	edcc 7a06 	vstr	s15, [ip, #24]
}
 8001e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000044 	.word	0x20000044
 8001e74:	2000043c 	.word	0x2000043c
 8001e78:	39000000 	.word	0x39000000
 8001e7c:	411ce80a 	.word	0x411ce80a
 8001e80:	42830000 	.word	0x42830000
 8001e84:	43aa0000 	.word	0x43aa0000
 8001e88:	42121eb8 	.word	0x42121eb8

08001e8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8c:	b500      	push	{lr}
 8001e8e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e90:	2100      	movs	r1, #0
 8001e92:	9100      	str	r1, [sp, #0]
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_MspInit+0x3c>)
 8001e96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ea0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001ea4:	9200      	str	r2, [sp, #0]
 8001ea6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	9101      	str	r1, [sp, #4]
 8001eaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001eac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001eb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ebc:	2007      	movs	r0, #7
 8001ebe:	f000 f9e7 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec2:	b003      	add	sp, #12
 8001ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ecc:	b530      	push	{r4, r5, lr}
 8001ece:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9303      	str	r3, [sp, #12]
 8001ed4:	9304      	str	r3, [sp, #16]
 8001ed6:	9305      	str	r3, [sp, #20]
 8001ed8:	9306      	str	r3, [sp, #24]
 8001eda:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001edc:	6802      	ldr	r2, [r0, #0]
 8001ede:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <HAL_I2C_MspInit+0x64>)
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ee4:	b009      	add	sp, #36	@ 0x24
 8001ee6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	2500      	movs	r5, #0
 8001eea:	9501      	str	r5, [sp, #4]
 8001eec:	4c11      	ldr	r4, [pc, #68]	@ (8001f34 <HAL_I2C_MspInit+0x68>)
 8001eee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6323      	str	r3, [r4, #48]	@ 0x30
 8001ef6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f06:	2312      	movs	r3, #18
 8001f08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	a903      	add	r1, sp, #12
 8001f14:	4808      	ldr	r0, [pc, #32]	@ (8001f38 <HAL_I2C_MspInit+0x6c>)
 8001f16:	f000 fa25 	bl	8002364 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f1a:	9502      	str	r5, [sp, #8]
 8001f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f22:	6423      	str	r3, [r4, #64]	@ 0x40
 8001f24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	9b02      	ldr	r3, [sp, #8]
}
 8001f2e:	e7d9      	b.n	8001ee4 <HAL_I2C_MspInit+0x18>
 8001f30:	40005400 	.word	0x40005400
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020400 	.word	0x40020400

08001f3c <HAL_I2C_MspDeInit>:
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8001f3c:	6802      	ldr	r2, [r0, #0]
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_I2C_MspDeInit+0x30>)
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d000      	beq.n	8001f46 <HAL_I2C_MspDeInit+0xa>
 8001f44:	4770      	bx	lr
{
 8001f46:	b510      	push	{r4, lr}
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001f48:	4a09      	ldr	r2, [pc, #36]	@ (8001f70 <HAL_I2C_MspDeInit+0x34>)
 8001f4a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001f4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001f52:	4c08      	ldr	r4, [pc, #32]	@ (8001f74 <HAL_I2C_MspDeInit+0x38>)
 8001f54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f000 faf9 	bl	8002550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001f5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f62:	4620      	mov	r0, r4
 8001f64:	f000 faf4 	bl	8002550 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001f68:	bd10      	pop	{r4, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020400 	.word	0x40020400

08001f78 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f78:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8001f7a:	6803      	ldr	r3, [r0, #0]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f80:	d004      	beq.n	8001f8c <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8001f82:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc0 <HAL_TIM_PWM_MspInit+0x48>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00e      	beq.n	8001fa6 <HAL_TIM_PWM_MspInit+0x2e>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f88:	b002      	add	sp, #8
 8001f8a:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	9b00      	ldr	r3, [sp, #0]
 8001fa4:	e7f0      	b.n	8001f88 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fae:	f042 0202 	orr.w	r2, r2, #2
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	9b01      	ldr	r3, [sp, #4]
}
 8001fbe:	e7e3      	b.n	8001f88 <HAL_TIM_PWM_MspInit+0x10>
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc8:	b530      	push	{r4, r5, lr}
 8001fca:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9303      	str	r3, [sp, #12]
 8001fd0:	9304      	str	r3, [sp, #16]
 8001fd2:	9305      	str	r3, [sp, #20]
 8001fd4:	9306      	str	r3, [sp, #24]
 8001fd6:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 8001fd8:	6803      	ldr	r3, [r0, #0]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fde:	d004      	beq.n	8001fea <HAL_TIM_MspPostInit+0x22>

    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001fe0:	4a23      	ldr	r2, [pc, #140]	@ (8002070 <HAL_TIM_MspPostInit+0xa8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d019      	beq.n	800201a <HAL_TIM_MspPostInit+0x52>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fe6:	b009      	add	sp, #36	@ 0x24
 8001fe8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <HAL_TIM_MspPostInit+0xac>)
 8001ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ff2:	f042 0202 	orr.w	r2, r2, #2
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002002:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8002006:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800200c:	2301      	movs	r3, #1
 800200e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	a903      	add	r1, sp, #12
 8002012:	4819      	ldr	r0, [pc, #100]	@ (8002078 <HAL_TIM_MspPostInit+0xb0>)
 8002014:	f000 f9a6 	bl	8002364 <HAL_GPIO_Init>
 8002018:	e7e5      	b.n	8001fe6 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	2500      	movs	r5, #0
 800201c:	9501      	str	r5, [sp, #4]
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_TIM_MspPostInit+0xac>)
 8002020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002022:	f042 0204 	orr.w	r2, r2, #4
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30
 8002028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800202a:	f002 0204 	and.w	r2, r2, #4
 800202e:	9201      	str	r2, [sp, #4]
 8002030:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	9502      	str	r5, [sp, #8]
 8002034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002036:	f042 0202 	orr.w	r2, r2, #2
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	9302      	str	r3, [sp, #8]
 8002044:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002046:	2380      	movs	r3, #128	@ 0x80
 8002048:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2402      	movs	r4, #2
 800204c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800204e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002050:	a903      	add	r1, sp, #12
 8002052:	480a      	ldr	r0, [pc, #40]	@ (800207c <HAL_TIM_MspPostInit+0xb4>)
 8002054:	f000 f986 	bl	8002364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002058:	2310      	movs	r3, #16
 800205a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002062:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	a903      	add	r1, sp, #12
 8002066:	4804      	ldr	r0, [pc, #16]	@ (8002078 <HAL_TIM_MspPostInit+0xb0>)
 8002068:	f000 f97c 	bl	8002364 <HAL_GPIO_Init>
}
 800206c:	e7bb      	b.n	8001fe6 <HAL_TIM_MspPostInit+0x1e>
 800206e:	bf00      	nop
 8002070:	40000400 	.word	0x40000400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400
 800207c:	40020800 	.word	0x40020800

08002080 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002080:	b500      	push	{lr}
 8002082:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	2300      	movs	r3, #0
 8002086:	9303      	str	r3, [sp, #12]
 8002088:	9304      	str	r3, [sp, #16]
 800208a:	9305      	str	r3, [sp, #20]
 800208c:	9306      	str	r3, [sp, #24]
 800208e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8002090:	6802      	ldr	r2, [r0, #0]
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <HAL_UART_MspInit+0x68>)
 8002094:	429a      	cmp	r2, r3
 8002096:	d002      	beq.n	800209e <HAL_UART_MspInit+0x1e>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002098:	b009      	add	sp, #36	@ 0x24
 800209a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800209e:	2100      	movs	r1, #0
 80020a0:	9101      	str	r1, [sp, #4]
 80020a2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80020a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020a8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80020ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80020b4:	9201      	str	r2, [sp, #4]
 80020b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	9102      	str	r1, [sp, #8]
 80020ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020cc:	230c      	movs	r3, #12
 80020ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d8:	2307      	movs	r3, #7
 80020da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	a903      	add	r1, sp, #12
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <HAL_UART_MspInit+0x6c>)
 80020e0:	f000 f940 	bl	8002364 <HAL_GPIO_Init>
}
 80020e4:	e7d8      	b.n	8002098 <HAL_UART_MspInit+0x18>
 80020e6:	bf00      	nop
 80020e8:	40004400 	.word	0x40004400
 80020ec:	40020000 	.word	0x40020000

080020f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f0:	e7fe      	b.n	80020f0 <NMI_Handler>

080020f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <HardFault_Handler>

080020f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler>

080020f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f6:	e7fe      	b.n	80020f6 <BusFault_Handler>

080020f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler>

080020fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fa:	4770      	bx	lr

080020fc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	4770      	bx	lr

080020fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fe:	4770      	bx	lr

08002100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002100:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002102:	f000 f89f 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002106:	bd08      	pop	{r3, pc}

08002108 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002108:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800210a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800210e:	f000 fad7 	bl	80026c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002112:	bd08      	pop	{r3, pc}

08002114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002114:	b508      	push	{r3, lr}
 8002116:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4a0c      	ldr	r2, [pc, #48]	@ (800214c <_sbrk+0x38>)
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	b152      	cbz	r2, 8002134 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4a0b      	ldr	r2, [pc, #44]	@ (800214c <_sbrk+0x38>)
 8002120:	6810      	ldr	r0, [r2, #0]
 8002122:	4403      	add	r3, r0
 8002124:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <_sbrk+0x3c>)
 8002126:	490b      	ldr	r1, [pc, #44]	@ (8002154 <_sbrk+0x40>)
 8002128:	1a52      	subs	r2, r2, r1
 800212a:	4293      	cmp	r3, r2
 800212c:	d806      	bhi.n	800213c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800212e:	4a07      	ldr	r2, [pc, #28]	@ (800214c <_sbrk+0x38>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002132:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8002134:	4a05      	ldr	r2, [pc, #20]	@ (800214c <_sbrk+0x38>)
 8002136:	4908      	ldr	r1, [pc, #32]	@ (8002158 <_sbrk+0x44>)
 8002138:	6011      	str	r1, [r2, #0]
 800213a:	e7f0      	b.n	800211e <_sbrk+0xa>
    errno = ENOMEM;
 800213c:	f002 f8b0 	bl	80042a0 <__errno>
 8002140:	230c      	movs	r3, #12
 8002142:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	e7f3      	b.n	8002132 <_sbrk+0x1e>
 800214a:	bf00      	nop
 800214c:	2000044c 	.word	0x2000044c
 8002150:	20020000 	.word	0x20020000
 8002154:	00000400 	.word	0x00000400
 8002158:	200005a0 	.word	0x200005a0

0800215c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4a03      	ldr	r2, [pc, #12]	@ (800216c <SystemInit+0x10>)
 800215e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002166:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002174:	f7ff fff2 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	@ (80021ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	@ (80021b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	@ (80021bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800219e:	f002 f885 	bl	80042ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a2:	f7ff f98d 	bl	80014c0 <main>
  bx  lr    
 80021a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80021b4:	08004ea0 	.word	0x08004ea0
  ldr r2, =_sbss
 80021b8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80021bc:	2000059c 	.word	0x2000059c

080021c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC_IRQHandler>
	...

080021c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c4:	b510      	push	{r4, lr}
 80021c6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <HAL_InitTick+0x40>)
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <HAL_InitTick+0x44>)
 80021d6:	6810      	ldr	r0, [r2, #0]
 80021d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80021dc:	f000 f8ae 	bl	800233c <HAL_SYSTICK_Config>
 80021e0:	b968      	cbnz	r0, 80021fe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	2c0f      	cmp	r4, #15
 80021e4:	d901      	bls.n	80021ea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80021e6:	2001      	movs	r0, #1
 80021e8:	e00a      	b.n	8002200 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ea:	2200      	movs	r2, #0
 80021ec:	4621      	mov	r1, r4
 80021ee:	f04f 30ff 	mov.w	r0, #4294967295
 80021f2:	f000 f85f 	bl	80022b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_InitTick+0x48>)
 80021f8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2000      	movs	r0, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
}
 8002200:	bd10      	pop	{r4, pc}
 8002202:	bf00      	nop
 8002204:	2000004c 	.word	0x2000004c
 8002208:	20000048 	.word	0x20000048
 800220c:	20000050 	.word	0x20000050

08002210 <HAL_Init>:
{
 8002210:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002212:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_Init+0x30>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002222:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800222a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f82f 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff ffc6 	bl	80021c4 <HAL_InitTick>
  HAL_MspInit();
 8002238:	f7ff fe28 	bl	8001e8c <HAL_MspInit>
}
 800223c:	2000      	movs	r0, #0
 800223e:	bd08      	pop	{r3, pc}
 8002240:	40023c00 	.word	0x40023c00

08002244 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002244:	4a03      	ldr	r2, [pc, #12]	@ (8002254 <HAL_IncTick+0x10>)
 8002246:	6811      	ldr	r1, [r2, #0]
 8002248:	4b03      	ldr	r3, [pc, #12]	@ (8002258 <HAL_IncTick+0x14>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	440b      	add	r3, r1
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000450 	.word	0x20000450
 8002258:	2000004c 	.word	0x2000004c

0800225c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800225c:	4b01      	ldr	r3, [pc, #4]	@ (8002264 <HAL_GetTick+0x8>)
 800225e:	6818      	ldr	r0, [r3, #0]
}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000450 	.word	0x20000450

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b538      	push	{r3, r4, r5, lr}
 800226a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff fff6 	bl	800225c <HAL_GetTick>
 8002270:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002276:	d002      	beq.n	800227e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <HAL_Delay+0x24>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227e:	f7ff ffed 	bl	800225c <HAL_GetTick>
 8002282:	1b40      	subs	r0, r0, r5
 8002284:	42a0      	cmp	r0, r4
 8002286:	d3fa      	bcc.n	800227e <HAL_Delay+0x16>
  {
  }
}
 8002288:	bd38      	pop	{r3, r4, r5, pc}
 800228a:	bf00      	nop
 800228c:	2000004c 	.word	0x2000004c

08002290 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4907      	ldr	r1, [pc, #28]	@ (80022b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002292:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	0203      	lsls	r3, r0, #8
 8002296:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800229e:	0412      	lsls	r2, r2, #16
 80022a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80022ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HAL_NVIC_SetPriority+0x64>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022be:	f1c3 0c07 	rsb	ip, r3, #7
 80022c2:	f1bc 0f04 	cmp.w	ip, #4
 80022c6:	bf28      	it	cs
 80022c8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022cc:	f103 0e04 	add.w	lr, r3, #4
 80022d0:	f1be 0f06 	cmp.w	lr, #6
 80022d4:	bf8c      	ite	hi
 80022d6:	3b03      	subhi	r3, #3
 80022d8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022da:	f04f 3eff 	mov.w	lr, #4294967295
 80022de:	fa0e fc0c 	lsl.w	ip, lr, ip
 80022e2:	ea21 010c 	bic.w	r1, r1, ip
 80022e6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	fa0e fe03 	lsl.w	lr, lr, r3
 80022ec:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80022f2:	2800      	cmp	r0, #0
 80022f4:	db09      	blt.n	800230a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	0109      	lsls	r1, r1, #4
 80022f8:	b2c9      	uxtb	r1, r1
 80022fa:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80022fe:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002302:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002306:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	f000 000f 	and.w	r0, r0, #15
 800230e:	0109      	lsls	r1, r1, #4
 8002310:	b2c9      	uxtb	r1, r1
 8002312:	4b02      	ldr	r3, [pc, #8]	@ (800231c <HAL_NVIC_SetPriority+0x68>)
 8002314:	5419      	strb	r1, [r3, r0]
 8002316:	e7f6      	b.n	8002306 <HAL_NVIC_SetPriority+0x52>
 8002318:	e000ed00 	.word	0xe000ed00
 800231c:	e000ed14 	.word	0xe000ed14

08002320 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002320:	2800      	cmp	r0, #0
 8002322:	db07      	blt.n	8002334 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002324:	0941      	lsrs	r1, r0, #5
 8002326:	f000 001f 	and.w	r0, r0, #31
 800232a:	2301      	movs	r3, #1
 800232c:	4083      	lsls	r3, r0
 800232e:	4a02      	ldr	r2, [pc, #8]	@ (8002338 <HAL_NVIC_EnableIRQ+0x18>)
 8002330:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100

0800233c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	3801      	subs	r0, #1
 800233e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002342:	d20b      	bcs.n	800235c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002344:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002348:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <HAL_SYSTICK_Config+0x24>)
 800234c:	21f0      	movs	r1, #240	@ 0xf0
 800234e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002352:	2000      	movs	r0, #0
 8002354:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	2207      	movs	r2, #7
 8002358:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800235c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002368:	b083      	sub	sp, #12
 800236a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236c:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800236e:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002372:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002374:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002378:	4c72      	ldr	r4, [pc, #456]	@ (8002544 <HAL_GPIO_Init+0x1e0>)
 800237a:	e04b      	b.n	8002414 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800237c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237e:	fa05 fa02 	lsl.w	sl, r5, r2
 8002382:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002386:	68cf      	ldr	r7, [r1, #12]
 8002388:	4097      	lsls	r7, r2
 800238a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800238e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002390:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002392:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002396:	684f      	ldr	r7, [r1, #4]
 8002398:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800239c:	409f      	lsls	r7, r3
 800239e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80023a2:	6047      	str	r7, [r0, #4]
 80023a4:	e044      	b.n	8002430 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	f04f 0c00 	mov.w	ip, #0
 80023aa:	fa0c fc0b 	lsl.w	ip, ip, fp
 80023ae:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b2:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 80023b6:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023bc:	684e      	ldr	r6, [r1, #4]
 80023be:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 80023c2:	bf0c      	ite	eq
 80023c4:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80023c8:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 80023cc:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 80023ce:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d0:	684e      	ldr	r6, [r1, #4]
 80023d2:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 80023d6:	bf0c      	ite	eq
 80023d8:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80023dc:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 80023e0:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 80023e2:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e4:	684e      	ldr	r6, [r1, #4]
 80023e6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 80023ea:	bf0c      	ite	eq
 80023ec:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80023f0:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 80023f4:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f6:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f8:	684e      	ldr	r6, [r1, #4]
 80023fa:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 80023fe:	bf0c      	ite	eq
 8002400:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8002404:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8002408:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	3301      	adds	r3, #1
 800240c:	3202      	adds	r2, #2
 800240e:	2b10      	cmp	r3, #16
 8002410:	f000 8094 	beq.w	800253c <HAL_GPIO_Init+0x1d8>
    ioposition = 0x01U << position;
 8002414:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002418:	680f      	ldr	r7, [r1, #0]
 800241a:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 800241e:	ea3c 0707 	bics.w	r7, ip, r7
 8002422:	d1f2      	bne.n	800240a <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002424:	684f      	ldr	r7, [r1, #4]
 8002426:	f007 0703 	and.w	r7, r7, #3
 800242a:	3f01      	subs	r7, #1
 800242c:	2f01      	cmp	r7, #1
 800242e:	d9a5      	bls.n	800237c <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	684f      	ldr	r7, [r1, #4]
 8002432:	f007 0703 	and.w	r7, r7, #3
 8002436:	2f03      	cmp	r7, #3
 8002438:	d023      	beq.n	8002482 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 800243a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243c:	fa05 fc02 	lsl.w	ip, r5, r2
 8002440:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002444:	688f      	ldr	r7, [r1, #8]
 8002446:	4097      	lsls	r7, r2
 8002448:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 800244c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	684f      	ldr	r7, [r1, #4]
 8002450:	f007 0703 	and.w	r7, r7, #3
 8002454:	2f02      	cmp	r7, #2
 8002456:	d114      	bne.n	8002482 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8002458:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800245c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002460:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002464:	f003 0b07 	and.w	fp, r3, #7
 8002468:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800246c:	fa08 fa0b 	lsl.w	sl, r8, fp
 8002470:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002474:	690f      	ldr	r7, [r1, #16]
 8002476:	fa07 f70b 	lsl.w	r7, r7, fp
 800247a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 800247e:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8002482:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002484:	fa05 fc02 	lsl.w	ip, r5, r2
 8002488:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248c:	684f      	ldr	r7, [r1, #4]
 800248e:	f007 0703 	and.w	r7, r7, #3
 8002492:	4097      	lsls	r7, r2
 8002494:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8002498:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800249a:	684f      	ldr	r7, [r1, #4]
 800249c:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 80024a0:	d0b3      	beq.n	800240a <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	2700      	movs	r7, #0
 80024a4:	9701      	str	r7, [sp, #4]
 80024a6:	4e28      	ldr	r6, [pc, #160]	@ (8002548 <HAL_GPIO_Init+0x1e4>)
 80024a8:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 80024aa:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 80024ae:	6477      	str	r7, [r6, #68]	@ 0x44
 80024b0:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 80024b2:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 80024b6:	9701      	str	r7, [sp, #4]
 80024b8:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80024ba:	f023 0703 	bic.w	r7, r3, #3
 80024be:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80024c2:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80024c6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024ca:	f003 0b03 	and.w	fp, r3, #3
 80024ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80024d2:	fa08 fc0b 	lsl.w	ip, r8, fp
 80024d6:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 80024de:	42b0      	cmp	r0, r6
 80024e0:	f43f af61 	beq.w	80023a6 <HAL_GPIO_Init+0x42>
 80024e4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80024e8:	42b0      	cmp	r0, r6
 80024ea:	d018      	beq.n	800251e <HAL_GPIO_Init+0x1ba>
 80024ec:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80024f0:	42b0      	cmp	r0, r6
 80024f2:	d017      	beq.n	8002524 <HAL_GPIO_Init+0x1c0>
 80024f4:	f8df c054 	ldr.w	ip, [pc, #84]	@ 800254c <HAL_GPIO_Init+0x1e8>
 80024f8:	4560      	cmp	r0, ip
 80024fa:	d016      	beq.n	800252a <HAL_GPIO_Init+0x1c6>
 80024fc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8002500:	4560      	cmp	r0, ip
 8002502:	d015      	beq.n	8002530 <HAL_GPIO_Init+0x1cc>
 8002504:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8002508:	4560      	cmp	r0, ip
 800250a:	d014      	beq.n	8002536 <HAL_GPIO_Init+0x1d2>
 800250c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8002510:	4560      	cmp	r0, ip
 8002512:	bf14      	ite	ne
 8002514:	f04f 0c07 	movne.w	ip, #7
 8002518:	f04f 0c06 	moveq.w	ip, #6
 800251c:	e745      	b.n	80023aa <HAL_GPIO_Init+0x46>
 800251e:	f04f 0c01 	mov.w	ip, #1
 8002522:	e742      	b.n	80023aa <HAL_GPIO_Init+0x46>
 8002524:	f04f 0c02 	mov.w	ip, #2
 8002528:	e73f      	b.n	80023aa <HAL_GPIO_Init+0x46>
 800252a:	f04f 0c03 	mov.w	ip, #3
 800252e:	e73c      	b.n	80023aa <HAL_GPIO_Init+0x46>
 8002530:	f04f 0c04 	mov.w	ip, #4
 8002534:	e739      	b.n	80023aa <HAL_GPIO_Init+0x46>
 8002536:	f04f 0c05 	mov.w	ip, #5
 800253a:	e736      	b.n	80023aa <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 800253c:	b003      	add	sp, #12
 800253e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002542:	bf00      	nop
 8002544:	40013c00 	.word	0x40013c00
 8002548:	40023800 	.word	0x40023800
 800254c:	40020c00 	.word	0x40020c00

08002550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002554:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002558:	2701      	movs	r7, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800255a:	f04f 0a0f 	mov.w	sl, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002562:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 800268c <HAL_GPIO_DeInit+0x13c>
 8002566:	e029      	b.n	80025bc <HAL_GPIO_DeInit+0x6c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002568:	f04f 0900 	mov.w	r9, #0
 800256c:	9d01      	ldr	r5, [sp, #4]
 800256e:	fa09 f505 	lsl.w	r5, r9, r5
 8002572:	4565      	cmp	r5, ip
 8002574:	d067      	beq.n	8002646 <HAL_GPIO_DeInit+0xf6>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002576:	6805      	ldr	r5, [r0, #0]
 8002578:	005c      	lsls	r4, r3, #1
 800257a:	fa0b f404 	lsl.w	r4, fp, r4
 800257e:	ea25 0504 	bic.w	r5, r5, r4
 8002582:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002584:	08de      	lsrs	r6, r3, #3
 8002586:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800258a:	f8d6 c020 	ldr.w	ip, [r6, #32]
 800258e:	f003 0507 	and.w	r5, r3, #7
 8002592:	00ad      	lsls	r5, r5, #2
 8002594:	fa0a f505 	lsl.w	r5, sl, r5
 8002598:	ea2c 0505 	bic.w	r5, ip, r5
 800259c:	6235      	str	r5, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259e:	68c5      	ldr	r5, [r0, #12]
 80025a0:	ea25 0504 	bic.w	r5, r5, r4
 80025a4:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a6:	6845      	ldr	r5, [r0, #4]
 80025a8:	ea25 0202 	bic.w	r2, r5, r2
 80025ac:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ae:	6882      	ldr	r2, [r0, #8]
 80025b0:	ea22 0204 	bic.w	r2, r2, r4
 80025b4:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b6:	3301      	adds	r3, #1
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d061      	beq.n	8002680 <HAL_GPIO_DeInit+0x130>
    ioposition = 0x01U << position;
 80025bc:	fa07 f203 	lsl.w	r2, r7, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80025c0:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 80025c4:	ea32 0401 	bics.w	r4, r2, r1
 80025c8:	d1f5      	bne.n	80025b6 <HAL_GPIO_DeInit+0x66>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80025ca:	f023 0403 	bic.w	r4, r3, #3
 80025ce:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80025d2:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
 80025d6:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80025da:	f003 0503 	and.w	r5, r3, #3
 80025de:	00ad      	lsls	r5, r5, #2
 80025e0:	9501      	str	r5, [sp, #4]
 80025e2:	fa0a fe05 	lsl.w	lr, sl, r5
 80025e6:	ea0e 0c0c 	and.w	ip, lr, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80025ea:	4d27      	ldr	r5, [pc, #156]	@ (8002688 <HAL_GPIO_DeInit+0x138>)
 80025ec:	42a8      	cmp	r0, r5
 80025ee:	d0bb      	beq.n	8002568 <HAL_GPIO_DeInit+0x18>
 80025f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80025f4:	42a8      	cmp	r0, r5
 80025f6:	d018      	beq.n	800262a <HAL_GPIO_DeInit+0xda>
 80025f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80025fc:	42a8      	cmp	r0, r5
 80025fe:	d016      	beq.n	800262e <HAL_GPIO_DeInit+0xde>
 8002600:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002604:	42a8      	cmp	r0, r5
 8002606:	d015      	beq.n	8002634 <HAL_GPIO_DeInit+0xe4>
 8002608:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800260c:	42a8      	cmp	r0, r5
 800260e:	d014      	beq.n	800263a <HAL_GPIO_DeInit+0xea>
 8002610:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8002690 <HAL_GPIO_DeInit+0x140>
 8002614:	4548      	cmp	r0, r9
 8002616:	d013      	beq.n	8002640 <HAL_GPIO_DeInit+0xf0>
 8002618:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 800261c:	4548      	cmp	r0, r9
 800261e:	bf14      	ite	ne
 8002620:	f04f 0907 	movne.w	r9, #7
 8002624:	f04f 0906 	moveq.w	r9, #6
 8002628:	e7a0      	b.n	800256c <HAL_GPIO_DeInit+0x1c>
 800262a:	46b9      	mov	r9, r7
 800262c:	e79e      	b.n	800256c <HAL_GPIO_DeInit+0x1c>
 800262e:	f04f 0902 	mov.w	r9, #2
 8002632:	e79b      	b.n	800256c <HAL_GPIO_DeInit+0x1c>
 8002634:	f04f 0903 	mov.w	r9, #3
 8002638:	e798      	b.n	800256c <HAL_GPIO_DeInit+0x1c>
 800263a:	f04f 0904 	mov.w	r9, #4
 800263e:	e795      	b.n	800256c <HAL_GPIO_DeInit+0x1c>
 8002640:	f04f 0905 	mov.w	r9, #5
 8002644:	e792      	b.n	800256c <HAL_GPIO_DeInit+0x1c>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002646:	f8d8 5000 	ldr.w	r5, [r8]
 800264a:	ea25 0506 	bic.w	r5, r5, r6
 800264e:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002652:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8002656:	ea25 0506 	bic.w	r5, r5, r6
 800265a:	f8c8 5004 	str.w	r5, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800265e:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8002662:	ea25 0506 	bic.w	r5, r5, r6
 8002666:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800266a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800266e:	ea25 0506 	bic.w	r5, r5, r6
 8002672:	f8c8 5008 	str.w	r5, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002676:	68a5      	ldr	r5, [r4, #8]
 8002678:	ea25 050e 	bic.w	r5, r5, lr
 800267c:	60a5      	str	r5, [r4, #8]
 800267e:	e77a      	b.n	8002576 <HAL_GPIO_DeInit+0x26>
    }
  }
}
 8002680:	b003      	add	sp, #12
 8002682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002686:	bf00      	nop
 8002688:	40020000 	.word	0x40020000
 800268c:	40013c00 	.word	0x40013c00
 8002690:	40021400 	.word	0x40021400

08002694 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002694:	6903      	ldr	r3, [r0, #16]
 8002696:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002698:	bf14      	ite	ne
 800269a:	2001      	movne	r0, #1
 800269c:	2000      	moveq	r0, #0
 800269e:	4770      	bx	lr

080026a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a0:	b10a      	cbz	r2, 80026a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a2:	6181      	str	r1, [r0, #24]
 80026a4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a6:	0409      	lsls	r1, r1, #16
 80026a8:	6181      	str	r1, [r0, #24]
  }
}
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ac:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026ae:	ea01 0203 	and.w	r2, r1, r3
 80026b2:	ea21 0103 	bic.w	r1, r1, r3
 80026b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80026ba:	6181      	str	r1, [r0, #24]
}
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026c0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026c2:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	4203      	tst	r3, r0
 80026c8:	d100      	bne.n	80026cc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80026ca:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026cc:	4b02      	ldr	r3, [pc, #8]	@ (80026d8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80026ce:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026d0:	f7fe fe0a 	bl	80012e8 <HAL_GPIO_EXTI_Callback>
}
 80026d4:	e7f9      	b.n	80026ca <HAL_GPIO_EXTI_IRQHandler+0xa>
 80026d6:	bf00      	nop
 80026d8:	40013c00 	.word	0x40013c00

080026dc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026dc:	6803      	ldr	r3, [r0, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80026e4:	d101      	bne.n	80026ea <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80026e6:	2000      	movs	r0, #0
}
 80026e8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026ee:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026f4:	2220      	movs	r2, #32
 80026f6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fa:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026fe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002700:	f042 0204 	orr.w	r2, r2, #4
 8002704:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8002706:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	4770      	bx	lr

0800270e <I2C_WaitOnFlagUntilTimeout>:
{
 800270e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002712:	4605      	mov	r5, r0
 8002714:	460c      	mov	r4, r1
 8002716:	4616      	mov	r6, r2
 8002718:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800271a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800271e:	f1b8 0f01 	cmp.w	r8, #1
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	bf0c      	ite	eq
 8002726:	695b      	ldreq	r3, [r3, #20]
 8002728:	699b      	ldrne	r3, [r3, #24]
 800272a:	ea24 0c03 	bic.w	ip, r4, r3
 800272e:	fa1f fc8c 	uxth.w	ip, ip
 8002732:	fabc fc8c 	clz	ip, ip
 8002736:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800273a:	4566      	cmp	r6, ip
 800273c:	d127      	bne.n	800278e <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 800273e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002742:	d0ec      	beq.n	800271e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002744:	f7ff fd8a 	bl	800225c <HAL_GetTick>
 8002748:	9b06      	ldr	r3, [sp, #24]
 800274a:	1ac0      	subs	r0, r0, r3
 800274c:	42b8      	cmp	r0, r7
 800274e:	d801      	bhi.n	8002754 <I2C_WaitOnFlagUntilTimeout+0x46>
 8002750:	2f00      	cmp	r7, #0
 8002752:	d1e4      	bne.n	800271e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002754:	f1b8 0f01 	cmp.w	r8, #1
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	bf0c      	ite	eq
 800275c:	695b      	ldreq	r3, [r3, #20]
 800275e:	699b      	ldrne	r3, [r3, #24]
 8002760:	ea24 0303 	bic.w	r3, r4, r3
 8002764:	b29b      	uxth	r3, r3
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	429e      	cmp	r6, r3
 800276e:	d1d6      	bne.n	800271e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002770:	2300      	movs	r3, #0
 8002772:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002774:	2220      	movs	r2, #32
 8002776:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800277a:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800277e:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002786:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	e000      	b.n	8002790 <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 800278e:	2000      	movs	r0, #0
}
 8002790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002794 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002798:	4605      	mov	r5, r0
 800279a:	460e      	mov	r6, r1
 800279c:	4617      	mov	r7, r2
 800279e:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027a0:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80027a4:	f1b8 0f01 	cmp.w	r8, #1
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	bf0c      	ite	eq
 80027ac:	695c      	ldreq	r4, [r3, #20]
 80027ae:	699c      	ldrne	r4, [r3, #24]
 80027b0:	ea26 0404 	bic.w	r4, r6, r4
 80027b4:	b2a4      	uxth	r4, r4
 80027b6:	3c00      	subs	r4, #0
 80027b8:	bf18      	it	ne
 80027ba:	2401      	movne	r4, #1
 80027bc:	2c00      	cmp	r4, #0
 80027be:	d044      	beq.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c0:	682b      	ldr	r3, [r5, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80027c8:	d127      	bne.n	800281a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 80027ca:	f1b7 3fff 	cmp.w	r7, #4294967295
 80027ce:	d0e9      	beq.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d0:	f7ff fd44 	bl	800225c <HAL_GetTick>
 80027d4:	eba0 0009 	sub.w	r0, r0, r9
 80027d8:	42b8      	cmp	r0, r7
 80027da:	d801      	bhi.n	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 80027dc:	2f00      	cmp	r7, #0
 80027de:	d1e1      	bne.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027e0:	f1b8 0f01 	cmp.w	r8, #1
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	bf0c      	ite	eq
 80027e8:	695b      	ldreq	r3, [r3, #20]
 80027ea:	699b      	ldrne	r3, [r3, #24]
 80027ec:	ea26 0303 	bic.w	r3, r6, r3
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b00      	subs	r3, #0
 80027f4:	bf18      	it	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0d3      	beq.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002800:	2220      	movs	r2, #32
 8002802:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002806:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800280a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800280c:	f042 0220 	orr.w	r2, r2, #32
 8002810:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002812:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
 8002818:	e015      	b.n	8002846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002820:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002822:	682b      	ldr	r3, [r5, #0]
 8002824:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002828:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800282a:	2300      	movs	r3, #0
 800282c:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800282e:	2220      	movs	r2, #32
 8002830:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002838:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800283a:	f042 0204 	orr.w	r2, r2, #4
 800283e:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002840:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8002844:	2001      	movs	r0, #1
}
 8002846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 800284a:	2000      	movs	r0, #0
 800284c:	e7fb      	b.n	8002846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

0800284e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800284e:	b570      	push	{r4, r5, r6, lr}
 8002850:	4604      	mov	r4, r0
 8002852:	460d      	mov	r5, r1
 8002854:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800285e:	d121      	bne.n	80028a4 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff ff3b 	bl	80026dc <I2C_IsAcknowledgeFailed>
 8002866:	b9f8      	cbnz	r0, 80028a8 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002868:	f1b5 3fff 	cmp.w	r5, #4294967295
 800286c:	d0f3      	beq.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286e:	f7ff fcf5 	bl	800225c <HAL_GetTick>
 8002872:	1b80      	subs	r0, r0, r6
 8002874:	42a8      	cmp	r0, r5
 8002876:	d801      	bhi.n	800287c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002878:	2d00      	cmp	r5, #0
 800287a:	d1ec      	bne.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002884:	d1e7      	bne.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002886:	2300      	movs	r3, #0
 8002888:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800288a:	2220      	movs	r2, #32
 800288c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002890:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800289c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
 80028a2:	e000      	b.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80028a4:	2000      	movs	r0, #0
}
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80028a8:	2001      	movs	r0, #1
 80028aa:	e7fc      	b.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080028ac <I2C_RequestMemoryWrite>:
{
 80028ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028b0:	b085      	sub	sp, #20
 80028b2:	4604      	mov	r4, r0
 80028b4:	460d      	mov	r5, r1
 80028b6:	4691      	mov	r9, r2
 80028b8:	461f      	mov	r7, r3
 80028ba:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80028be:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c0:	6803      	ldr	r3, [r0, #0]
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80028c8:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ca:	9600      	str	r6, [sp, #0]
 80028cc:	4643      	mov	r3, r8
 80028ce:	2200      	movs	r2, #0
 80028d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028d4:	f7ff ff1b 	bl	800270e <I2C_WaitOnFlagUntilTimeout>
 80028d8:	b970      	cbnz	r0, 80028f8 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80028e0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e2:	4633      	mov	r3, r6
 80028e4:	4642      	mov	r2, r8
 80028e6:	4928      	ldr	r1, [pc, #160]	@ (8002988 <I2C_RequestMemoryWrite+0xdc>)
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff ff53 	bl	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ee:	b168      	cbz	r0, 800290c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80028f0:	2001      	movs	r0, #1
}
 80028f2:	b005      	add	sp, #20
 80028f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002900:	d040      	beq.n	8002984 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002902:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002906:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002908:	2003      	movs	r0, #3
 800290a:	e7f2      	b.n	80028f2 <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290c:	2300      	movs	r3, #0
 800290e:	9303      	str	r3, [sp, #12]
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	9203      	str	r2, [sp, #12]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	9303      	str	r3, [sp, #12]
 800291a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291c:	4632      	mov	r2, r6
 800291e:	4641      	mov	r1, r8
 8002920:	4620      	mov	r0, r4
 8002922:	f7ff ff94 	bl	800284e <I2C_WaitOnTXEFlagUntilTimeout>
 8002926:	b930      	cbnz	r0, 8002936 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002928:	2f01      	cmp	r7, #1
 800292a:	d110      	bne.n	800294e <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	fa5f f689 	uxtb.w	r6, r9
 8002932:	611e      	str	r6, [r3, #16]
 8002934:	e7dd      	b.n	80028f2 <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002936:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002938:	2b04      	cmp	r3, #4
 800293a:	d001      	beq.n	8002940 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 800293c:	2001      	movs	r0, #1
 800293e:	e7d8      	b.n	80028f2 <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	6822      	ldr	r2, [r4, #0]
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002948:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800294a:	2001      	movs	r0, #1
 800294c:	e7d1      	b.n	80028f2 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8002954:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002956:	4632      	mov	r2, r6
 8002958:	4641      	mov	r1, r8
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff ff77 	bl	800284e <I2C_WaitOnTXEFlagUntilTimeout>
 8002960:	b920      	cbnz	r0, 800296c <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	fa5f f689 	uxtb.w	r6, r9
 8002968:	611e      	str	r6, [r3, #16]
 800296a:	e7c2      	b.n	80028f2 <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800296e:	2b04      	cmp	r3, #4
 8002970:	d001      	beq.n	8002976 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8002972:	2001      	movs	r0, #1
 8002974:	e7bd      	b.n	80028f2 <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002976:	6822      	ldr	r2, [r4, #0]
 8002978:	6813      	ldr	r3, [r2, #0]
 800297a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002980:	2001      	movs	r0, #1
 8002982:	e7b6      	b.n	80028f2 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8002984:	2003      	movs	r0, #3
 8002986:	e7b4      	b.n	80028f2 <I2C_RequestMemoryWrite+0x46>
 8002988:	00010002 	.word	0x00010002

0800298c <I2C_RequestMemoryRead>:
{
 800298c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	4604      	mov	r4, r0
 8002994:	460d      	mov	r5, r1
 8002996:	4616      	mov	r6, r2
 8002998:	4699      	mov	r9, r3
 800299a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800299c:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a0:	6802      	ldr	r2, [r0, #0]
 80029a2:	6813      	ldr	r3, [r2, #0]
 80029a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029a8:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029aa:	6803      	ldr	r3, [r0, #0]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80029b2:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b4:	f8cd 8000 	str.w	r8, [sp]
 80029b8:	463b      	mov	r3, r7
 80029ba:	2200      	movs	r2, #0
 80029bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029c0:	f7ff fea5 	bl	800270e <I2C_WaitOnFlagUntilTimeout>
 80029c4:	b980      	cbnz	r0, 80029e8 <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c6:	fa5f fa85 	uxtb.w	sl, r5
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80029d0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d2:	4643      	mov	r3, r8
 80029d4:	463a      	mov	r2, r7
 80029d6:	4945      	ldr	r1, [pc, #276]	@ (8002aec <I2C_RequestMemoryRead+0x160>)
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff fedb 	bl	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029de:	b168      	cbz	r0, 80029fc <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 80029e0:	2001      	movs	r0, #1
}
 80029e2:	b004      	add	sp, #16
 80029e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80029f0:	d077      	beq.n	8002ae2 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029f6:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80029f8:	2003      	movs	r0, #3
 80029fa:	e7f2      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fc:	2300      	movs	r3, #0
 80029fe:	9303      	str	r3, [sp, #12]
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	9203      	str	r2, [sp, #12]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	9303      	str	r3, [sp, #12]
 8002a0a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	4639      	mov	r1, r7
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7ff ff1c 	bl	800284e <I2C_WaitOnTXEFlagUntilTimeout>
 8002a16:	b988      	cbnz	r0, 8002a3c <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a18:	f1b9 0f01 	cmp.w	r9, #1
 8002a1c:	d11a      	bne.n	8002a54 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	b2f6      	uxtb	r6, r6
 8002a22:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a24:	4642      	mov	r2, r8
 8002a26:	4639      	mov	r1, r7
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7ff ff10 	bl	800284e <I2C_WaitOnTXEFlagUntilTimeout>
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d030      	beq.n	8002a94 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d026      	beq.n	8002a86 <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 8002a38:	2001      	movs	r0, #1
 8002a3a:	e7d2      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d001      	beq.n	8002a46 <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 8002a42:	2001      	movs	r0, #1
 8002a44:	e7cd      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a46:	6822      	ldr	r2, [r4, #0]
 8002a48:	6813      	ldr	r3, [r2, #0]
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8002a50:	2001      	movs	r0, #1
 8002a52:	e7c6      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	0a32      	lsrs	r2, r6, #8
 8002a58:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5a:	4642      	mov	r2, r8
 8002a5c:	4639      	mov	r1, r7
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f7ff fef5 	bl	800284e <I2C_WaitOnTXEFlagUntilTimeout>
 8002a64:	b918      	cbnz	r0, 8002a6e <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	b2f6      	uxtb	r6, r6
 8002a6a:	611e      	str	r6, [r3, #16]
 8002a6c:	e7da      	b.n	8002a24 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d001      	beq.n	8002a78 <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 8002a74:	2001      	movs	r0, #1
 8002a76:	e7b4      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	6822      	ldr	r2, [r4, #0]
 8002a7a:	6813      	ldr	r3, [r2, #0]
 8002a7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a80:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002a82:	2001      	movs	r0, #1
 8002a84:	e7ad      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	6822      	ldr	r2, [r4, #0]
 8002a88:	6813      	ldr	r3, [r2, #0]
 8002a8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a8e:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
 8002a92:	e7a6      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a94:	6822      	ldr	r2, [r4, #0]
 8002a96:	6813      	ldr	r3, [r2, #0]
 8002a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9e:	f8cd 8000 	str.w	r8, [sp]
 8002aa2:	463b      	mov	r3, r7
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7ff fe2f 	bl	800270e <I2C_WaitOnFlagUntilTimeout>
 8002ab0:	b968      	cbnz	r0, 8002ace <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	f04a 0301 	orr.w	r3, sl, #1
 8002ab8:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aba:	4643      	mov	r3, r8
 8002abc:	463a      	mov	r2, r7
 8002abe:	490b      	ldr	r1, [pc, #44]	@ (8002aec <I2C_RequestMemoryRead+0x160>)
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7ff fe67 	bl	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac6:	3800      	subs	r0, #0
 8002ac8:	bf18      	it	ne
 8002aca:	2001      	movne	r0, #1
 8002acc:	e789      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002ad6:	d006      	beq.n	8002ae6 <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002adc:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002ade:	2003      	movs	r0, #3
 8002ae0:	e77f      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8002ae2:	2003      	movs	r0, #3
 8002ae4:	e77d      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8002ae6:	2003      	movs	r0, #3
 8002ae8:	e77b      	b.n	80029e2 <I2C_RequestMemoryRead+0x56>
 8002aea:	bf00      	nop
 8002aec:	00010002 	.word	0x00010002

08002af0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	4604      	mov	r4, r0
 8002af4:	460d      	mov	r5, r1
 8002af6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f013 0f04 	tst.w	r3, #4
 8002b00:	d121      	bne.n	8002b46 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7ff fdea 	bl	80026dc <I2C_IsAcknowledgeFailed>
 8002b08:	b9f8      	cbnz	r0, 8002b4a <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002b0e:	d0f3      	beq.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7ff fba4 	bl	800225c <HAL_GetTick>
 8002b14:	1b80      	subs	r0, r0, r6
 8002b16:	42a8      	cmp	r0, r5
 8002b18:	d801      	bhi.n	8002b1e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002b1a:	2d00      	cmp	r5, #0
 8002b1c:	d1ec      	bne.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f013 0f04 	tst.w	r3, #4
 8002b26:	d1e7      	bne.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b32:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b36:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002b38:	f042 0220 	orr.w	r2, r2, #32
 8002b3c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002b3e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002b42:	2001      	movs	r0, #1
 8002b44:	e000      	b.n	8002b48 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8002b46:	2000      	movs	r0, #0
}
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	e7fc      	b.n	8002b48 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08002b4e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002b4e:	b570      	push	{r4, r5, r6, lr}
 8002b50:	4604      	mov	r4, r0
 8002b52:	460d      	mov	r5, r1
 8002b54:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b56:	6803      	ldr	r3, [r0, #0]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002b5e:	d01b      	beq.n	8002b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  return HAL_OK;
 8002b60:	2000      	movs	r0, #0
 8002b62:	e00e      	b.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b64:	f06f 0210 	mvn.w	r2, #16
 8002b68:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b74:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b78:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002b7a:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002b7c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002b80:	2001      	movs	r0, #1
}
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002b8c:	d010      	beq.n	8002bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	6958      	ldr	r0, [r3, #20]
 8002b92:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8002b96:	d11a      	bne.n	8002bce <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b98:	6958      	ldr	r0, [r3, #20]
 8002b9a:	f010 0f10 	tst.w	r0, #16
 8002b9e:	d1e1      	bne.n	8002b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba0:	f7ff fb5c 	bl	800225c <HAL_GetTick>
 8002ba4:	1b80      	subs	r0, r0, r6
 8002ba6:	42a8      	cmp	r0, r5
 8002ba8:	d8ec      	bhi.n	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 8002baa:	2d00      	cmp	r5, #0
 8002bac:	d1ef      	bne.n	8002b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 8002bae:	e7e9      	b.n	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bbe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002bc0:	f042 0220 	orr.w	r2, r2, #32
 8002bc4:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002bc6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8002bca:	2001      	movs	r0, #1
 8002bcc:	e7d9      	b.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
  return HAL_OK;
 8002bce:	2000      	movs	r0, #0
 8002bd0:	e7d7      	b.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
	...

08002bd4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	f000 80b0 	beq.w	8002d3a <HAL_I2C_Init+0x166>
{
 8002bda:	b570      	push	{r4, r5, r6, lr}
 8002bdc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bde:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d073      	beq.n	8002cce <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be6:	2324      	movs	r3, #36	@ 0x24
 8002be8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	6822      	ldr	r2, [r4, #0]
 8002bee:	6813      	ldr	r3, [r2, #0]
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf6:	6822      	ldr	r2, [r4, #0]
 8002bf8:	6813      	ldr	r3, [r2, #0]
 8002bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bfe:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c00:	6822      	ldr	r2, [r4, #0]
 8002c02:	6813      	ldr	r3, [r2, #0]
 8002c04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c08:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c0a:	f000 fbaf 	bl	800336c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0e:	6862      	ldr	r2, [r4, #4]
 8002c10:	4b4c      	ldr	r3, [pc, #304]	@ (8002d44 <HAL_I2C_Init+0x170>)
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d860      	bhi.n	8002cd8 <HAL_I2C_Init+0x104>
 8002c16:	4b4c      	ldr	r3, [pc, #304]	@ (8002d48 <HAL_I2C_Init+0x174>)
 8002c18:	4298      	cmp	r0, r3
 8002c1a:	f240 8090 	bls.w	8002d3e <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 8002c1e:	494b      	ldr	r1, [pc, #300]	@ (8002d4c <HAL_I2C_Init+0x178>)
 8002c20:	fba1 3100 	umull	r3, r1, r1, r0
 8002c24:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c26:	6825      	ldr	r5, [r4, #0]
 8002c28:	686a      	ldr	r2, [r5, #4]
 8002c2a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002c2e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002c32:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c34:	6821      	ldr	r1, [r4, #0]
 8002c36:	6a0a      	ldr	r2, [r1, #32]
 8002c38:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002c3c:	4d41      	ldr	r5, [pc, #260]	@ (8002d44 <HAL_I2C_Init+0x170>)
 8002c3e:	6866      	ldr	r6, [r4, #4]
 8002c40:	42ae      	cmp	r6, r5
 8002c42:	d84e      	bhi.n	8002ce2 <HAL_I2C_Init+0x10e>
 8002c44:	3301      	adds	r3, #1
 8002c46:	4313      	orrs	r3, r2
 8002c48:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c4a:	6821      	ldr	r1, [r4, #0]
 8002c4c:	69ca      	ldr	r2, [r1, #28]
 8002c4e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002c52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c56:	6865      	ldr	r5, [r4, #4]
 8002c58:	4b3a      	ldr	r3, [pc, #232]	@ (8002d44 <HAL_I2C_Init+0x170>)
 8002c5a:	429d      	cmp	r5, r3
 8002c5c:	d84b      	bhi.n	8002cf6 <HAL_I2C_Init+0x122>
 8002c5e:	1e43      	subs	r3, r0, #1
 8002c60:	006d      	lsls	r5, r5, #1
 8002c62:	fbb3 f3f5 	udiv	r3, r3, r5
 8002c66:	3301      	adds	r3, #1
 8002c68:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002c6c:	4203      	tst	r3, r0
 8002c6e:	d05e      	beq.n	8002d2e <HAL_I2C_Init+0x15a>
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	431a      	orrs	r2, r3
 8002c76:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c78:	6821      	ldr	r1, [r4, #0]
 8002c7a:	680a      	ldr	r2, [r1, #0]
 8002c7c:	69e3      	ldr	r3, [r4, #28]
 8002c7e:	6a20      	ldr	r0, [r4, #32]
 8002c80:	4303      	orrs	r3, r0
 8002c82:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c8a:	6821      	ldr	r1, [r4, #0]
 8002c8c:	688a      	ldr	r2, [r1, #8]
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	68e0      	ldr	r0, [r4, #12]
 8002c92:	4303      	orrs	r3, r0
 8002c94:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8002c98:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ca0:	6821      	ldr	r1, [r4, #0]
 8002ca2:	68ca      	ldr	r2, [r1, #12]
 8002ca4:	6963      	ldr	r3, [r4, #20]
 8002ca6:	69a0      	ldr	r0, [r4, #24]
 8002ca8:	4303      	orrs	r3, r0
 8002caa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	6813      	ldr	r3, [r2, #0]
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002cce:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002cd2:	f7ff f8fb 	bl	8001ecc <HAL_I2C_MspInit>
 8002cd6:	e786      	b.n	8002be6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <HAL_I2C_Init+0x17c>)
 8002cda:	4298      	cmp	r0, r3
 8002cdc:	d89f      	bhi.n	8002c1e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002cde:	2001      	movs	r0, #1
 8002ce0:	e7f4      	b.n	8002ccc <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce2:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002ce6:	fb05 f303 	mul.w	r3, r5, r3
 8002cea:	4d1a      	ldr	r5, [pc, #104]	@ (8002d54 <HAL_I2C_Init+0x180>)
 8002cec:	fba5 5303 	umull	r5, r3, r5, r3
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	e7a7      	b.n	8002c46 <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cf6:	68a3      	ldr	r3, [r4, #8]
 8002cf8:	b95b      	cbnz	r3, 8002d12 <HAL_I2C_Init+0x13e>
 8002cfa:	1e43      	subs	r3, r0, #1
 8002cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d00:	fbb3 f3f5 	udiv	r3, r3, r5
 8002d04:	3301      	adds	r3, #1
 8002d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0a:	b193      	cbz	r3, 8002d32 <HAL_I2C_Init+0x15e>
 8002d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d10:	e7b0      	b.n	8002c74 <HAL_I2C_Init+0xa0>
 8002d12:	1e43      	subs	r3, r0, #1
 8002d14:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002d18:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002d1c:	fbb3 f3f5 	udiv	r3, r3, r5
 8002d20:	3301      	adds	r3, #1
 8002d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d26:	b133      	cbz	r3, 8002d36 <HAL_I2C_Init+0x162>
 8002d28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d2c:	e7a2      	b.n	8002c74 <HAL_I2C_Init+0xa0>
 8002d2e:	2304      	movs	r3, #4
 8002d30:	e7a0      	b.n	8002c74 <HAL_I2C_Init+0xa0>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e79e      	b.n	8002c74 <HAL_I2C_Init+0xa0>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e79c      	b.n	8002c74 <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 8002d3a:	2001      	movs	r0, #1
}
 8002d3c:	4770      	bx	lr
    return HAL_ERROR;
 8002d3e:	2001      	movs	r0, #1
 8002d40:	e7c4      	b.n	8002ccc <HAL_I2C_Init+0xf8>
 8002d42:	bf00      	nop
 8002d44:	000186a0 	.word	0x000186a0
 8002d48:	001e847f 	.word	0x001e847f
 8002d4c:	431bde83 	.word	0x431bde83
 8002d50:	003d08ff 	.word	0x003d08ff
 8002d54:	10624dd3 	.word	0x10624dd3

08002d58 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002d58:	b1a8      	cbz	r0, 8002d86 <HAL_I2C_DeInit+0x2e>
{
 8002d5a:	b510      	push	{r4, lr}
 8002d5c:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5e:	2324      	movs	r3, #36	@ 0x24
 8002d60:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002d64:	6802      	ldr	r2, [r0, #0]
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002d6e:	f7ff f8e5 	bl	8001f3c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002d72:	2000      	movs	r0, #0
 8002d74:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002d76:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d7c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8002d80:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8002d84:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d86:	2001      	movs	r0, #1
}
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_I2C_Mem_Write>:
{
 8002d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d90:	b083      	sub	sp, #12
 8002d92:	4604      	mov	r4, r0
 8002d94:	460f      	mov	r7, r1
 8002d96:	4690      	mov	r8, r2
 8002d98:	4699      	mov	r9, r3
 8002d9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7ff fa5e 	bl	800225c <HAL_GetTick>
 8002da0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da2:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002da6:	b2c0      	uxtb	r0, r0
 8002da8:	2820      	cmp	r0, #32
 8002daa:	d003      	beq.n	8002db4 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002dac:	2002      	movs	r0, #2
}
 8002dae:	b003      	add	sp, #12
 8002db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db4:	9500      	str	r5, [sp, #0]
 8002db6:	2319      	movs	r3, #25
 8002db8:	2201      	movs	r2, #1
 8002dba:	494d      	ldr	r1, [pc, #308]	@ (8002ef0 <HAL_I2C_Mem_Write+0x164>)
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f7ff fca6 	bl	800270e <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	f040 808d 	bne.w	8002ee2 <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8002dc8:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	f000 808a 	beq.w	8002ee6 <HAL_I2C_Mem_Write+0x15a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	f012 0f01 	tst.w	r2, #1
 8002de0:	d103      	bne.n	8002dea <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dea:	6822      	ldr	r2, [r4, #0]
 8002dec:	6813      	ldr	r3, [r2, #0]
 8002dee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002df2:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002df4:	2321      	movs	r3, #33	@ 0x21
 8002df6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dfa:	2340      	movs	r3, #64	@ 0x40
 8002dfc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002e06:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e08:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8002e0c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e0e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e10:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e12:	4b38      	ldr	r3, [pc, #224]	@ (8002ef4 <HAL_I2C_Mem_Write+0x168>)
 8002e14:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e16:	9501      	str	r5, [sp, #4]
 8002e18:	9600      	str	r6, [sp, #0]
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	4639      	mov	r1, r7
 8002e20:	4620      	mov	r0, r4
 8002e22:	f7ff fd43 	bl	80028ac <I2C_RequestMemoryWrite>
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d15f      	bne.n	8002eea <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8002e2a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002e2c:	b9d3      	cbnz	r3, 8002e64 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2e:	462a      	mov	r2, r5
 8002e30:	4631      	mov	r1, r6
 8002e32:	4620      	mov	r0, r4
 8002e34:	f7ff fe5c 	bl	8002af0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d044      	beq.n	8002ec6 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d03a      	beq.n	8002eb8 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 8002e42:	2001      	movs	r0, #1
 8002e44:	e7b3      	b.n	8002dae <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	e7ae      	b.n	8002dae <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	6822      	ldr	r2, [r4, #0]
 8002e52:	6813      	ldr	r3, [r2, #0]
 8002e54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e58:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	e7a7      	b.n	8002dae <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 8002e5e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0e4      	beq.n	8002e2e <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e64:	462a      	mov	r2, r5
 8002e66:	4631      	mov	r1, r6
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff fcf0 	bl	800284e <I2C_WaitOnTXEFlagUntilTimeout>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d1e9      	bne.n	8002e46 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e7a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002e80:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002e88:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8002e8a:	3901      	subs	r1, #1
 8002e8c:	b289      	uxth	r1, r1
 8002e8e:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e90:	6822      	ldr	r2, [r4, #0]
 8002e92:	6951      	ldr	r1, [r2, #20]
 8002e94:	f011 0f04 	tst.w	r1, #4
 8002e98:	d0e1      	beq.n	8002e5e <HAL_I2C_Mem_Write+0xd2>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0c7      	beq.n	8002e2e <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9e:	7843      	ldrb	r3, [r0, #1]
 8002ea0:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8002ea2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002ea8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002eae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002eb6:	e7d2      	b.n	8002e5e <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	6822      	ldr	r2, [r4, #0]
 8002eba:	6813      	ldr	r3, [r2, #0]
 8002ebc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec0:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	e773      	b.n	8002dae <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	6822      	ldr	r2, [r4, #0]
 8002ec8:	6813      	ldr	r3, [r2, #0]
 8002eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ece:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002edc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002ee0:	e765      	b.n	8002dae <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8002ee2:	2002      	movs	r0, #2
 8002ee4:	e763      	b.n	8002dae <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8002ee6:	2002      	movs	r0, #2
 8002ee8:	e761      	b.n	8002dae <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
 8002eec:	e75f      	b.n	8002dae <HAL_I2C_Mem_Write+0x22>
 8002eee:	bf00      	nop
 8002ef0:	00100002 	.word	0x00100002
 8002ef4:	ffff0000 	.word	0xffff0000

08002ef8 <HAL_I2C_Mem_Read>:
{
 8002ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002efc:	b087      	sub	sp, #28
 8002efe:	4604      	mov	r4, r0
 8002f00:	460f      	mov	r7, r1
 8002f02:	4690      	mov	r8, r2
 8002f04:	4699      	mov	r9, r3
 8002f06:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff f9a8 	bl	800225c <HAL_GetTick>
 8002f0c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002f12:	b2c0      	uxtb	r0, r0
 8002f14:	2820      	cmp	r0, #32
 8002f16:	d005      	beq.n	8002f24 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8002f18:	f04f 0902 	mov.w	r9, #2
}
 8002f1c:	4648      	mov	r0, r9
 8002f1e:	b007      	add	sp, #28
 8002f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f24:	9500      	str	r5, [sp, #0]
 8002f26:	2319      	movs	r3, #25
 8002f28:	2201      	movs	r2, #1
 8002f2a:	498a      	ldr	r1, [pc, #552]	@ (8003154 <HAL_I2C_Mem_Read+0x25c>)
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7ff fbee 	bl	800270e <I2C_WaitOnFlagUntilTimeout>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	f040 814e 	bne.w	80031d4 <HAL_I2C_Mem_Read+0x2dc>
    __HAL_LOCK(hi2c);
 8002f38:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	f000 814c 	beq.w	80031da <HAL_I2C_Mem_Read+0x2e2>
 8002f42:	2301      	movs	r3, #1
 8002f44:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	f012 0f01 	tst.w	r2, #1
 8002f50:	d103      	bne.n	8002f5a <HAL_I2C_Mem_Read+0x62>
      __HAL_I2C_ENABLE(hi2c);
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f5a:	6822      	ldr	r2, [r4, #0]
 8002f5c:	6813      	ldr	r3, [r2, #0]
 8002f5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f62:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f64:	2322      	movs	r3, #34	@ 0x22
 8002f66:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f6a:	2340      	movs	r3, #64	@ 0x40
 8002f6c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f76:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f78:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8002f7c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f7e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f80:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f82:	4b75      	ldr	r3, [pc, #468]	@ (8003158 <HAL_I2C_Mem_Read+0x260>)
 8002f84:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f86:	9501      	str	r5, [sp, #4]
 8002f88:	9600      	str	r6, [sp, #0]
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	4639      	mov	r1, r7
 8002f90:	4620      	mov	r0, r4
 8002f92:	f7ff fcfb 	bl	800298c <I2C_RequestMemoryRead>
 8002f96:	4681      	mov	r9, r0
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	f040 8121 	bne.w	80031e0 <HAL_I2C_Mem_Read+0x2e8>
    if (hi2c->XferSize == 0U)
 8002f9e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002fa0:	b993      	cbnz	r3, 8002fc8 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa2:	9302      	str	r3, [sp, #8]
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	9202      	str	r2, [sp, #8]
 8002faa:	699a      	ldr	r2, [r3, #24]
 8002fac:	9202      	str	r2, [sp, #8]
 8002fae:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb6:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 8002fb8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8101 	beq.w	80031c2 <HAL_I2C_Mem_Read+0x2ca>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc0:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800315c <HAL_I2C_Mem_Read+0x264>
 8002fc4:	2700      	movs	r7, #0
 8002fc6:	e077      	b.n	80030b8 <HAL_I2C_Mem_Read+0x1c0>
    else if (hi2c->XferSize == 1U)
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d00b      	beq.n	8002fe4 <HAL_I2C_Mem_Read+0xec>
    else if (hi2c->XferSize == 2U)
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d01b      	beq.n	8003008 <HAL_I2C_Mem_Read+0x110>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9305      	str	r3, [sp, #20]
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	9205      	str	r2, [sp, #20]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	9305      	str	r3, [sp, #20]
 8002fde:	9b05      	ldr	r3, [sp, #20]
    while (hi2c->XferSize > 0U)
 8002fe0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002fe2:	e7ed      	b.n	8002fc0 <HAL_I2C_Mem_Read+0xc8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe4:	6822      	ldr	r2, [r4, #0]
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fec:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9303      	str	r3, [sp, #12]
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	9203      	str	r2, [sp, #12]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	9203      	str	r2, [sp, #12]
 8002ffc:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e7d7      	b.n	8002fb8 <HAL_I2C_Mem_Read+0xc0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003010:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003012:	6822      	ldr	r2, [r4, #0]
 8003014:	6813      	ldr	r3, [r2, #0]
 8003016:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800301a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301c:	2300      	movs	r3, #0
 800301e:	9304      	str	r3, [sp, #16]
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	9204      	str	r2, [sp, #16]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	9304      	str	r3, [sp, #16]
 800302a:	9b04      	ldr	r3, [sp, #16]
 800302c:	e7c4      	b.n	8002fb8 <HAL_I2C_Mem_Read+0xc0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302e:	462a      	mov	r2, r5
 8003030:	4631      	mov	r1, r6
 8003032:	4620      	mov	r0, r4
 8003034:	f7ff fd8b 	bl	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003038:	2800      	cmp	r0, #0
 800303a:	f040 80d4 	bne.w	80031e6 <HAL_I2C_Mem_Read+0x2ee>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003044:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003046:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003048:	3301      	adds	r3, #1
 800304a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800304c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800304e:	3b01      	subs	r3, #1
 8003050:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003052:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003054:	3b01      	subs	r3, #1
 8003056:	b29b      	uxth	r3, r3
 8003058:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800305a:	e029      	b.n	80030b0 <HAL_I2C_Mem_Read+0x1b8>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800305c:	9500      	str	r5, [sp, #0]
 800305e:	4633      	mov	r3, r6
 8003060:	463a      	mov	r2, r7
 8003062:	4641      	mov	r1, r8
 8003064:	4620      	mov	r0, r4
 8003066:	f7ff fb52 	bl	800270e <I2C_WaitOnFlagUntilTimeout>
 800306a:	2800      	cmp	r0, #0
 800306c:	f040 80be 	bne.w	80031ec <HAL_I2C_Mem_Read+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	6813      	ldr	r3, [r2, #0]
 8003074:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003078:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003080:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003082:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003084:	1c53      	adds	r3, r2, #1
 8003086:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003088:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800308e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003090:	3b01      	subs	r3, #1
 8003092:	b29b      	uxth	r3, r3
 8003094:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800309c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800309e:	3301      	adds	r3, #1
 80030a0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80030a2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80030a4:	3b01      	subs	r3, #1
 80030a6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80030a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030b0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8085 	beq.w	80031c2 <HAL_I2C_Mem_Read+0x2ca>
      if (hi2c->XferSize <= 3U)
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d851      	bhi.n	8003160 <HAL_I2C_Mem_Read+0x268>
        if (hi2c->XferSize == 1U)
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d0b6      	beq.n	800302e <HAL_I2C_Mem_Read+0x136>
        else if (hi2c->XferSize == 2U)
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d0cb      	beq.n	800305c <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030c4:	9500      	str	r5, [sp, #0]
 80030c6:	4633      	mov	r3, r6
 80030c8:	463a      	mov	r2, r7
 80030ca:	4641      	mov	r1, r8
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7ff fb1e 	bl	800270e <I2C_WaitOnFlagUntilTimeout>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	f040 808d 	bne.w	80031f2 <HAL_I2C_Mem_Read+0x2fa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030e0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030e8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80030ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030ec:	3301      	adds	r3, #1
 80030ee:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80030f0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80030f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030fe:	9500      	str	r5, [sp, #0]
 8003100:	4633      	mov	r3, r6
 8003102:	463a      	mov	r2, r7
 8003104:	4641      	mov	r1, r8
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff fb01 	bl	800270e <I2C_WaitOnFlagUntilTimeout>
 800310c:	2800      	cmp	r0, #0
 800310e:	d173      	bne.n	80031f8 <HAL_I2C_Mem_Read+0x300>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	6813      	ldr	r3, [r2, #0]
 8003114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003118:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003120:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003122:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003124:	1c53      	adds	r3, r2, #1
 8003126:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003128:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800312e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003130:	3b01      	subs	r3, #1
 8003132:	b29b      	uxth	r3, r3
 8003134:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800313c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800313e:	3301      	adds	r3, #1
 8003140:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003142:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003148:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800314a:	3b01      	subs	r3, #1
 800314c:	b29b      	uxth	r3, r3
 800314e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003150:	e7ae      	b.n	80030b0 <HAL_I2C_Mem_Read+0x1b8>
 8003152:	bf00      	nop
 8003154:	00100002 	.word	0x00100002
 8003158:	ffff0000 	.word	0xffff0000
 800315c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003160:	462a      	mov	r2, r5
 8003162:	4631      	mov	r1, r6
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff fcf2 	bl	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout>
 800316a:	2800      	cmp	r0, #0
 800316c:	d147      	bne.n	80031fe <HAL_I2C_Mem_Read+0x306>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003174:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003176:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003178:	3301      	adds	r3, #1
 800317a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800317c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003184:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003186:	3a01      	subs	r2, #1
 8003188:	b292      	uxth	r2, r2
 800318a:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	6951      	ldr	r1, [r2, #20]
 8003190:	f011 0f04 	tst.w	r1, #4
 8003194:	d08c      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x1b8>
          if (hi2c->XferSize == 3U)
 8003196:	2b03      	cmp	r3, #3
 8003198:	d00e      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80031a0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80031a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80031a4:	3301      	adds	r3, #1
 80031a6:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80031a8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80031ae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80031b6:	e77b      	b.n	80030b0 <HAL_I2C_Mem_Read+0x1b8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e7eb      	b.n	800319a <HAL_I2C_Mem_Read+0x2a2>
    hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	2320      	movs	r3, #32
 80031c4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80031ce:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80031d2:	e6a3      	b.n	8002f1c <HAL_I2C_Mem_Read+0x24>
      return HAL_BUSY;
 80031d4:	f04f 0902 	mov.w	r9, #2
 80031d8:	e6a0      	b.n	8002f1c <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 80031da:	f04f 0902 	mov.w	r9, #2
 80031de:	e69d      	b.n	8002f1c <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 80031e0:	f04f 0901 	mov.w	r9, #1
 80031e4:	e69a      	b.n	8002f1c <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 80031e6:	f04f 0901 	mov.w	r9, #1
 80031ea:	e697      	b.n	8002f1c <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 80031ec:	f04f 0901 	mov.w	r9, #1
 80031f0:	e694      	b.n	8002f1c <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 80031f2:	f04f 0901 	mov.w	r9, #1
 80031f6:	e691      	b.n	8002f1c <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 80031f8:	f04f 0901 	mov.w	r9, #1
 80031fc:	e68e      	b.n	8002f1c <HAL_I2C_Mem_Read+0x24>
          return HAL_ERROR;
 80031fe:	f04f 0901 	mov.w	r9, #1
 8003202:	e68b      	b.n	8002f1c <HAL_I2C_Mem_Read+0x24>

08003204 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8003204:	6c00      	ldr	r0, [r0, #64]	@ 0x40
}
 8003206:	4770      	bx	lr

08003208 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003208:	2800      	cmp	r0, #0
 800320a:	f000 809d 	beq.w	8003348 <HAL_RCC_ClockConfig+0x140>
{
 800320e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003212:	460d      	mov	r5, r1
 8003214:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003216:	4b50      	ldr	r3, [pc, #320]	@ (8003358 <HAL_RCC_ClockConfig+0x150>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	428b      	cmp	r3, r1
 8003220:	d208      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x2c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	b2cb      	uxtb	r3, r1
 8003224:	4a4c      	ldr	r2, [pc, #304]	@ (8003358 <HAL_RCC_ClockConfig+0x150>)
 8003226:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003228:	6813      	ldr	r3, [r2, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	428b      	cmp	r3, r1
 8003230:	f040 808c 	bne.w	800334c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	f013 0f02 	tst.w	r3, #2
 800323a:	d017      	beq.n	800326c <HAL_RCC_ClockConfig+0x64>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	f013 0f04 	tst.w	r3, #4
 8003240:	d004      	beq.n	800324c <HAL_RCC_ClockConfig+0x44>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003242:	4a46      	ldr	r2, [pc, #280]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 8003244:	6893      	ldr	r3, [r2, #8]
 8003246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800324a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	f013 0f08 	tst.w	r3, #8
 8003252:	d004      	beq.n	800325e <HAL_RCC_ClockConfig+0x56>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003254:	4a41      	ldr	r2, [pc, #260]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 8003256:	6893      	ldr	r3, [r2, #8]
 8003258:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800325c:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800325e:	4a3f      	ldr	r2, [pc, #252]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 8003260:	6893      	ldr	r3, [r2, #8]
 8003262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003266:	68a1      	ldr	r1, [r4, #8]
 8003268:	430b      	orrs	r3, r1
 800326a:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	f013 0f01 	tst.w	r3, #1
 8003272:	d032      	beq.n	80032da <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003274:	6862      	ldr	r2, [r4, #4]
 8003276:	2a01      	cmp	r2, #1
 8003278:	d021      	beq.n	80032be <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	1e93      	subs	r3, r2, #2
 800327c:	2b01      	cmp	r3, #1
 800327e:	d925      	bls.n	80032cc <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	4b36      	ldr	r3, [pc, #216]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f013 0f02 	tst.w	r3, #2
 8003288:	d062      	beq.n	8003350 <HAL_RCC_ClockConfig+0x148>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4934      	ldr	r1, [pc, #208]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 800328c:	688b      	ldr	r3, [r1, #8]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003296:	f7fe ffe1 	bl	800225c <HAL_GetTick>
 800329a:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329c:	4f2f      	ldr	r7, [pc, #188]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329e:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	6862      	ldr	r2, [r4, #4]
 80032aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032ae:	d014      	beq.n	80032da <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b0:	f7fe ffd4 	bl	800225c <HAL_GetTick>
 80032b4:	1b80      	subs	r0, r0, r6
 80032b6:	4540      	cmp	r0, r8
 80032b8:	d9f3      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_TIMEOUT;
 80032ba:	2003      	movs	r0, #3
 80032bc:	e042      	b.n	8003344 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b27      	ldr	r3, [pc, #156]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80032c6:	d1e0      	bne.n	800328a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80032c8:	2001      	movs	r0, #1
 80032ca:	e03b      	b.n	8003344 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032cc:	4b23      	ldr	r3, [pc, #140]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80032d4:	d1d9      	bne.n	800328a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80032d6:	2001      	movs	r0, #1
 80032d8:	e034      	b.n	8003344 <HAL_RCC_ClockConfig+0x13c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032da:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <HAL_RCC_ClockConfig+0x150>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	42ab      	cmp	r3, r5
 80032e4:	d907      	bls.n	80032f6 <HAL_RCC_ClockConfig+0xee>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	b2ea      	uxtb	r2, r5
 80032e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <HAL_RCC_ClockConfig+0x150>)
 80032ea:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	42ab      	cmp	r3, r5
 80032f4:	d12e      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	f013 0f04 	tst.w	r3, #4
 80032fc:	d006      	beq.n	800330c <HAL_RCC_ClockConfig+0x104>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032fe:	4a17      	ldr	r2, [pc, #92]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 8003300:	6893      	ldr	r3, [r2, #8]
 8003302:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003306:	68e1      	ldr	r1, [r4, #12]
 8003308:	430b      	orrs	r3, r1
 800330a:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	f013 0f08 	tst.w	r3, #8
 8003312:	d007      	beq.n	8003324 <HAL_RCC_ClockConfig+0x11c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003314:	4a11      	ldr	r2, [pc, #68]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 8003316:	6893      	ldr	r3, [r2, #8]
 8003318:	6921      	ldr	r1, [r4, #16]
 800331a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800331e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003322:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003324:	f000 f842 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <HAL_RCC_ClockConfig+0x154>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003330:	4a0b      	ldr	r2, [pc, #44]	@ (8003360 <HAL_RCC_ClockConfig+0x158>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	40d8      	lsrs	r0, r3
 8003336:	4b0b      	ldr	r3, [pc, #44]	@ (8003364 <HAL_RCC_ClockConfig+0x15c>)
 8003338:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800333a:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCC_ClockConfig+0x160>)
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	f7fe ff41 	bl	80021c4 <HAL_InitTick>

  return HAL_OK;
 8003342:	2000      	movs	r0, #0
}
 8003344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003348:	2001      	movs	r0, #1
}
 800334a:	4770      	bx	lr
      return HAL_ERROR;
 800334c:	2001      	movs	r0, #1
 800334e:	e7f9      	b.n	8003344 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8003350:	2001      	movs	r0, #1
 8003352:	e7f7      	b.n	8003344 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8003354:	2001      	movs	r0, #1
 8003356:	e7f5      	b.n	8003344 <HAL_RCC_ClockConfig+0x13c>
 8003358:	40023c00 	.word	0x40023c00
 800335c:	40023800 	.word	0x40023800
 8003360:	08004e2c 	.word	0x08004e2c
 8003364:	20000048 	.word	0x20000048
 8003368:	20000050 	.word	0x20000050

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800336c:	4b04      	ldr	r3, [pc, #16]	@ (8003380 <HAL_RCC_GetPCLK1Freq+0x14>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003374:	4a03      	ldr	r2, [pc, #12]	@ (8003384 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	4a03      	ldr	r2, [pc, #12]	@ (8003388 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800337a:	6810      	ldr	r0, [r2, #0]
}
 800337c:	40d8      	lsrs	r0, r3
 800337e:	4770      	bx	lr
 8003380:	40023800 	.word	0x40023800
 8003384:	08004e24 	.word	0x08004e24
 8003388:	20000048 	.word	0x20000048

0800338c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800338c:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003394:	4a03      	ldr	r2, [pc, #12]	@ (80033a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	4a03      	ldr	r2, [pc, #12]	@ (80033a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800339a:	6810      	ldr	r0, [r2, #0]
}
 800339c:	40d8      	lsrs	r0, r3
 800339e:	4770      	bx	lr
 80033a0:	40023800 	.word	0x40023800
 80033a4:	08004e24 	.word	0x08004e24
 80033a8:	20000048 	.word	0x20000048

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ae:	4b60      	ldr	r3, [pc, #384]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d007      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x1e>
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d05f      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033be:	485d      	ldr	r0, [pc, #372]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x18c>)
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf18      	it	ne
 80033c6:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80033c8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ca:	4b59      	ldr	r3, [pc, #356]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80033d8:	d02c      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033da:	4b55      	ldr	r3, [pc, #340]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 80033dc:	6858      	ldr	r0, [r3, #4]
 80033de:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80033e2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80033e6:	ebbc 0c00 	subs.w	ip, ip, r0
 80033ea:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80033ee:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80033f2:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80033f6:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80033fa:	ebb1 010c 	subs.w	r1, r1, ip
 80033fe:	eb63 030e 	sbc.w	r3, r3, lr
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003408:	00c9      	lsls	r1, r1, #3
 800340a:	eb11 0c00 	adds.w	ip, r1, r0
 800340e:	f143 0300 	adc.w	r3, r3, #0
 8003412:	0259      	lsls	r1, r3, #9
 8003414:	2300      	movs	r3, #0
 8003416:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800341a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800341e:	f7fd fb6d 	bl	8000afc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003422:	4b43      	ldr	r3, [pc, #268]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800342e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003432:	e7c9      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b3e      	ldr	r3, [pc, #248]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 8003436:	6858      	ldr	r0, [r3, #4]
 8003438:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800343c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003440:	ebbc 0c00 	subs.w	ip, ip, r0
 8003444:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003448:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800344c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003450:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003454:	ebb1 010c 	subs.w	r1, r1, ip
 8003458:	eb63 030e 	sbc.w	r3, r3, lr
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003462:	00c9      	lsls	r1, r1, #3
 8003464:	eb11 0c00 	adds.w	ip, r1, r0
 8003468:	f143 0300 	adc.w	r3, r3, #0
 800346c:	0299      	lsls	r1, r3, #10
 800346e:	2300      	movs	r3, #0
 8003470:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003474:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003478:	f7fd fb40 	bl	8000afc <__aeabi_uldivmod>
 800347c:	e7d1      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800347e:	4b2c      	ldr	r3, [pc, #176]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800348c:	d02a      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348e:	4b28      	ldr	r3, [pc, #160]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 8003490:	6858      	ldr	r0, [r3, #4]
 8003492:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003496:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800349a:	ebbc 0c00 	subs.w	ip, ip, r0
 800349e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80034a2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80034a6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80034aa:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80034ae:	ebb1 010c 	subs.w	r1, r1, ip
 80034b2:	eb63 030e 	sbc.w	r3, r3, lr
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034bc:	00c9      	lsls	r1, r1, #3
 80034be:	eb11 0c00 	adds.w	ip, r1, r0
 80034c2:	f143 0300 	adc.w	r3, r3, #0
 80034c6:	0259      	lsls	r1, r3, #9
 80034c8:	2300      	movs	r3, #0
 80034ca:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80034ce:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80034d2:	f7fd fb13 	bl	8000afc <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034d6:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 80034de:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80034e2:	e771      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e4:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 80034e6:	6858      	ldr	r0, [r3, #4]
 80034e8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80034ec:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80034f0:	ebbc 0c00 	subs.w	ip, ip, r0
 80034f4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80034f8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80034fc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003500:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003504:	ebb1 010c 	subs.w	r1, r1, ip
 8003508:	eb63 030e 	sbc.w	r3, r3, lr
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	00c9      	lsls	r1, r1, #3
 8003514:	eb11 0c00 	adds.w	ip, r1, r0
 8003518:	f143 0300 	adc.w	r3, r3, #0
 800351c:	0299      	lsls	r1, r3, #10
 800351e:	2300      	movs	r3, #0
 8003520:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003524:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003528:	f7fd fae8 	bl	8000afc <__aeabi_uldivmod>
 800352c:	e7d3      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x12a>
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	007a1200 	.word	0x007a1200
 8003538:	00f42400 	.word	0x00f42400

0800353c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800353c:	2800      	cmp	r0, #0
 800353e:	f000 8204 	beq.w	800394a <HAL_RCC_OscConfig+0x40e>
{
 8003542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354a:	6803      	ldr	r3, [r0, #0]
 800354c:	f013 0f01 	tst.w	r3, #1
 8003550:	d041      	beq.n	80035d6 <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003552:	4b9a      	ldr	r3, [pc, #616]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b04      	cmp	r3, #4
 800355c:	d032      	beq.n	80035c4 <HAL_RCC_OscConfig+0x88>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800355e:	4b97      	ldr	r3, [pc, #604]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
        || \
 8003566:	2b08      	cmp	r3, #8
 8003568:	d027      	beq.n	80035ba <HAL_RCC_OscConfig+0x7e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356a:	4b94      	ldr	r3, [pc, #592]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d059      	beq.n	800362a <HAL_RCC_OscConfig+0xee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003576:	6863      	ldr	r3, [r4, #4]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357c:	d05b      	beq.n	8003636 <HAL_RCC_OscConfig+0xfa>
 800357e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003582:	d05e      	beq.n	8003642 <HAL_RCC_OscConfig+0x106>
 8003584:	4b8d      	ldr	r3, [pc, #564]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003594:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d05c      	beq.n	8003656 <HAL_RCC_OscConfig+0x11a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe fe5e 	bl	800225c <HAL_GetTick>
 80035a0:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4e86      	ldr	r6, [pc, #536]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80035a4:	6833      	ldr	r3, [r6, #0]
 80035a6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80035aa:	d114      	bne.n	80035d6 <HAL_RCC_OscConfig+0x9a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe fe56 	bl	800225c <HAL_GetTick>
 80035b0:	1b40      	subs	r0, r0, r5
 80035b2:	2864      	cmp	r0, #100	@ 0x64
 80035b4:	d9f6      	bls.n	80035a4 <HAL_RCC_OscConfig+0x68>
          {
            return HAL_TIMEOUT;
 80035b6:	2003      	movs	r0, #3
 80035b8:	e1ce      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035ba:	4b80      	ldr	r3, [pc, #512]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80035c2:	d0d2      	beq.n	800356a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b7d      	ldr	r3, [pc, #500]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_OscConfig+0x9a>
 80035ce:	6863      	ldr	r3, [r4, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 81bc 	beq.w	800394e <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	f013 0f02 	tst.w	r3, #2
 80035dc:	d060      	beq.n	80036a0 <HAL_RCC_OscConfig+0x164>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035de:	4b77      	ldr	r3, [pc, #476]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f013 0f0c 	tst.w	r3, #12
 80035e6:	d04a      	beq.n	800367e <HAL_RCC_OscConfig+0x142>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035e8:	4b74      	ldr	r3, [pc, #464]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d03f      	beq.n	8003674 <HAL_RCC_OscConfig+0x138>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f4:	4b71      	ldr	r3, [pc, #452]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	d069      	beq.n	80036d4 <HAL_RCC_OscConfig+0x198>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003600:	68e3      	ldr	r3, [r4, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d075      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003606:	4b6e      	ldr	r3, [pc, #440]	@ (80037c0 <HAL_RCC_OscConfig+0x284>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fe26 	bl	800225c <HAL_GetTick>
 8003610:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4e6a      	ldr	r6, [pc, #424]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003614:	6833      	ldr	r3, [r6, #0]
 8003616:	f013 0f02 	tst.w	r3, #2
 800361a:	d161      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1a4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361c:	f7fe fe1e 	bl	800225c <HAL_GetTick>
 8003620:	1b40      	subs	r0, r0, r5
 8003622:	2802      	cmp	r0, #2
 8003624:	d9f6      	bls.n	8003614 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8003626:	2003      	movs	r0, #3
 8003628:	e196      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362a:	4b64      	ldr	r3, [pc, #400]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003632:	d0a0      	beq.n	8003576 <HAL_RCC_OscConfig+0x3a>
 8003634:	e7c6      	b.n	80035c4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003636:	4a61      	ldr	r2, [pc, #388]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003638:	6813      	ldr	r3, [r2, #0]
 800363a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e7a9      	b.n	8003596 <HAL_RCC_OscConfig+0x5a>
 8003642:	4b5e      	ldr	r3, [pc, #376]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e79f      	b.n	8003596 <HAL_RCC_OscConfig+0x5a>
        tickstart = HAL_GetTick();
 8003656:	f7fe fe01 	bl	800225c <HAL_GetTick>
 800365a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365c:	4e57      	ldr	r6, [pc, #348]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 800365e:	6833      	ldr	r3, [r6, #0]
 8003660:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003664:	d0b7      	beq.n	80035d6 <HAL_RCC_OscConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003666:	f7fe fdf9 	bl	800225c <HAL_GetTick>
 800366a:	1b40      	subs	r0, r0, r5
 800366c:	2864      	cmp	r0, #100	@ 0x64
 800366e:	d9f6      	bls.n	800365e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8003670:	2003      	movs	r0, #3
 8003672:	e171      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003674:	4b51      	ldr	r3, [pc, #324]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800367c:	d1ba      	bne.n	80035f4 <HAL_RCC_OscConfig+0xb8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	4b4f      	ldr	r3, [pc, #316]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f013 0f02 	tst.w	r3, #2
 8003686:	d003      	beq.n	8003690 <HAL_RCC_OscConfig+0x154>
 8003688:	68e3      	ldr	r3, [r4, #12]
 800368a:	2b01      	cmp	r3, #1
 800368c:	f040 8161 	bne.w	8003952 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4a4a      	ldr	r2, [pc, #296]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	6921      	ldr	r1, [r4, #16]
 8003696:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800369a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800369e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	f013 0f08 	tst.w	r3, #8
 80036a6:	d049      	beq.n	800373c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036a8:	6963      	ldr	r3, [r4, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d033      	beq.n	8003716 <HAL_RCC_OscConfig+0x1da>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ae:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <HAL_RCC_OscConfig+0x284>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fe fdd1 	bl	800225c <HAL_GetTick>
 80036ba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036bc:	4e3f      	ldr	r6, [pc, #252]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80036be:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80036c0:	f013 0f02 	tst.w	r3, #2
 80036c4:	d13a      	bne.n	800373c <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c6:	f7fe fdc9 	bl	800225c <HAL_GetTick>
 80036ca:	1b40      	subs	r0, r0, r5
 80036cc:	2802      	cmp	r0, #2
 80036ce:	d9f6      	bls.n	80036be <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80036d0:	2003      	movs	r0, #3
 80036d2:	e141      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d4:	4b39      	ldr	r3, [pc, #228]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80036dc:	d190      	bne.n	8003600 <HAL_RCC_OscConfig+0xc4>
 80036de:	e7ce      	b.n	800367e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4a36      	ldr	r2, [pc, #216]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	6921      	ldr	r1, [r4, #16]
 80036e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80036ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	e7d6      	b.n	80036a0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80036f2:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <HAL_RCC_OscConfig+0x284>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036f8:	f7fe fdb0 	bl	800225c <HAL_GetTick>
 80036fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4e2f      	ldr	r6, [pc, #188]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003700:	6833      	ldr	r3, [r6, #0]
 8003702:	f013 0f02 	tst.w	r3, #2
 8003706:	d0cb      	beq.n	80036a0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003708:	f7fe fda8 	bl	800225c <HAL_GetTick>
 800370c:	1b40      	subs	r0, r0, r5
 800370e:	2802      	cmp	r0, #2
 8003710:	d9f6      	bls.n	8003700 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 8003712:	2003      	movs	r0, #3
 8003714:	e120      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003716:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <HAL_RCC_OscConfig+0x284>)
 8003718:	2200      	movs	r2, #0
 800371a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fe fd9d 	bl	800225c <HAL_GetTick>
 8003722:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4e25      	ldr	r6, [pc, #148]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003726:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003728:	f013 0f02 	tst.w	r3, #2
 800372c:	d006      	beq.n	800373c <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372e:	f7fe fd95 	bl	800225c <HAL_GetTick>
 8003732:	1b40      	subs	r0, r0, r5
 8003734:	2802      	cmp	r0, #2
 8003736:	d9f6      	bls.n	8003726 <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8003738:	2003      	movs	r0, #3
 800373a:	e10d      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	f013 0f04 	tst.w	r3, #4
 8003742:	d077      	beq.n	8003834 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003744:	4b1d      	ldr	r3, [pc, #116]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800374c:	d133      	bne.n	80037b6 <HAL_RCC_OscConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 8003754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003756:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003766:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	4b16      	ldr	r3, [pc, #88]	@ (80037c4 <HAL_RCC_OscConfig+0x288>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003770:	d02a      	beq.n	80037c8 <HAL_RCC_OscConfig+0x28c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003772:	68a3      	ldr	r3, [r4, #8]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d03b      	beq.n	80037f0 <HAL_RCC_OscConfig+0x2b4>
 8003778:	2b05      	cmp	r3, #5
 800377a:	d03f      	beq.n	80037fc <HAL_RCC_OscConfig+0x2c0>
 800377c:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 800377e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	671a      	str	r2, [r3, #112]	@ 0x70
 8003786:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003788:	f022 0204 	bic.w	r2, r2, #4
 800378c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800378e:	68a3      	ldr	r3, [r4, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d03d      	beq.n	8003810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe fd62 	bl	800225c <HAL_GetTick>
 8003798:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	4f08      	ldr	r7, [pc, #32]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037a2:	f013 0f02 	tst.w	r3, #2
 80037a6:	d144      	bne.n	8003832 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fe fd58 	bl	800225c <HAL_GetTick>
 80037ac:	1b80      	subs	r0, r0, r6
 80037ae:	4540      	cmp	r0, r8
 80037b0:	d9f6      	bls.n	80037a0 <HAL_RCC_OscConfig+0x264>
        {
          return HAL_TIMEOUT;
 80037b2:	2003      	movs	r0, #3
 80037b4:	e0d0      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 80037b6:	2500      	movs	r5, #0
 80037b8:	e7d6      	b.n	8003768 <HAL_RCC_OscConfig+0x22c>
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470000 	.word	0x42470000
 80037c4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003978 <HAL_RCC_OscConfig+0x43c>)
 80037ca:	6813      	ldr	r3, [r2, #0]
 80037cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80037d2:	f7fe fd43 	bl	800225c <HAL_GetTick>
 80037d6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4f67      	ldr	r7, [pc, #412]	@ (8003978 <HAL_RCC_OscConfig+0x43c>)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80037e0:	d1c7      	bne.n	8003772 <HAL_RCC_OscConfig+0x236>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e2:	f7fe fd3b 	bl	800225c <HAL_GetTick>
 80037e6:	1b80      	subs	r0, r0, r6
 80037e8:	2802      	cmp	r0, #2
 80037ea:	d9f6      	bls.n	80037da <HAL_RCC_OscConfig+0x29e>
          return HAL_TIMEOUT;
 80037ec:	2003      	movs	r0, #3
 80037ee:	e0b3      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	4a62      	ldr	r2, [pc, #392]	@ (800397c <HAL_RCC_OscConfig+0x440>)
 80037f2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fa:	e7c8      	b.n	800378e <HAL_RCC_OscConfig+0x252>
 80037fc:	4b5f      	ldr	r3, [pc, #380]	@ (800397c <HAL_RCC_OscConfig+0x440>)
 80037fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003800:	f042 0204 	orr.w	r2, r2, #4
 8003804:	671a      	str	r2, [r3, #112]	@ 0x70
 8003806:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	671a      	str	r2, [r3, #112]	@ 0x70
 800380e:	e7be      	b.n	800378e <HAL_RCC_OscConfig+0x252>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe fd24 	bl	800225c <HAL_GetTick>
 8003814:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003816:	4f59      	ldr	r7, [pc, #356]	@ (800397c <HAL_RCC_OscConfig+0x440>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800381e:	f013 0f02 	tst.w	r3, #2
 8003822:	d006      	beq.n	8003832 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fe fd1a 	bl	800225c <HAL_GetTick>
 8003828:	1b80      	subs	r0, r0, r6
 800382a:	4540      	cmp	r0, r8
 800382c:	d9f6      	bls.n	800381c <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 800382e:	2003      	movs	r0, #3
 8003830:	e092      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003832:	b9ed      	cbnz	r5, 8003870 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003834:	69a3      	ldr	r3, [r4, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 808d 	beq.w	8003956 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800383c:	4a4f      	ldr	r2, [pc, #316]	@ (800397c <HAL_RCC_OscConfig+0x440>)
 800383e:	6892      	ldr	r2, [r2, #8]
 8003840:	f002 020c 	and.w	r2, r2, #12
 8003844:	2a08      	cmp	r2, #8
 8003846:	d054      	beq.n	80038f2 <HAL_RCC_OscConfig+0x3b6>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003848:	2b02      	cmp	r3, #2
 800384a:	d017      	beq.n	800387c <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384c:	4b4c      	ldr	r3, [pc, #304]	@ (8003980 <HAL_RCC_OscConfig+0x444>)
 800384e:	2200      	movs	r2, #0
 8003850:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fe fd03 	bl	800225c <HAL_GetTick>
 8003856:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003858:	4d48      	ldr	r5, [pc, #288]	@ (800397c <HAL_RCC_OscConfig+0x440>)
 800385a:	682b      	ldr	r3, [r5, #0]
 800385c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003860:	d045      	beq.n	80038ee <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003862:	f7fe fcfb 	bl	800225c <HAL_GetTick>
 8003866:	1b00      	subs	r0, r0, r4
 8003868:	2802      	cmp	r0, #2
 800386a:	d9f6      	bls.n	800385a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800386c:	2003      	movs	r0, #3
 800386e:	e073      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4a42      	ldr	r2, [pc, #264]	@ (800397c <HAL_RCC_OscConfig+0x440>)
 8003872:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003878:	6413      	str	r3, [r2, #64]	@ 0x40
 800387a:	e7db      	b.n	8003834 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b40      	ldr	r3, [pc, #256]	@ (8003980 <HAL_RCC_OscConfig+0x444>)
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003882:	f7fe fceb 	bl	800225c <HAL_GetTick>
 8003886:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003888:	4e3c      	ldr	r6, [pc, #240]	@ (800397c <HAL_RCC_OscConfig+0x440>)
 800388a:	6833      	ldr	r3, [r6, #0]
 800388c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003890:	d006      	beq.n	80038a0 <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fe fce3 	bl	800225c <HAL_GetTick>
 8003896:	1b40      	subs	r0, r0, r5
 8003898:	2802      	cmp	r0, #2
 800389a:	d9f6      	bls.n	800388a <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 800389c:	2003      	movs	r0, #3
 800389e:	e05b      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038a0:	69e3      	ldr	r3, [r4, #28]
 80038a2:	6a22      	ldr	r2, [r4, #32]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80038a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80038ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80038ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038b2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80038b4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80038b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80038ba:	0852      	lsrs	r2, r2, #1
 80038bc:	3a01      	subs	r2, #1
 80038be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038c2:	4a2e      	ldr	r2, [pc, #184]	@ (800397c <HAL_RCC_OscConfig+0x440>)
 80038c4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80038c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003980 <HAL_RCC_OscConfig+0x444>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80038cc:	f7fe fcc6 	bl	800225c <HAL_GetTick>
 80038d0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4d2a      	ldr	r5, [pc, #168]	@ (800397c <HAL_RCC_OscConfig+0x440>)
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fcbe 	bl	800225c <HAL_GetTick>
 80038e0:	1b00      	subs	r0, r0, r4
 80038e2:	2802      	cmp	r0, #2
 80038e4:	d9f6      	bls.n	80038d4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80038e6:	2003      	movs	r0, #3
 80038e8:	e036      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80038ea:	2000      	movs	r0, #0
 80038ec:	e034      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
 80038ee:	2000      	movs	r0, #0
 80038f0:	e032      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d033      	beq.n	800395e <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->PLLCFGR;
 80038f6:	4b21      	ldr	r3, [pc, #132]	@ (800397c <HAL_RCC_OscConfig+0x440>)
 80038f8:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fe:	69e2      	ldr	r2, [r4, #28]
 8003900:	4291      	cmp	r1, r2
 8003902:	d12e      	bne.n	8003962 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003904:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003908:	6a21      	ldr	r1, [r4, #32]
 800390a:	428a      	cmp	r2, r1
 800390c:	d12b      	bne.n	8003966 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003910:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003914:	401a      	ands	r2, r3
 8003916:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800391a:	d126      	bne.n	800396a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391c:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003920:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003922:	0852      	lsrs	r2, r2, #1
 8003924:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003926:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800392a:	d120      	bne.n	800396e <HAL_RCC_OscConfig+0x432>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003930:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003932:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003936:	d11c      	bne.n	8003972 <HAL_RCC_OscConfig+0x436>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003938:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800393a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393e:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8003942:	bf14      	ite	ne
 8003944:	2001      	movne	r0, #1
 8003946:	2000      	moveq	r0, #0
 8003948:	e006      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
    return HAL_ERROR;
 800394a:	2001      	movs	r0, #1
}
 800394c:	4770      	bx	lr
        return HAL_ERROR;
 800394e:	2001      	movs	r0, #1
 8003950:	e002      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
        return HAL_ERROR;
 8003952:	2001      	movs	r0, #1
 8003954:	e000      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 8003956:	2000      	movs	r0, #0
}
 8003958:	b002      	add	sp, #8
 800395a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800395e:	2001      	movs	r0, #1
 8003960:	e7fa      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
 8003962:	2001      	movs	r0, #1
 8003964:	e7f8      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
 8003966:	2001      	movs	r0, #1
 8003968:	e7f6      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
 800396a:	2001      	movs	r0, #1
 800396c:	e7f4      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
 800396e:	2001      	movs	r0, #1
 8003970:	e7f2      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
 8003972:	2001      	movs	r0, #1
 8003974:	e7f0      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
 8003976:	bf00      	nop
 8003978:	40007000 	.word	0x40007000
 800397c:	40023800 	.word	0x40023800
 8003980:	42470000 	.word	0x42470000

08003984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003988:	6a02      	ldr	r2, [r0, #32]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003990:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003992:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003994:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003998:	680d      	ldr	r5, [r1, #0]
 800399a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800399c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039a0:	688d      	ldr	r5, [r1, #8]
 80039a2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039a4:	4d0d      	ldr	r5, [pc, #52]	@ (80039dc <TIM_OC1_SetConfig+0x58>)
 80039a6:	42a8      	cmp	r0, r5
 80039a8:	d003      	beq.n	80039b2 <TIM_OC1_SetConfig+0x2e>
 80039aa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80039ae:	42a8      	cmp	r0, r5
 80039b0:	d10d      	bne.n	80039ce <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039b2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039b6:	68cd      	ldr	r5, [r1, #12]
 80039b8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ba:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039be:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039c2:	698d      	ldr	r5, [r1, #24]
 80039c4:	694e      	ldr	r6, [r1, #20]
 80039c6:	ea46 0c05 	orr.w	ip, r6, r5
 80039ca:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039d2:	684a      	ldr	r2, [r1, #4]
 80039d4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	6203      	str	r3, [r0, #32]
}
 80039d8:	bc70      	pop	{r4, r5, r6}
 80039da:	4770      	bx	lr
 80039dc:	40010000 	.word	0x40010000

080039e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039e4:	6a02      	ldr	r2, [r0, #32]
 80039e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039ea:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039f0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f4:	680d      	ldr	r5, [r1, #0]
 80039f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039fc:	688d      	ldr	r5, [r1, #8]
 80039fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a02:	4d0e      	ldr	r5, [pc, #56]	@ (8003a3c <TIM_OC3_SetConfig+0x5c>)
 8003a04:	42a8      	cmp	r0, r5
 8003a06:	d003      	beq.n	8003a10 <TIM_OC3_SetConfig+0x30>
 8003a08:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003a0c:	42a8      	cmp	r0, r5
 8003a0e:	d10e      	bne.n	8003a2e <TIM_OC3_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a14:	68cd      	ldr	r5, [r1, #12]
 8003a16:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a1e:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a22:	698d      	ldr	r5, [r1, #24]
 8003a24:	694e      	ldr	r6, [r1, #20]
 8003a26:	ea46 0c05 	orr.w	ip, r6, r5
 8003a2a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a30:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a32:	684a      	ldr	r2, [r1, #4]
 8003a34:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a36:	6203      	str	r3, [r0, #32]
}
 8003a38:	bc70      	pop	{r4, r5, r6}
 8003a3a:	4770      	bx	lr
 8003a3c:	40010000 	.word	0x40010000

08003a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a44:	6a02      	ldr	r2, [r0, #32]
 8003a46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a4a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a50:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a54:	680d      	ldr	r5, [r1, #0]
 8003a56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a5e:	688d      	ldr	r5, [r1, #8]
 8003a60:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a64:	4d09      	ldr	r5, [pc, #36]	@ (8003a8c <TIM_OC4_SetConfig+0x4c>)
 8003a66:	42a8      	cmp	r0, r5
 8003a68:	d003      	beq.n	8003a72 <TIM_OC4_SetConfig+0x32>
 8003a6a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003a6e:	42a8      	cmp	r0, r5
 8003a70:	d104      	bne.n	8003a7c <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a72:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a76:	694d      	ldr	r5, [r1, #20]
 8003a78:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a80:	684a      	ldr	r2, [r1, #4]
 8003a82:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a84:	6203      	str	r3, [r0, #32]
}
 8003a86:	bc30      	pop	{r4, r5}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000

08003a90 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003a90:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a92:	4a4d      	ldr	r2, [pc, #308]	@ (8003bc8 <TIM_Base_SetConfig+0x138>)
 8003a94:	4290      	cmp	r0, r2
 8003a96:	d067      	beq.n	8003b68 <TIM_Base_SetConfig+0xd8>
 8003a98:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a9c:	d07e      	beq.n	8003b9c <TIM_Base_SetConfig+0x10c>
 8003a9e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003aa2:	4290      	cmp	r0, r2
 8003aa4:	d056      	beq.n	8003b54 <TIM_Base_SetConfig+0xc4>
 8003aa6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aaa:	4290      	cmp	r0, r2
 8003aac:	d057      	beq.n	8003b5e <TIM_Base_SetConfig+0xce>
 8003aae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ab2:	4290      	cmp	r0, r2
 8003ab4:	f000 8083 	beq.w	8003bbe <TIM_Base_SetConfig+0x12e>
 8003ab8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003abc:	4290      	cmp	r0, r2
 8003abe:	d01f      	beq.n	8003b00 <TIM_Base_SetConfig+0x70>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac0:	4a42      	ldr	r2, [pc, #264]	@ (8003bcc <TIM_Base_SetConfig+0x13c>)
 8003ac2:	4290      	cmp	r0, r2
 8003ac4:	d06e      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
 8003ac6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aca:	4290      	cmp	r0, r2
 8003acc:	d06a      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
 8003ace:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ad2:	4290      	cmp	r0, r2
 8003ad4:	d066      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
 8003ad6:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8003ada:	4290      	cmp	r0, r2
 8003adc:	d062      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
 8003ade:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ae2:	4290      	cmp	r0, r2
 8003ae4:	d05e      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
 8003ae6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aea:	4290      	cmp	r0, r2
 8003aec:	d05a      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003af2:	694a      	ldr	r2, [r1, #20]
 8003af4:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af6:	688a      	ldr	r2, [r1, #8]
 8003af8:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003afa:	680a      	ldr	r2, [r1, #0]
 8003afc:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003afe:	e045      	b.n	8003b8c <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b04:	684a      	ldr	r2, [r1, #4]
 8003b06:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b08:	4a2f      	ldr	r2, [pc, #188]	@ (8003bc8 <TIM_Base_SetConfig+0x138>)
 8003b0a:	4290      	cmp	r0, r2
 8003b0c:	d030      	beq.n	8003b70 <TIM_Base_SetConfig+0xe0>
 8003b0e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003b12:	d047      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
 8003b14:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003b18:	4290      	cmp	r0, r2
 8003b1a:	d043      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
 8003b1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b20:	4290      	cmp	r0, r2
 8003b22:	d03f      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
 8003b24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b28:	4290      	cmp	r0, r2
 8003b2a:	d03b      	beq.n	8003ba4 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b30:	68ca      	ldr	r2, [r1, #12]
 8003b32:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b38:	694a      	ldr	r2, [r1, #20]
 8003b3a:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3c:	688a      	ldr	r2, [r1, #8]
 8003b3e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b40:	680a      	ldr	r2, [r1, #0]
 8003b42:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b44:	4a20      	ldr	r2, [pc, #128]	@ (8003bc8 <TIM_Base_SetConfig+0x138>)
 8003b46:	4290      	cmp	r0, r2
 8003b48:	d01e      	beq.n	8003b88 <TIM_Base_SetConfig+0xf8>
 8003b4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b4e:	4290      	cmp	r0, r2
 8003b50:	d01a      	beq.n	8003b88 <TIM_Base_SetConfig+0xf8>
 8003b52:	e01b      	b.n	8003b8c <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b58:	684a      	ldr	r2, [r1, #4]
 8003b5a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5c:	e022      	b.n	8003ba4 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b62:	684a      	ldr	r2, [r1, #4]
 8003b64:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b66:	e01d      	b.n	8003ba4 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b6c:	684a      	ldr	r2, [r1, #4]
 8003b6e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b74:	68ca      	ldr	r2, [r1, #12]
 8003b76:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b7c:	694a      	ldr	r2, [r1, #20]
 8003b7e:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b80:	688a      	ldr	r2, [r1, #8]
 8003b82:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b84:	680a      	ldr	r2, [r1, #0]
 8003b86:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003b88:	690a      	ldr	r2, [r1, #16]
 8003b8a:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b8c:	6802      	ldr	r2, [r0, #0]
 8003b8e:	f042 0204 	orr.w	r2, r2, #4
 8003b92:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003b94:	2201      	movs	r2, #1
 8003b96:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8003b98:	6003      	str	r3, [r0, #0]
}
 8003b9a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ba0:	684a      	ldr	r2, [r1, #4]
 8003ba2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba8:	68ca      	ldr	r2, [r1, #12]
 8003baa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bb0:	694a      	ldr	r2, [r1, #20]
 8003bb2:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	688a      	ldr	r2, [r1, #8]
 8003bb6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003bb8:	680a      	ldr	r2, [r1, #0]
 8003bba:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bbc:	e7e6      	b.n	8003b8c <TIM_Base_SetConfig+0xfc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bc2:	684a      	ldr	r2, [r1, #4]
 8003bc4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc6:	e7ed      	b.n	8003ba4 <TIM_Base_SetConfig+0x114>
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	40014000 	.word	0x40014000

08003bd0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003bd0:	b340      	cbz	r0, 8003c24 <HAL_TIM_PWM_Init+0x54>
{
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003bda:	b1f3      	cbz	r3, 8003c1a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be2:	4621      	mov	r1, r4
 8003be4:	f851 0b04 	ldr.w	r0, [r1], #4
 8003be8:	f7ff ff52 	bl	8003a90 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003bf6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003bfa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003bfe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c02:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c0a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003c0e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c12:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003c16:	2000      	movs	r0, #0
}
 8003c18:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003c1a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003c1e:	f7fe f9ab 	bl	8001f78 <HAL_TIM_PWM_MspInit>
 8003c22:	e7db      	b.n	8003bdc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003c24:	2001      	movs	r0, #1
}
 8003c26:	4770      	bx	lr

08003c28 <TIM_OC2_SetConfig>:
{
 8003c28:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8003c2a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c2c:	6a02      	ldr	r2, [r0, #32]
 8003c2e:	f022 0210 	bic.w	r2, r2, #16
 8003c32:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003c34:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003c36:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c38:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c3c:	680d      	ldr	r5, [r1, #0]
 8003c3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003c42:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c46:	688d      	ldr	r5, [r1, #8]
 8003c48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c4c:	4d0e      	ldr	r5, [pc, #56]	@ (8003c88 <TIM_OC2_SetConfig+0x60>)
 8003c4e:	42a8      	cmp	r0, r5
 8003c50:	d003      	beq.n	8003c5a <TIM_OC2_SetConfig+0x32>
 8003c52:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003c56:	42a8      	cmp	r0, r5
 8003c58:	d10e      	bne.n	8003c78 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c5e:	68cd      	ldr	r5, [r1, #12]
 8003c60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c68:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c6c:	698d      	ldr	r5, [r1, #24]
 8003c6e:	694e      	ldr	r6, [r1, #20]
 8003c70:	ea46 0c05 	orr.w	ip, r6, r5
 8003c74:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8003c78:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003c7a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003c7c:	684a      	ldr	r2, [r1, #4]
 8003c7e:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003c80:	6203      	str	r3, [r0, #32]
}
 8003c82:	bc70      	pop	{r4, r5, r6}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000

08003c8c <HAL_TIM_PWM_ConfigChannel>:
{
 8003c8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003c8e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d066      	beq.n	8003d64 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003c96:	4604      	mov	r4, r0
 8003c98:	460d      	mov	r5, r1
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003ca0:	2a0c      	cmp	r2, #12
 8003ca2:	d85a      	bhi.n	8003d5a <HAL_TIM_PWM_ConfigChannel+0xce>
 8003ca4:	e8df f002 	tbb	[pc, r2]
 8003ca8:	59595907 	.word	0x59595907
 8003cac:	5959591b 	.word	0x5959591b
 8003cb0:	59595930 	.word	0x59595930
 8003cb4:	44          	.byte	0x44
 8003cb5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cb6:	6800      	ldr	r0, [r0, #0]
 8003cb8:	f7ff fe64 	bl	8003984 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	6993      	ldr	r3, [r2, #24]
 8003cc0:	f043 0308 	orr.w	r3, r3, #8
 8003cc4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cc6:	6822      	ldr	r2, [r4, #0]
 8003cc8:	6993      	ldr	r3, [r2, #24]
 8003cca:	f023 0304 	bic.w	r3, r3, #4
 8003cce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cd0:	6822      	ldr	r2, [r4, #0]
 8003cd2:	6993      	ldr	r3, [r2, #24]
 8003cd4:	6929      	ldr	r1, [r5, #16]
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003cda:	2000      	movs	r0, #0
      break;
 8003cdc:	e03e      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cde:	6800      	ldr	r0, [r0, #0]
 8003ce0:	f7ff ffa2 	bl	8003c28 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6993      	ldr	r3, [r2, #24]
 8003ce8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	6993      	ldr	r3, [r2, #24]
 8003cf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cf6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	6993      	ldr	r3, [r2, #24]
 8003cfc:	6929      	ldr	r1, [r5, #16]
 8003cfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d02:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2000      	movs	r0, #0
      break;
 8003d06:	e029      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d08:	6800      	ldr	r0, [r0, #0]
 8003d0a:	f7ff fe69 	bl	80039e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d0e:	6822      	ldr	r2, [r4, #0]
 8003d10:	69d3      	ldr	r3, [r2, #28]
 8003d12:	f043 0308 	orr.w	r3, r3, #8
 8003d16:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	69d3      	ldr	r3, [r2, #28]
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d22:	6822      	ldr	r2, [r4, #0]
 8003d24:	69d3      	ldr	r3, [r2, #28]
 8003d26:	6929      	ldr	r1, [r5, #16]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2c:	2000      	movs	r0, #0
      break;
 8003d2e:	e015      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d30:	6800      	ldr	r0, [r0, #0]
 8003d32:	f7ff fe85 	bl	8003a40 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	69d3      	ldr	r3, [r2, #28]
 8003d3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d3e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	69d3      	ldr	r3, [r2, #28]
 8003d44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d48:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	69d3      	ldr	r3, [r2, #28]
 8003d4e:	6929      	ldr	r1, [r5, #16]
 8003d50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d54:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2000      	movs	r0, #0
      break;
 8003d58:	e000      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003d5a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003d64:	2002      	movs	r0, #2
 8003d66:	e7fc      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003d68 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d68:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d6c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d6e:	f04f 0c01 	mov.w	ip, #1
 8003d72:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8003d76:	ea23 030c 	bic.w	r3, r3, ip
 8003d7a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d7c:	6a03      	ldr	r3, [r0, #32]
 8003d7e:	408a      	lsls	r2, r1
 8003d80:	431a      	orrs	r2, r3
 8003d82:	6202      	str	r2, [r0, #32]
}
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_TIM_PWM_Start>:
{
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	bba1      	cbnz	r1, 8003dfa <HAL_TIM_PWM_Start+0x72>
 8003d90:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d167      	bne.n	8003e6a <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003da0:	2201      	movs	r2, #1
 8003da2:	4601      	mov	r1, r0
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	f7ff ffdf 	bl	8003d68 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	4a31      	ldr	r2, [pc, #196]	@ (8003e74 <HAL_TIM_PWM_Start+0xec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d048      	beq.n	8003e44 <HAL_TIM_PWM_Start+0xbc>
 8003db2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d044      	beq.n	8003e44 <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dbe:	d049      	beq.n	8003e54 <HAL_TIM_PWM_Start+0xcc>
 8003dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e78 <HAL_TIM_PWM_Start+0xf0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d046      	beq.n	8003e54 <HAL_TIM_PWM_Start+0xcc>
 8003dc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d042      	beq.n	8003e54 <HAL_TIM_PWM_Start+0xcc>
 8003dce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d03e      	beq.n	8003e54 <HAL_TIM_PWM_Start+0xcc>
 8003dd6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d03a      	beq.n	8003e54 <HAL_TIM_PWM_Start+0xcc>
 8003dde:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d036      	beq.n	8003e54 <HAL_TIM_PWM_Start+0xcc>
 8003de6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d032      	beq.n	8003e54 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003df6:	2000      	movs	r0, #0
 8003df8:	e036      	b.n	8003e68 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dfa:	2904      	cmp	r1, #4
 8003dfc:	d00c      	beq.n	8003e18 <HAL_TIM_PWM_Start+0x90>
 8003dfe:	2908      	cmp	r1, #8
 8003e00:	bf0c      	ite	eq
 8003e02:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 8003e06:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	bf18      	it	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	b143      	cbz	r3, 8003e26 <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 8003e14:	2001      	movs	r0, #1
 8003e16:	e027      	b.n	8003e68 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e18:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	bf18      	it	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	e7f5      	b.n	8003e12 <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e26:	2804      	cmp	r0, #4
 8003e28:	d008      	beq.n	8003e3c <HAL_TIM_PWM_Start+0xb4>
 8003e2a:	2808      	cmp	r0, #8
 8003e2c:	f04f 0302 	mov.w	r3, #2
 8003e30:	bf0c      	ite	eq
 8003e32:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8003e36:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8003e3a:	e7b1      	b.n	8003da0 <HAL_TIM_PWM_Start+0x18>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003e42:	e7ad      	b.n	8003da0 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8003e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	4a09      	ldr	r2, [pc, #36]	@ (8003e74 <HAL_TIM_PWM_Start+0xec>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d1b2      	bne.n	8003dba <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5a:	2a06      	cmp	r2, #6
 8003e5c:	d007      	beq.n	8003e6e <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003e66:	2000      	movs	r0, #0
}
 8003e68:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	e7fc      	b.n	8003e68 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8003e6e:	2000      	movs	r0, #0
 8003e70:	e7fa      	b.n	8003e68 <HAL_TIM_PWM_Start+0xe0>
 8003e72:	bf00      	nop
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40000400 	.word	0x40000400

08003e7c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003e80:	2a01      	cmp	r2, #1
 8003e82:	d03b      	beq.n	8003efc <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8003e84:	b430      	push	{r4, r5}
 8003e86:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e94:	6804      	ldr	r4, [r0, #0]
 8003e96:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e98:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e9e:	680d      	ldr	r5, [r1, #0]
 8003ea0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea2:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4c16      	ldr	r4, [pc, #88]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8003ea8:	42a2      	cmp	r2, r4
 8003eaa:	d01a      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003eac:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003eb0:	d017      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003eb2:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 8003eb6:	42a2      	cmp	r2, r4
 8003eb8:	d013      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003eba:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003ebe:	42a2      	cmp	r2, r4
 8003ec0:	d00f      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003ec2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003ec6:	42a2      	cmp	r2, r4
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003eca:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 8003ece:	42a2      	cmp	r2, r4
 8003ed0:	d007      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003ed2:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 8003ed6:	42a2      	cmp	r2, r4
 8003ed8:	d003      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003eda:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8003ede:	42a2      	cmp	r2, r4
 8003ee0:	d104      	bne.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee2:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee6:	6849      	ldr	r1, [r1, #4]
 8003ee8:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eea:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003ef8:	bc30      	pop	{r4, r5}
 8003efa:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003efc:	2002      	movs	r0, #2
}
 8003efe:	4770      	bx	lr
 8003f00:	40010000 	.word	0x40010000

08003f04 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f04:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	f102 030c 	add.w	r3, r2, #12
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	320c      	adds	r2, #12
 8003f14:	e842 3100 	strex	r1, r3, [r2]
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	d1f3      	bne.n	8003f04 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	f102 0314 	add.w	r3, r2, #20
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	3214      	adds	r2, #20
 8003f2c:	e842 3100 	strex	r1, r3, [r2]
 8003f30:	2900      	cmp	r1, #0
 8003f32:	d1f3      	bne.n	8003f1c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f34:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d005      	beq.n	8003f46 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f40:	2300      	movs	r3, #0
 8003f42:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003f44:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	f102 030c 	add.w	r3, r2, #12
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	320c      	adds	r2, #12
 8003f56:	e842 3100 	strex	r1, r3, [r2]
 8003f5a:	2900      	cmp	r1, #0
 8003f5c:	d1f3      	bne.n	8003f46 <UART_EndRxTransfer+0x42>
 8003f5e:	e7ec      	b.n	8003f3a <UART_EndRxTransfer+0x36>

08003f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f60:	b510      	push	{r4, lr}
 8003f62:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f64:	6802      	ldr	r2, [r0, #0]
 8003f66:	6913      	ldr	r3, [r2, #16]
 8003f68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f6c:	68c1      	ldr	r1, [r0, #12]
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8003f72:	6801      	ldr	r1, [r0, #0]
 8003f74:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f76:	6883      	ldr	r3, [r0, #8]
 8003f78:	6900      	ldr	r0, [r0, #16]
 8003f7a:	4303      	orrs	r3, r0
 8003f7c:	6960      	ldr	r0, [r4, #20]
 8003f7e:	4303      	orrs	r3, r0
 8003f80:	69e0      	ldr	r0, [r4, #28]
 8003f82:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003f84:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8003f88:	f022 020c 	bic.w	r2, r2, #12
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f90:	6822      	ldr	r2, [r4, #0]
 8003f92:	6953      	ldr	r3, [r2, #20]
 8003f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f98:	69a1      	ldr	r1, [r4, #24]
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800405c <UART_SetConfig+0xfc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d006      	beq.n	8003fb4 <UART_SetConfig+0x54>
 8003fa6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d002      	beq.n	8003fb4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fae:	f7ff f9dd 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8003fb2:	e001      	b.n	8003fb8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fb4:	f7ff f9ea 	bl	800338c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb8:	69e3      	ldr	r3, [r4, #28]
 8003fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fbe:	d024      	beq.n	800400a <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	1803      	adds	r3, r0, r0
 8003fc4:	4149      	adcs	r1, r1
 8003fc6:	181b      	adds	r3, r3, r0
 8003fc8:	f141 0100 	adc.w	r1, r1, #0
 8003fcc:	00c9      	lsls	r1, r1, #3
 8003fce:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	1818      	adds	r0, r3, r0
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003fdc:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003fe0:	f141 0100 	adc.w	r1, r1, #0
 8003fe4:	f7fc fd8a 	bl	8000afc <__aeabi_uldivmod>
 8003fe8:	6821      	ldr	r1, [r4, #0]
 8003fea:	4a1d      	ldr	r2, [pc, #116]	@ (8004060 <UART_SetConfig+0x100>)
 8003fec:	fba2 4300 	umull	r4, r3, r2, r0
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	2464      	movs	r4, #100	@ 0x64
 8003ff4:	fb04 0013 	mls	r0, r4, r3, r0
 8003ff8:	0100      	lsls	r0, r0, #4
 8003ffa:	3032      	adds	r0, #50	@ 0x32
 8003ffc:	fba2 2000 	umull	r2, r0, r2, r0
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8004006:	608b      	str	r3, [r1, #8]
  }
}
 8004008:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800400a:	2300      	movs	r3, #0
 800400c:	1802      	adds	r2, r0, r0
 800400e:	eb43 0103 	adc.w	r1, r3, r3
 8004012:	1812      	adds	r2, r2, r0
 8004014:	f141 0100 	adc.w	r1, r1, #0
 8004018:	00c9      	lsls	r1, r1, #3
 800401a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800401e:	00d2      	lsls	r2, r2, #3
 8004020:	1810      	adds	r0, r2, r0
 8004022:	f141 0100 	adc.w	r1, r1, #0
 8004026:	6862      	ldr	r2, [r4, #4]
 8004028:	1892      	adds	r2, r2, r2
 800402a:	415b      	adcs	r3, r3
 800402c:	f7fc fd66 	bl	8000afc <__aeabi_uldivmod>
 8004030:	4a0b      	ldr	r2, [pc, #44]	@ (8004060 <UART_SetConfig+0x100>)
 8004032:	fba2 3100 	umull	r3, r1, r2, r0
 8004036:	0949      	lsrs	r1, r1, #5
 8004038:	2364      	movs	r3, #100	@ 0x64
 800403a:	fb03 0311 	mls	r3, r3, r1, r0
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	3332      	adds	r3, #50	@ 0x32
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	6820      	ldr	r0, [r4, #0]
 8004048:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800404c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004056:	4413      	add	r3, r2
 8004058:	6083      	str	r3, [r0, #8]
 800405a:	e7d5      	b.n	8004008 <UART_SetConfig+0xa8>
 800405c:	40011000 	.word	0x40011000
 8004060:	51eb851f 	.word	0x51eb851f

08004064 <UART_WaitOnFlagUntilTimeout>:
{
 8004064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004068:	b083      	sub	sp, #12
 800406a:	4680      	mov	r8, r0
 800406c:	460d      	mov	r5, r1
 800406e:	4616      	mov	r6, r2
 8004070:	4699      	mov	r9, r3
 8004072:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004074:	f8d8 3000 	ldr.w	r3, [r8]
 8004078:	681c      	ldr	r4, [r3, #0]
 800407a:	ea35 0404 	bics.w	r4, r5, r4
 800407e:	bf0c      	ite	eq
 8004080:	2401      	moveq	r4, #1
 8004082:	2400      	movne	r4, #0
 8004084:	42b4      	cmp	r4, r6
 8004086:	d128      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8004088:	f1b7 3fff 	cmp.w	r7, #4294967295
 800408c:	d0f4      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7fe f8e5 	bl	800225c <HAL_GetTick>
 8004092:	eba0 0009 	sub.w	r0, r0, r9
 8004096:	42b8      	cmp	r0, r7
 8004098:	d823      	bhi.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x7e>
 800409a:	b327      	cbz	r7, 80040e6 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800409c:	f8d8 3000 	ldr.w	r3, [r8]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	f012 0f04 	tst.w	r2, #4
 80040a6:	d0e5      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x10>
 80040a8:	2d80      	cmp	r5, #128	@ 0x80
 80040aa:	d0e3      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x10>
 80040ac:	2d40      	cmp	r5, #64	@ 0x40
 80040ae:	d0e1      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	f012 0f08 	tst.w	r2, #8
 80040b6:	d0dd      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040b8:	2400      	movs	r4, #0
 80040ba:	9401      	str	r4, [sp, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	9201      	str	r2, [sp, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80040c6:	4640      	mov	r0, r8
 80040c8:	f7ff ff1c 	bl	8003f04 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040cc:	2308      	movs	r3, #8
 80040ce:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80040d2:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 80040d6:	2001      	movs	r0, #1
 80040d8:	e000      	b.n	80040dc <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80040da:	2000      	movs	r0, #0
}
 80040dc:	b003      	add	sp, #12
 80040de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80040e2:	2003      	movs	r0, #3
 80040e4:	e7fa      	b.n	80040dc <UART_WaitOnFlagUntilTimeout+0x78>
 80040e6:	2003      	movs	r0, #3
 80040e8:	e7f8      	b.n	80040dc <UART_WaitOnFlagUntilTimeout+0x78>

080040ea <HAL_UART_Init>:
  if (huart == NULL)
 80040ea:	b360      	cbz	r0, 8004146 <HAL_UART_Init+0x5c>
{
 80040ec:	b510      	push	{r4, lr}
 80040ee:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80040f0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80040f4:	b313      	cbz	r3, 800413c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80040f6:	2324      	movs	r3, #36	@ 0x24
 80040f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80040fc:	6822      	ldr	r2, [r4, #0]
 80040fe:	68d3      	ldr	r3, [r2, #12]
 8004100:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004104:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004106:	4620      	mov	r0, r4
 8004108:	f7ff ff2a 	bl	8003f60 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	6913      	ldr	r3, [r2, #16]
 8004110:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004114:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	6953      	ldr	r3, [r2, #20]
 800411a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800411e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004120:	6822      	ldr	r2, [r4, #0]
 8004122:	68d3      	ldr	r3, [r2, #12]
 8004124:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004128:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	2000      	movs	r0, #0
 800412c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800412e:	2320      	movs	r3, #32
 8004130:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004138:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800413a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800413c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004140:	f7fd ff9e 	bl	8002080 <HAL_UART_MspInit>
 8004144:	e7d7      	b.n	80040f6 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004146:	2001      	movs	r0, #1
}
 8004148:	4770      	bx	lr

0800414a <HAL_UART_Transmit>:
{
 800414a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004152:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b20      	cmp	r3, #32
 800415a:	d15c      	bne.n	8004216 <HAL_UART_Transmit+0xcc>
 800415c:	4604      	mov	r4, r0
 800415e:	460d      	mov	r5, r1
 8004160:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004162:	2900      	cmp	r1, #0
 8004164:	d05b      	beq.n	800421e <HAL_UART_Transmit+0xd4>
 8004166:	b90a      	cbnz	r2, 800416c <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8004168:	2001      	movs	r0, #1
 800416a:	e055      	b.n	8004218 <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	2300      	movs	r3, #0
 800416e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004170:	2321      	movs	r3, #33	@ 0x21
 8004172:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004176:	f7fe f871 	bl	800225c <HAL_GetTick>
 800417a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800417c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004180:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004184:	68a3      	ldr	r3, [r4, #8]
 8004186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418a:	d009      	beq.n	80041a0 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 800418c:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8004190:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004192:	b29b      	uxth	r3, r3
 8004194:	b373      	cbz	r3, 80041f4 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004196:	f04f 0900 	mov.w	r9, #0
 800419a:	f04f 0880 	mov.w	r8, #128	@ 0x80
 800419e:	e019      	b.n	80041d4 <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a0:	6923      	ldr	r3, [r4, #16]
 80041a2:	b113      	cbz	r3, 80041aa <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 80041a4:	f04f 0a00 	mov.w	sl, #0
 80041a8:	e7f2      	b.n	8004190 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 80041aa:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80041ac:	2500      	movs	r5, #0
 80041ae:	e7ef      	b.n	8004190 <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 80041b0:	2320      	movs	r3, #32
 80041b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80041b6:	2003      	movs	r0, #3
 80041b8:	e02e      	b.n	8004218 <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80041c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80041c6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80041c8:	3a01      	subs	r2, #1
 80041ca:	b292      	uxth	r2, r2
 80041cc:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041ce:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	b17b      	cbz	r3, 80041f4 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d4:	9600      	str	r6, [sp, #0]
 80041d6:	463b      	mov	r3, r7
 80041d8:	464a      	mov	r2, r9
 80041da:	4641      	mov	r1, r8
 80041dc:	4620      	mov	r0, r4
 80041de:	f7ff ff41 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d1e4      	bne.n	80041b0 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 80041e6:	2d00      	cmp	r5, #0
 80041e8:	d0e7      	beq.n	80041ba <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f815 2b01 	ldrb.w	r2, [r5], #1
 80041f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041f2:	e7e8      	b.n	80041c6 <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041f4:	9600      	str	r6, [sp, #0]
 80041f6:	463b      	mov	r3, r7
 80041f8:	2200      	movs	r2, #0
 80041fa:	2140      	movs	r1, #64	@ 0x40
 80041fc:	4620      	mov	r0, r4
 80041fe:	f7ff ff31 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8004202:	b918      	cbnz	r0, 800420c <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8004204:	2320      	movs	r3, #32
 8004206:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800420a:	e005      	b.n	8004218 <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 800420c:	2320      	movs	r3, #32
 800420e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8004212:	2003      	movs	r0, #3
 8004214:	e000      	b.n	8004218 <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 8004216:	2002      	movs	r0, #2
}
 8004218:	b002      	add	sp, #8
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800421e:	2001      	movs	r0, #1
 8004220:	e7fa      	b.n	8004218 <HAL_UART_Transmit+0xce>
	...

08004224 <sniprintf>:
 8004224:	b40c      	push	{r2, r3}
 8004226:	b530      	push	{r4, r5, lr}
 8004228:	4b18      	ldr	r3, [pc, #96]	@ (800428c <sniprintf+0x68>)
 800422a:	1e0c      	subs	r4, r1, #0
 800422c:	681d      	ldr	r5, [r3, #0]
 800422e:	b09d      	sub	sp, #116	@ 0x74
 8004230:	da08      	bge.n	8004244 <sniprintf+0x20>
 8004232:	238b      	movs	r3, #139	@ 0x8b
 8004234:	602b      	str	r3, [r5, #0]
 8004236:	f04f 30ff 	mov.w	r0, #4294967295
 800423a:	b01d      	add	sp, #116	@ 0x74
 800423c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004240:	b002      	add	sp, #8
 8004242:	4770      	bx	lr
 8004244:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004248:	f8ad 3014 	strh.w	r3, [sp, #20]
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004252:	bf14      	ite	ne
 8004254:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004258:	4623      	moveq	r3, r4
 800425a:	9304      	str	r3, [sp, #16]
 800425c:	9307      	str	r3, [sp, #28]
 800425e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004262:	9002      	str	r0, [sp, #8]
 8004264:	9006      	str	r0, [sp, #24]
 8004266:	f8ad 3016 	strh.w	r3, [sp, #22]
 800426a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800426c:	ab21      	add	r3, sp, #132	@ 0x84
 800426e:	a902      	add	r1, sp, #8
 8004270:	4628      	mov	r0, r5
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	f000 f994 	bl	80045a0 <_svfiprintf_r>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	bfbc      	itt	lt
 800427c:	238b      	movlt	r3, #139	@ 0x8b
 800427e:	602b      	strlt	r3, [r5, #0]
 8004280:	2c00      	cmp	r4, #0
 8004282:	d0da      	beq.n	800423a <sniprintf+0x16>
 8004284:	9b02      	ldr	r3, [sp, #8]
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	e7d6      	b.n	800423a <sniprintf+0x16>
 800428c:	20000054 	.word	0x20000054

08004290 <memset>:
 8004290:	4402      	add	r2, r0
 8004292:	4603      	mov	r3, r0
 8004294:	4293      	cmp	r3, r2
 8004296:	d100      	bne.n	800429a <memset+0xa>
 8004298:	4770      	bx	lr
 800429a:	f803 1b01 	strb.w	r1, [r3], #1
 800429e:	e7f9      	b.n	8004294 <memset+0x4>

080042a0 <__errno>:
 80042a0:	4b01      	ldr	r3, [pc, #4]	@ (80042a8 <__errno+0x8>)
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000054 	.word	0x20000054

080042ac <__libc_init_array>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	4d0d      	ldr	r5, [pc, #52]	@ (80042e4 <__libc_init_array+0x38>)
 80042b0:	4c0d      	ldr	r4, [pc, #52]	@ (80042e8 <__libc_init_array+0x3c>)
 80042b2:	1b64      	subs	r4, r4, r5
 80042b4:	10a4      	asrs	r4, r4, #2
 80042b6:	2600      	movs	r6, #0
 80042b8:	42a6      	cmp	r6, r4
 80042ba:	d109      	bne.n	80042d0 <__libc_init_array+0x24>
 80042bc:	4d0b      	ldr	r5, [pc, #44]	@ (80042ec <__libc_init_array+0x40>)
 80042be:	4c0c      	ldr	r4, [pc, #48]	@ (80042f0 <__libc_init_array+0x44>)
 80042c0:	f000 fd60 	bl	8004d84 <_init>
 80042c4:	1b64      	subs	r4, r4, r5
 80042c6:	10a4      	asrs	r4, r4, #2
 80042c8:	2600      	movs	r6, #0
 80042ca:	42a6      	cmp	r6, r4
 80042cc:	d105      	bne.n	80042da <__libc_init_array+0x2e>
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d4:	4798      	blx	r3
 80042d6:	3601      	adds	r6, #1
 80042d8:	e7ee      	b.n	80042b8 <__libc_init_array+0xc>
 80042da:	f855 3b04 	ldr.w	r3, [r5], #4
 80042de:	4798      	blx	r3
 80042e0:	3601      	adds	r6, #1
 80042e2:	e7f2      	b.n	80042ca <__libc_init_array+0x1e>
 80042e4:	08004e98 	.word	0x08004e98
 80042e8:	08004e98 	.word	0x08004e98
 80042ec:	08004e98 	.word	0x08004e98
 80042f0:	08004e9c 	.word	0x08004e9c

080042f4 <__retarget_lock_acquire_recursive>:
 80042f4:	4770      	bx	lr

080042f6 <__retarget_lock_release_recursive>:
 80042f6:	4770      	bx	lr

080042f8 <_free_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4605      	mov	r5, r0
 80042fc:	2900      	cmp	r1, #0
 80042fe:	d041      	beq.n	8004384 <_free_r+0x8c>
 8004300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004304:	1f0c      	subs	r4, r1, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfb8      	it	lt
 800430a:	18e4      	addlt	r4, r4, r3
 800430c:	f000 f8e0 	bl	80044d0 <__malloc_lock>
 8004310:	4a1d      	ldr	r2, [pc, #116]	@ (8004388 <_free_r+0x90>)
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	b933      	cbnz	r3, 8004324 <_free_r+0x2c>
 8004316:	6063      	str	r3, [r4, #4]
 8004318:	6014      	str	r4, [r2, #0]
 800431a:	4628      	mov	r0, r5
 800431c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004320:	f000 b8dc 	b.w	80044dc <__malloc_unlock>
 8004324:	42a3      	cmp	r3, r4
 8004326:	d908      	bls.n	800433a <_free_r+0x42>
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	1821      	adds	r1, r4, r0
 800432c:	428b      	cmp	r3, r1
 800432e:	bf01      	itttt	eq
 8004330:	6819      	ldreq	r1, [r3, #0]
 8004332:	685b      	ldreq	r3, [r3, #4]
 8004334:	1809      	addeq	r1, r1, r0
 8004336:	6021      	streq	r1, [r4, #0]
 8004338:	e7ed      	b.n	8004316 <_free_r+0x1e>
 800433a:	461a      	mov	r2, r3
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	b10b      	cbz	r3, 8004344 <_free_r+0x4c>
 8004340:	42a3      	cmp	r3, r4
 8004342:	d9fa      	bls.n	800433a <_free_r+0x42>
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	1850      	adds	r0, r2, r1
 8004348:	42a0      	cmp	r0, r4
 800434a:	d10b      	bne.n	8004364 <_free_r+0x6c>
 800434c:	6820      	ldr	r0, [r4, #0]
 800434e:	4401      	add	r1, r0
 8004350:	1850      	adds	r0, r2, r1
 8004352:	4283      	cmp	r3, r0
 8004354:	6011      	str	r1, [r2, #0]
 8004356:	d1e0      	bne.n	800431a <_free_r+0x22>
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	6053      	str	r3, [r2, #4]
 800435e:	4408      	add	r0, r1
 8004360:	6010      	str	r0, [r2, #0]
 8004362:	e7da      	b.n	800431a <_free_r+0x22>
 8004364:	d902      	bls.n	800436c <_free_r+0x74>
 8004366:	230c      	movs	r3, #12
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	e7d6      	b.n	800431a <_free_r+0x22>
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	1821      	adds	r1, r4, r0
 8004370:	428b      	cmp	r3, r1
 8004372:	bf04      	itt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	bf04      	itt	eq
 800437c:	1809      	addeq	r1, r1, r0
 800437e:	6021      	streq	r1, [r4, #0]
 8004380:	6054      	str	r4, [r2, #4]
 8004382:	e7ca      	b.n	800431a <_free_r+0x22>
 8004384:	bd38      	pop	{r3, r4, r5, pc}
 8004386:	bf00      	nop
 8004388:	20000598 	.word	0x20000598

0800438c <sbrk_aligned>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	4e0f      	ldr	r6, [pc, #60]	@ (80043cc <sbrk_aligned+0x40>)
 8004390:	460c      	mov	r4, r1
 8004392:	6831      	ldr	r1, [r6, #0]
 8004394:	4605      	mov	r5, r0
 8004396:	b911      	cbnz	r1, 800439e <sbrk_aligned+0x12>
 8004398:	f000 fba4 	bl	8004ae4 <_sbrk_r>
 800439c:	6030      	str	r0, [r6, #0]
 800439e:	4621      	mov	r1, r4
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 fb9f 	bl	8004ae4 <_sbrk_r>
 80043a6:	1c43      	adds	r3, r0, #1
 80043a8:	d103      	bne.n	80043b2 <sbrk_aligned+0x26>
 80043aa:	f04f 34ff 	mov.w	r4, #4294967295
 80043ae:	4620      	mov	r0, r4
 80043b0:	bd70      	pop	{r4, r5, r6, pc}
 80043b2:	1cc4      	adds	r4, r0, #3
 80043b4:	f024 0403 	bic.w	r4, r4, #3
 80043b8:	42a0      	cmp	r0, r4
 80043ba:	d0f8      	beq.n	80043ae <sbrk_aligned+0x22>
 80043bc:	1a21      	subs	r1, r4, r0
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 fb90 	bl	8004ae4 <_sbrk_r>
 80043c4:	3001      	adds	r0, #1
 80043c6:	d1f2      	bne.n	80043ae <sbrk_aligned+0x22>
 80043c8:	e7ef      	b.n	80043aa <sbrk_aligned+0x1e>
 80043ca:	bf00      	nop
 80043cc:	20000594 	.word	0x20000594

080043d0 <_malloc_r>:
 80043d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d4:	1ccd      	adds	r5, r1, #3
 80043d6:	f025 0503 	bic.w	r5, r5, #3
 80043da:	3508      	adds	r5, #8
 80043dc:	2d0c      	cmp	r5, #12
 80043de:	bf38      	it	cc
 80043e0:	250c      	movcc	r5, #12
 80043e2:	2d00      	cmp	r5, #0
 80043e4:	4606      	mov	r6, r0
 80043e6:	db01      	blt.n	80043ec <_malloc_r+0x1c>
 80043e8:	42a9      	cmp	r1, r5
 80043ea:	d904      	bls.n	80043f6 <_malloc_r+0x26>
 80043ec:	230c      	movs	r3, #12
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	2000      	movs	r0, #0
 80043f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044cc <_malloc_r+0xfc>
 80043fa:	f000 f869 	bl	80044d0 <__malloc_lock>
 80043fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004402:	461c      	mov	r4, r3
 8004404:	bb44      	cbnz	r4, 8004458 <_malloc_r+0x88>
 8004406:	4629      	mov	r1, r5
 8004408:	4630      	mov	r0, r6
 800440a:	f7ff ffbf 	bl	800438c <sbrk_aligned>
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	4604      	mov	r4, r0
 8004412:	d158      	bne.n	80044c6 <_malloc_r+0xf6>
 8004414:	f8d8 4000 	ldr.w	r4, [r8]
 8004418:	4627      	mov	r7, r4
 800441a:	2f00      	cmp	r7, #0
 800441c:	d143      	bne.n	80044a6 <_malloc_r+0xd6>
 800441e:	2c00      	cmp	r4, #0
 8004420:	d04b      	beq.n	80044ba <_malloc_r+0xea>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	4639      	mov	r1, r7
 8004426:	4630      	mov	r0, r6
 8004428:	eb04 0903 	add.w	r9, r4, r3
 800442c:	f000 fb5a 	bl	8004ae4 <_sbrk_r>
 8004430:	4581      	cmp	r9, r0
 8004432:	d142      	bne.n	80044ba <_malloc_r+0xea>
 8004434:	6821      	ldr	r1, [r4, #0]
 8004436:	1a6d      	subs	r5, r5, r1
 8004438:	4629      	mov	r1, r5
 800443a:	4630      	mov	r0, r6
 800443c:	f7ff ffa6 	bl	800438c <sbrk_aligned>
 8004440:	3001      	adds	r0, #1
 8004442:	d03a      	beq.n	80044ba <_malloc_r+0xea>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	442b      	add	r3, r5
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	f8d8 3000 	ldr.w	r3, [r8]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	bb62      	cbnz	r2, 80044ac <_malloc_r+0xdc>
 8004452:	f8c8 7000 	str.w	r7, [r8]
 8004456:	e00f      	b.n	8004478 <_malloc_r+0xa8>
 8004458:	6822      	ldr	r2, [r4, #0]
 800445a:	1b52      	subs	r2, r2, r5
 800445c:	d420      	bmi.n	80044a0 <_malloc_r+0xd0>
 800445e:	2a0b      	cmp	r2, #11
 8004460:	d917      	bls.n	8004492 <_malloc_r+0xc2>
 8004462:	1961      	adds	r1, r4, r5
 8004464:	42a3      	cmp	r3, r4
 8004466:	6025      	str	r5, [r4, #0]
 8004468:	bf18      	it	ne
 800446a:	6059      	strne	r1, [r3, #4]
 800446c:	6863      	ldr	r3, [r4, #4]
 800446e:	bf08      	it	eq
 8004470:	f8c8 1000 	streq.w	r1, [r8]
 8004474:	5162      	str	r2, [r4, r5]
 8004476:	604b      	str	r3, [r1, #4]
 8004478:	4630      	mov	r0, r6
 800447a:	f000 f82f 	bl	80044dc <__malloc_unlock>
 800447e:	f104 000b 	add.w	r0, r4, #11
 8004482:	1d23      	adds	r3, r4, #4
 8004484:	f020 0007 	bic.w	r0, r0, #7
 8004488:	1ac2      	subs	r2, r0, r3
 800448a:	bf1c      	itt	ne
 800448c:	1a1b      	subne	r3, r3, r0
 800448e:	50a3      	strne	r3, [r4, r2]
 8004490:	e7af      	b.n	80043f2 <_malloc_r+0x22>
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	42a3      	cmp	r3, r4
 8004496:	bf0c      	ite	eq
 8004498:	f8c8 2000 	streq.w	r2, [r8]
 800449c:	605a      	strne	r2, [r3, #4]
 800449e:	e7eb      	b.n	8004478 <_malloc_r+0xa8>
 80044a0:	4623      	mov	r3, r4
 80044a2:	6864      	ldr	r4, [r4, #4]
 80044a4:	e7ae      	b.n	8004404 <_malloc_r+0x34>
 80044a6:	463c      	mov	r4, r7
 80044a8:	687f      	ldr	r7, [r7, #4]
 80044aa:	e7b6      	b.n	800441a <_malloc_r+0x4a>
 80044ac:	461a      	mov	r2, r3
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	d1fb      	bne.n	80044ac <_malloc_r+0xdc>
 80044b4:	2300      	movs	r3, #0
 80044b6:	6053      	str	r3, [r2, #4]
 80044b8:	e7de      	b.n	8004478 <_malloc_r+0xa8>
 80044ba:	230c      	movs	r3, #12
 80044bc:	6033      	str	r3, [r6, #0]
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 f80c 	bl	80044dc <__malloc_unlock>
 80044c4:	e794      	b.n	80043f0 <_malloc_r+0x20>
 80044c6:	6005      	str	r5, [r0, #0]
 80044c8:	e7d6      	b.n	8004478 <_malloc_r+0xa8>
 80044ca:	bf00      	nop
 80044cc:	20000598 	.word	0x20000598

080044d0 <__malloc_lock>:
 80044d0:	4801      	ldr	r0, [pc, #4]	@ (80044d8 <__malloc_lock+0x8>)
 80044d2:	f7ff bf0f 	b.w	80042f4 <__retarget_lock_acquire_recursive>
 80044d6:	bf00      	nop
 80044d8:	20000590 	.word	0x20000590

080044dc <__malloc_unlock>:
 80044dc:	4801      	ldr	r0, [pc, #4]	@ (80044e4 <__malloc_unlock+0x8>)
 80044de:	f7ff bf0a 	b.w	80042f6 <__retarget_lock_release_recursive>
 80044e2:	bf00      	nop
 80044e4:	20000590 	.word	0x20000590

080044e8 <__ssputs_r>:
 80044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ec:	688e      	ldr	r6, [r1, #8]
 80044ee:	461f      	mov	r7, r3
 80044f0:	42be      	cmp	r6, r7
 80044f2:	680b      	ldr	r3, [r1, #0]
 80044f4:	4682      	mov	sl, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	4690      	mov	r8, r2
 80044fa:	d82d      	bhi.n	8004558 <__ssputs_r+0x70>
 80044fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004500:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004504:	d026      	beq.n	8004554 <__ssputs_r+0x6c>
 8004506:	6965      	ldr	r5, [r4, #20]
 8004508:	6909      	ldr	r1, [r1, #16]
 800450a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800450e:	eba3 0901 	sub.w	r9, r3, r1
 8004512:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004516:	1c7b      	adds	r3, r7, #1
 8004518:	444b      	add	r3, r9
 800451a:	106d      	asrs	r5, r5, #1
 800451c:	429d      	cmp	r5, r3
 800451e:	bf38      	it	cc
 8004520:	461d      	movcc	r5, r3
 8004522:	0553      	lsls	r3, r2, #21
 8004524:	d527      	bpl.n	8004576 <__ssputs_r+0x8e>
 8004526:	4629      	mov	r1, r5
 8004528:	f7ff ff52 	bl	80043d0 <_malloc_r>
 800452c:	4606      	mov	r6, r0
 800452e:	b360      	cbz	r0, 800458a <__ssputs_r+0xa2>
 8004530:	6921      	ldr	r1, [r4, #16]
 8004532:	464a      	mov	r2, r9
 8004534:	f000 fae6 	bl	8004b04 <memcpy>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800453e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004542:	81a3      	strh	r3, [r4, #12]
 8004544:	6126      	str	r6, [r4, #16]
 8004546:	6165      	str	r5, [r4, #20]
 8004548:	444e      	add	r6, r9
 800454a:	eba5 0509 	sub.w	r5, r5, r9
 800454e:	6026      	str	r6, [r4, #0]
 8004550:	60a5      	str	r5, [r4, #8]
 8004552:	463e      	mov	r6, r7
 8004554:	42be      	cmp	r6, r7
 8004556:	d900      	bls.n	800455a <__ssputs_r+0x72>
 8004558:	463e      	mov	r6, r7
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	4632      	mov	r2, r6
 800455e:	4641      	mov	r1, r8
 8004560:	f000 faa6 	bl	8004ab0 <memmove>
 8004564:	68a3      	ldr	r3, [r4, #8]
 8004566:	1b9b      	subs	r3, r3, r6
 8004568:	60a3      	str	r3, [r4, #8]
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	4433      	add	r3, r6
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	2000      	movs	r0, #0
 8004572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004576:	462a      	mov	r2, r5
 8004578:	f000 fad2 	bl	8004b20 <_realloc_r>
 800457c:	4606      	mov	r6, r0
 800457e:	2800      	cmp	r0, #0
 8004580:	d1e0      	bne.n	8004544 <__ssputs_r+0x5c>
 8004582:	6921      	ldr	r1, [r4, #16]
 8004584:	4650      	mov	r0, sl
 8004586:	f7ff feb7 	bl	80042f8 <_free_r>
 800458a:	230c      	movs	r3, #12
 800458c:	f8ca 3000 	str.w	r3, [sl]
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	e7e9      	b.n	8004572 <__ssputs_r+0x8a>
	...

080045a0 <_svfiprintf_r>:
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	4698      	mov	r8, r3
 80045a6:	898b      	ldrh	r3, [r1, #12]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	b09d      	sub	sp, #116	@ 0x74
 80045ac:	4607      	mov	r7, r0
 80045ae:	460d      	mov	r5, r1
 80045b0:	4614      	mov	r4, r2
 80045b2:	d510      	bpl.n	80045d6 <_svfiprintf_r+0x36>
 80045b4:	690b      	ldr	r3, [r1, #16]
 80045b6:	b973      	cbnz	r3, 80045d6 <_svfiprintf_r+0x36>
 80045b8:	2140      	movs	r1, #64	@ 0x40
 80045ba:	f7ff ff09 	bl	80043d0 <_malloc_r>
 80045be:	6028      	str	r0, [r5, #0]
 80045c0:	6128      	str	r0, [r5, #16]
 80045c2:	b930      	cbnz	r0, 80045d2 <_svfiprintf_r+0x32>
 80045c4:	230c      	movs	r3, #12
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	b01d      	add	sp, #116	@ 0x74
 80045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d2:	2340      	movs	r3, #64	@ 0x40
 80045d4:	616b      	str	r3, [r5, #20]
 80045d6:	2300      	movs	r3, #0
 80045d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80045da:	2320      	movs	r3, #32
 80045dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80045e4:	2330      	movs	r3, #48	@ 0x30
 80045e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004784 <_svfiprintf_r+0x1e4>
 80045ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045ee:	f04f 0901 	mov.w	r9, #1
 80045f2:	4623      	mov	r3, r4
 80045f4:	469a      	mov	sl, r3
 80045f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045fa:	b10a      	cbz	r2, 8004600 <_svfiprintf_r+0x60>
 80045fc:	2a25      	cmp	r2, #37	@ 0x25
 80045fe:	d1f9      	bne.n	80045f4 <_svfiprintf_r+0x54>
 8004600:	ebba 0b04 	subs.w	fp, sl, r4
 8004604:	d00b      	beq.n	800461e <_svfiprintf_r+0x7e>
 8004606:	465b      	mov	r3, fp
 8004608:	4622      	mov	r2, r4
 800460a:	4629      	mov	r1, r5
 800460c:	4638      	mov	r0, r7
 800460e:	f7ff ff6b 	bl	80044e8 <__ssputs_r>
 8004612:	3001      	adds	r0, #1
 8004614:	f000 80a7 	beq.w	8004766 <_svfiprintf_r+0x1c6>
 8004618:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800461a:	445a      	add	r2, fp
 800461c:	9209      	str	r2, [sp, #36]	@ 0x24
 800461e:	f89a 3000 	ldrb.w	r3, [sl]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 809f 	beq.w	8004766 <_svfiprintf_r+0x1c6>
 8004628:	2300      	movs	r3, #0
 800462a:	f04f 32ff 	mov.w	r2, #4294967295
 800462e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004632:	f10a 0a01 	add.w	sl, sl, #1
 8004636:	9304      	str	r3, [sp, #16]
 8004638:	9307      	str	r3, [sp, #28]
 800463a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800463e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004640:	4654      	mov	r4, sl
 8004642:	2205      	movs	r2, #5
 8004644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004648:	484e      	ldr	r0, [pc, #312]	@ (8004784 <_svfiprintf_r+0x1e4>)
 800464a:	f7fb fde9 	bl	8000220 <memchr>
 800464e:	9a04      	ldr	r2, [sp, #16]
 8004650:	b9d8      	cbnz	r0, 800468a <_svfiprintf_r+0xea>
 8004652:	06d0      	lsls	r0, r2, #27
 8004654:	bf44      	itt	mi
 8004656:	2320      	movmi	r3, #32
 8004658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800465c:	0711      	lsls	r1, r2, #28
 800465e:	bf44      	itt	mi
 8004660:	232b      	movmi	r3, #43	@ 0x2b
 8004662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004666:	f89a 3000 	ldrb.w	r3, [sl]
 800466a:	2b2a      	cmp	r3, #42	@ 0x2a
 800466c:	d015      	beq.n	800469a <_svfiprintf_r+0xfa>
 800466e:	9a07      	ldr	r2, [sp, #28]
 8004670:	4654      	mov	r4, sl
 8004672:	2000      	movs	r0, #0
 8004674:	f04f 0c0a 	mov.w	ip, #10
 8004678:	4621      	mov	r1, r4
 800467a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800467e:	3b30      	subs	r3, #48	@ 0x30
 8004680:	2b09      	cmp	r3, #9
 8004682:	d94b      	bls.n	800471c <_svfiprintf_r+0x17c>
 8004684:	b1b0      	cbz	r0, 80046b4 <_svfiprintf_r+0x114>
 8004686:	9207      	str	r2, [sp, #28]
 8004688:	e014      	b.n	80046b4 <_svfiprintf_r+0x114>
 800468a:	eba0 0308 	sub.w	r3, r0, r8
 800468e:	fa09 f303 	lsl.w	r3, r9, r3
 8004692:	4313      	orrs	r3, r2
 8004694:	9304      	str	r3, [sp, #16]
 8004696:	46a2      	mov	sl, r4
 8004698:	e7d2      	b.n	8004640 <_svfiprintf_r+0xa0>
 800469a:	9b03      	ldr	r3, [sp, #12]
 800469c:	1d19      	adds	r1, r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	9103      	str	r1, [sp, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bfbb      	ittet	lt
 80046a6:	425b      	neglt	r3, r3
 80046a8:	f042 0202 	orrlt.w	r2, r2, #2
 80046ac:	9307      	strge	r3, [sp, #28]
 80046ae:	9307      	strlt	r3, [sp, #28]
 80046b0:	bfb8      	it	lt
 80046b2:	9204      	strlt	r2, [sp, #16]
 80046b4:	7823      	ldrb	r3, [r4, #0]
 80046b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80046b8:	d10a      	bne.n	80046d0 <_svfiprintf_r+0x130>
 80046ba:	7863      	ldrb	r3, [r4, #1]
 80046bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80046be:	d132      	bne.n	8004726 <_svfiprintf_r+0x186>
 80046c0:	9b03      	ldr	r3, [sp, #12]
 80046c2:	1d1a      	adds	r2, r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	9203      	str	r2, [sp, #12]
 80046c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046cc:	3402      	adds	r4, #2
 80046ce:	9305      	str	r3, [sp, #20]
 80046d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004794 <_svfiprintf_r+0x1f4>
 80046d4:	7821      	ldrb	r1, [r4, #0]
 80046d6:	2203      	movs	r2, #3
 80046d8:	4650      	mov	r0, sl
 80046da:	f7fb fda1 	bl	8000220 <memchr>
 80046de:	b138      	cbz	r0, 80046f0 <_svfiprintf_r+0x150>
 80046e0:	9b04      	ldr	r3, [sp, #16]
 80046e2:	eba0 000a 	sub.w	r0, r0, sl
 80046e6:	2240      	movs	r2, #64	@ 0x40
 80046e8:	4082      	lsls	r2, r0
 80046ea:	4313      	orrs	r3, r2
 80046ec:	3401      	adds	r4, #1
 80046ee:	9304      	str	r3, [sp, #16]
 80046f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f4:	4824      	ldr	r0, [pc, #144]	@ (8004788 <_svfiprintf_r+0x1e8>)
 80046f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046fa:	2206      	movs	r2, #6
 80046fc:	f7fb fd90 	bl	8000220 <memchr>
 8004700:	2800      	cmp	r0, #0
 8004702:	d036      	beq.n	8004772 <_svfiprintf_r+0x1d2>
 8004704:	4b21      	ldr	r3, [pc, #132]	@ (800478c <_svfiprintf_r+0x1ec>)
 8004706:	bb1b      	cbnz	r3, 8004750 <_svfiprintf_r+0x1b0>
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	3307      	adds	r3, #7
 800470c:	f023 0307 	bic.w	r3, r3, #7
 8004710:	3308      	adds	r3, #8
 8004712:	9303      	str	r3, [sp, #12]
 8004714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004716:	4433      	add	r3, r6
 8004718:	9309      	str	r3, [sp, #36]	@ 0x24
 800471a:	e76a      	b.n	80045f2 <_svfiprintf_r+0x52>
 800471c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004720:	460c      	mov	r4, r1
 8004722:	2001      	movs	r0, #1
 8004724:	e7a8      	b.n	8004678 <_svfiprintf_r+0xd8>
 8004726:	2300      	movs	r3, #0
 8004728:	3401      	adds	r4, #1
 800472a:	9305      	str	r3, [sp, #20]
 800472c:	4619      	mov	r1, r3
 800472e:	f04f 0c0a 	mov.w	ip, #10
 8004732:	4620      	mov	r0, r4
 8004734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004738:	3a30      	subs	r2, #48	@ 0x30
 800473a:	2a09      	cmp	r2, #9
 800473c:	d903      	bls.n	8004746 <_svfiprintf_r+0x1a6>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0c6      	beq.n	80046d0 <_svfiprintf_r+0x130>
 8004742:	9105      	str	r1, [sp, #20]
 8004744:	e7c4      	b.n	80046d0 <_svfiprintf_r+0x130>
 8004746:	fb0c 2101 	mla	r1, ip, r1, r2
 800474a:	4604      	mov	r4, r0
 800474c:	2301      	movs	r3, #1
 800474e:	e7f0      	b.n	8004732 <_svfiprintf_r+0x192>
 8004750:	ab03      	add	r3, sp, #12
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	462a      	mov	r2, r5
 8004756:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <_svfiprintf_r+0x1f0>)
 8004758:	a904      	add	r1, sp, #16
 800475a:	4638      	mov	r0, r7
 800475c:	f3af 8000 	nop.w
 8004760:	1c42      	adds	r2, r0, #1
 8004762:	4606      	mov	r6, r0
 8004764:	d1d6      	bne.n	8004714 <_svfiprintf_r+0x174>
 8004766:	89ab      	ldrh	r3, [r5, #12]
 8004768:	065b      	lsls	r3, r3, #25
 800476a:	f53f af2d 	bmi.w	80045c8 <_svfiprintf_r+0x28>
 800476e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004770:	e72c      	b.n	80045cc <_svfiprintf_r+0x2c>
 8004772:	ab03      	add	r3, sp, #12
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	462a      	mov	r2, r5
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <_svfiprintf_r+0x1f0>)
 800477a:	a904      	add	r1, sp, #16
 800477c:	4638      	mov	r0, r7
 800477e:	f000 f879 	bl	8004874 <_printf_i>
 8004782:	e7ed      	b.n	8004760 <_svfiprintf_r+0x1c0>
 8004784:	08004e3c 	.word	0x08004e3c
 8004788:	08004e46 	.word	0x08004e46
 800478c:	00000000 	.word	0x00000000
 8004790:	080044e9 	.word	0x080044e9
 8004794:	08004e42 	.word	0x08004e42

08004798 <_printf_common>:
 8004798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800479c:	4616      	mov	r6, r2
 800479e:	4698      	mov	r8, r3
 80047a0:	688a      	ldr	r2, [r1, #8]
 80047a2:	690b      	ldr	r3, [r1, #16]
 80047a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bfb8      	it	lt
 80047ac:	4613      	movlt	r3, r2
 80047ae:	6033      	str	r3, [r6, #0]
 80047b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047b4:	4607      	mov	r7, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	b10a      	cbz	r2, 80047be <_printf_common+0x26>
 80047ba:	3301      	adds	r3, #1
 80047bc:	6033      	str	r3, [r6, #0]
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	0699      	lsls	r1, r3, #26
 80047c2:	bf42      	ittt	mi
 80047c4:	6833      	ldrmi	r3, [r6, #0]
 80047c6:	3302      	addmi	r3, #2
 80047c8:	6033      	strmi	r3, [r6, #0]
 80047ca:	6825      	ldr	r5, [r4, #0]
 80047cc:	f015 0506 	ands.w	r5, r5, #6
 80047d0:	d106      	bne.n	80047e0 <_printf_common+0x48>
 80047d2:	f104 0a19 	add.w	sl, r4, #25
 80047d6:	68e3      	ldr	r3, [r4, #12]
 80047d8:	6832      	ldr	r2, [r6, #0]
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	42ab      	cmp	r3, r5
 80047de:	dc26      	bgt.n	800482e <_printf_common+0x96>
 80047e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	3b00      	subs	r3, #0
 80047e8:	bf18      	it	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	0692      	lsls	r2, r2, #26
 80047ee:	d42b      	bmi.n	8004848 <_printf_common+0xb0>
 80047f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047f4:	4641      	mov	r1, r8
 80047f6:	4638      	mov	r0, r7
 80047f8:	47c8      	blx	r9
 80047fa:	3001      	adds	r0, #1
 80047fc:	d01e      	beq.n	800483c <_printf_common+0xa4>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	6922      	ldr	r2, [r4, #16]
 8004802:	f003 0306 	and.w	r3, r3, #6
 8004806:	2b04      	cmp	r3, #4
 8004808:	bf02      	ittt	eq
 800480a:	68e5      	ldreq	r5, [r4, #12]
 800480c:	6833      	ldreq	r3, [r6, #0]
 800480e:	1aed      	subeq	r5, r5, r3
 8004810:	68a3      	ldr	r3, [r4, #8]
 8004812:	bf0c      	ite	eq
 8004814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004818:	2500      	movne	r5, #0
 800481a:	4293      	cmp	r3, r2
 800481c:	bfc4      	itt	gt
 800481e:	1a9b      	subgt	r3, r3, r2
 8004820:	18ed      	addgt	r5, r5, r3
 8004822:	2600      	movs	r6, #0
 8004824:	341a      	adds	r4, #26
 8004826:	42b5      	cmp	r5, r6
 8004828:	d11a      	bne.n	8004860 <_printf_common+0xc8>
 800482a:	2000      	movs	r0, #0
 800482c:	e008      	b.n	8004840 <_printf_common+0xa8>
 800482e:	2301      	movs	r3, #1
 8004830:	4652      	mov	r2, sl
 8004832:	4641      	mov	r1, r8
 8004834:	4638      	mov	r0, r7
 8004836:	47c8      	blx	r9
 8004838:	3001      	adds	r0, #1
 800483a:	d103      	bne.n	8004844 <_printf_common+0xac>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	3501      	adds	r5, #1
 8004846:	e7c6      	b.n	80047d6 <_printf_common+0x3e>
 8004848:	18e1      	adds	r1, r4, r3
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	2030      	movs	r0, #48	@ 0x30
 800484e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004852:	4422      	add	r2, r4
 8004854:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004858:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800485c:	3302      	adds	r3, #2
 800485e:	e7c7      	b.n	80047f0 <_printf_common+0x58>
 8004860:	2301      	movs	r3, #1
 8004862:	4622      	mov	r2, r4
 8004864:	4641      	mov	r1, r8
 8004866:	4638      	mov	r0, r7
 8004868:	47c8      	blx	r9
 800486a:	3001      	adds	r0, #1
 800486c:	d0e6      	beq.n	800483c <_printf_common+0xa4>
 800486e:	3601      	adds	r6, #1
 8004870:	e7d9      	b.n	8004826 <_printf_common+0x8e>
	...

08004874 <_printf_i>:
 8004874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	7e0f      	ldrb	r7, [r1, #24]
 800487a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800487c:	2f78      	cmp	r7, #120	@ 0x78
 800487e:	4691      	mov	r9, r2
 8004880:	4680      	mov	r8, r0
 8004882:	460c      	mov	r4, r1
 8004884:	469a      	mov	sl, r3
 8004886:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800488a:	d807      	bhi.n	800489c <_printf_i+0x28>
 800488c:	2f62      	cmp	r7, #98	@ 0x62
 800488e:	d80a      	bhi.n	80048a6 <_printf_i+0x32>
 8004890:	2f00      	cmp	r7, #0
 8004892:	f000 80d1 	beq.w	8004a38 <_printf_i+0x1c4>
 8004896:	2f58      	cmp	r7, #88	@ 0x58
 8004898:	f000 80b8 	beq.w	8004a0c <_printf_i+0x198>
 800489c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048a4:	e03a      	b.n	800491c <_printf_i+0xa8>
 80048a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048aa:	2b15      	cmp	r3, #21
 80048ac:	d8f6      	bhi.n	800489c <_printf_i+0x28>
 80048ae:	a101      	add	r1, pc, #4	@ (adr r1, 80048b4 <_printf_i+0x40>)
 80048b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048b4:	0800490d 	.word	0x0800490d
 80048b8:	08004921 	.word	0x08004921
 80048bc:	0800489d 	.word	0x0800489d
 80048c0:	0800489d 	.word	0x0800489d
 80048c4:	0800489d 	.word	0x0800489d
 80048c8:	0800489d 	.word	0x0800489d
 80048cc:	08004921 	.word	0x08004921
 80048d0:	0800489d 	.word	0x0800489d
 80048d4:	0800489d 	.word	0x0800489d
 80048d8:	0800489d 	.word	0x0800489d
 80048dc:	0800489d 	.word	0x0800489d
 80048e0:	08004a1f 	.word	0x08004a1f
 80048e4:	0800494b 	.word	0x0800494b
 80048e8:	080049d9 	.word	0x080049d9
 80048ec:	0800489d 	.word	0x0800489d
 80048f0:	0800489d 	.word	0x0800489d
 80048f4:	08004a41 	.word	0x08004a41
 80048f8:	0800489d 	.word	0x0800489d
 80048fc:	0800494b 	.word	0x0800494b
 8004900:	0800489d 	.word	0x0800489d
 8004904:	0800489d 	.word	0x0800489d
 8004908:	080049e1 	.word	0x080049e1
 800490c:	6833      	ldr	r3, [r6, #0]
 800490e:	1d1a      	adds	r2, r3, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6032      	str	r2, [r6, #0]
 8004914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004918:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800491c:	2301      	movs	r3, #1
 800491e:	e09c      	b.n	8004a5a <_printf_i+0x1e6>
 8004920:	6833      	ldr	r3, [r6, #0]
 8004922:	6820      	ldr	r0, [r4, #0]
 8004924:	1d19      	adds	r1, r3, #4
 8004926:	6031      	str	r1, [r6, #0]
 8004928:	0606      	lsls	r6, r0, #24
 800492a:	d501      	bpl.n	8004930 <_printf_i+0xbc>
 800492c:	681d      	ldr	r5, [r3, #0]
 800492e:	e003      	b.n	8004938 <_printf_i+0xc4>
 8004930:	0645      	lsls	r5, r0, #25
 8004932:	d5fb      	bpl.n	800492c <_printf_i+0xb8>
 8004934:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004938:	2d00      	cmp	r5, #0
 800493a:	da03      	bge.n	8004944 <_printf_i+0xd0>
 800493c:	232d      	movs	r3, #45	@ 0x2d
 800493e:	426d      	negs	r5, r5
 8004940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004944:	4858      	ldr	r0, [pc, #352]	@ (8004aa8 <_printf_i+0x234>)
 8004946:	230a      	movs	r3, #10
 8004948:	e011      	b.n	800496e <_printf_i+0xfa>
 800494a:	6821      	ldr	r1, [r4, #0]
 800494c:	6833      	ldr	r3, [r6, #0]
 800494e:	0608      	lsls	r0, r1, #24
 8004950:	f853 5b04 	ldr.w	r5, [r3], #4
 8004954:	d402      	bmi.n	800495c <_printf_i+0xe8>
 8004956:	0649      	lsls	r1, r1, #25
 8004958:	bf48      	it	mi
 800495a:	b2ad      	uxthmi	r5, r5
 800495c:	2f6f      	cmp	r7, #111	@ 0x6f
 800495e:	4852      	ldr	r0, [pc, #328]	@ (8004aa8 <_printf_i+0x234>)
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	bf14      	ite	ne
 8004964:	230a      	movne	r3, #10
 8004966:	2308      	moveq	r3, #8
 8004968:	2100      	movs	r1, #0
 800496a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800496e:	6866      	ldr	r6, [r4, #4]
 8004970:	60a6      	str	r6, [r4, #8]
 8004972:	2e00      	cmp	r6, #0
 8004974:	db05      	blt.n	8004982 <_printf_i+0x10e>
 8004976:	6821      	ldr	r1, [r4, #0]
 8004978:	432e      	orrs	r6, r5
 800497a:	f021 0104 	bic.w	r1, r1, #4
 800497e:	6021      	str	r1, [r4, #0]
 8004980:	d04b      	beq.n	8004a1a <_printf_i+0x1a6>
 8004982:	4616      	mov	r6, r2
 8004984:	fbb5 f1f3 	udiv	r1, r5, r3
 8004988:	fb03 5711 	mls	r7, r3, r1, r5
 800498c:	5dc7      	ldrb	r7, [r0, r7]
 800498e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004992:	462f      	mov	r7, r5
 8004994:	42bb      	cmp	r3, r7
 8004996:	460d      	mov	r5, r1
 8004998:	d9f4      	bls.n	8004984 <_printf_i+0x110>
 800499a:	2b08      	cmp	r3, #8
 800499c:	d10b      	bne.n	80049b6 <_printf_i+0x142>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	07df      	lsls	r7, r3, #31
 80049a2:	d508      	bpl.n	80049b6 <_printf_i+0x142>
 80049a4:	6923      	ldr	r3, [r4, #16]
 80049a6:	6861      	ldr	r1, [r4, #4]
 80049a8:	4299      	cmp	r1, r3
 80049aa:	bfde      	ittt	le
 80049ac:	2330      	movle	r3, #48	@ 0x30
 80049ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049b6:	1b92      	subs	r2, r2, r6
 80049b8:	6122      	str	r2, [r4, #16]
 80049ba:	f8cd a000 	str.w	sl, [sp]
 80049be:	464b      	mov	r3, r9
 80049c0:	aa03      	add	r2, sp, #12
 80049c2:	4621      	mov	r1, r4
 80049c4:	4640      	mov	r0, r8
 80049c6:	f7ff fee7 	bl	8004798 <_printf_common>
 80049ca:	3001      	adds	r0, #1
 80049cc:	d14a      	bne.n	8004a64 <_printf_i+0x1f0>
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	b004      	add	sp, #16
 80049d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	f043 0320 	orr.w	r3, r3, #32
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	4832      	ldr	r0, [pc, #200]	@ (8004aac <_printf_i+0x238>)
 80049e2:	2778      	movs	r7, #120	@ 0x78
 80049e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	6831      	ldr	r1, [r6, #0]
 80049ec:	061f      	lsls	r7, r3, #24
 80049ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80049f2:	d402      	bmi.n	80049fa <_printf_i+0x186>
 80049f4:	065f      	lsls	r7, r3, #25
 80049f6:	bf48      	it	mi
 80049f8:	b2ad      	uxthmi	r5, r5
 80049fa:	6031      	str	r1, [r6, #0]
 80049fc:	07d9      	lsls	r1, r3, #31
 80049fe:	bf44      	itt	mi
 8004a00:	f043 0320 	orrmi.w	r3, r3, #32
 8004a04:	6023      	strmi	r3, [r4, #0]
 8004a06:	b11d      	cbz	r5, 8004a10 <_printf_i+0x19c>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	e7ad      	b.n	8004968 <_printf_i+0xf4>
 8004a0c:	4826      	ldr	r0, [pc, #152]	@ (8004aa8 <_printf_i+0x234>)
 8004a0e:	e7e9      	b.n	80049e4 <_printf_i+0x170>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	f023 0320 	bic.w	r3, r3, #32
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	e7f6      	b.n	8004a08 <_printf_i+0x194>
 8004a1a:	4616      	mov	r6, r2
 8004a1c:	e7bd      	b.n	800499a <_printf_i+0x126>
 8004a1e:	6833      	ldr	r3, [r6, #0]
 8004a20:	6825      	ldr	r5, [r4, #0]
 8004a22:	6961      	ldr	r1, [r4, #20]
 8004a24:	1d18      	adds	r0, r3, #4
 8004a26:	6030      	str	r0, [r6, #0]
 8004a28:	062e      	lsls	r6, r5, #24
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	d501      	bpl.n	8004a32 <_printf_i+0x1be>
 8004a2e:	6019      	str	r1, [r3, #0]
 8004a30:	e002      	b.n	8004a38 <_printf_i+0x1c4>
 8004a32:	0668      	lsls	r0, r5, #25
 8004a34:	d5fb      	bpl.n	8004a2e <_printf_i+0x1ba>
 8004a36:	8019      	strh	r1, [r3, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	e7bc      	b.n	80049ba <_printf_i+0x146>
 8004a40:	6833      	ldr	r3, [r6, #0]
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	6032      	str	r2, [r6, #0]
 8004a46:	681e      	ldr	r6, [r3, #0]
 8004a48:	6862      	ldr	r2, [r4, #4]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7fb fbe7 	bl	8000220 <memchr>
 8004a52:	b108      	cbz	r0, 8004a58 <_printf_i+0x1e4>
 8004a54:	1b80      	subs	r0, r0, r6
 8004a56:	6060      	str	r0, [r4, #4]
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a62:	e7aa      	b.n	80049ba <_printf_i+0x146>
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	4632      	mov	r2, r6
 8004a68:	4649      	mov	r1, r9
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	47d0      	blx	sl
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d0ad      	beq.n	80049ce <_printf_i+0x15a>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	079b      	lsls	r3, r3, #30
 8004a76:	d413      	bmi.n	8004aa0 <_printf_i+0x22c>
 8004a78:	68e0      	ldr	r0, [r4, #12]
 8004a7a:	9b03      	ldr	r3, [sp, #12]
 8004a7c:	4298      	cmp	r0, r3
 8004a7e:	bfb8      	it	lt
 8004a80:	4618      	movlt	r0, r3
 8004a82:	e7a6      	b.n	80049d2 <_printf_i+0x15e>
 8004a84:	2301      	movs	r3, #1
 8004a86:	4632      	mov	r2, r6
 8004a88:	4649      	mov	r1, r9
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	47d0      	blx	sl
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d09d      	beq.n	80049ce <_printf_i+0x15a>
 8004a92:	3501      	adds	r5, #1
 8004a94:	68e3      	ldr	r3, [r4, #12]
 8004a96:	9903      	ldr	r1, [sp, #12]
 8004a98:	1a5b      	subs	r3, r3, r1
 8004a9a:	42ab      	cmp	r3, r5
 8004a9c:	dcf2      	bgt.n	8004a84 <_printf_i+0x210>
 8004a9e:	e7eb      	b.n	8004a78 <_printf_i+0x204>
 8004aa0:	2500      	movs	r5, #0
 8004aa2:	f104 0619 	add.w	r6, r4, #25
 8004aa6:	e7f5      	b.n	8004a94 <_printf_i+0x220>
 8004aa8:	08004e4d 	.word	0x08004e4d
 8004aac:	08004e5e 	.word	0x08004e5e

08004ab0 <memmove>:
 8004ab0:	4288      	cmp	r0, r1
 8004ab2:	b510      	push	{r4, lr}
 8004ab4:	eb01 0402 	add.w	r4, r1, r2
 8004ab8:	d902      	bls.n	8004ac0 <memmove+0x10>
 8004aba:	4284      	cmp	r4, r0
 8004abc:	4623      	mov	r3, r4
 8004abe:	d807      	bhi.n	8004ad0 <memmove+0x20>
 8004ac0:	1e43      	subs	r3, r0, #1
 8004ac2:	42a1      	cmp	r1, r4
 8004ac4:	d008      	beq.n	8004ad8 <memmove+0x28>
 8004ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ace:	e7f8      	b.n	8004ac2 <memmove+0x12>
 8004ad0:	4402      	add	r2, r0
 8004ad2:	4601      	mov	r1, r0
 8004ad4:	428a      	cmp	r2, r1
 8004ad6:	d100      	bne.n	8004ada <memmove+0x2a>
 8004ad8:	bd10      	pop	{r4, pc}
 8004ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ae2:	e7f7      	b.n	8004ad4 <memmove+0x24>

08004ae4 <_sbrk_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d06      	ldr	r5, [pc, #24]	@ (8004b00 <_sbrk_r+0x1c>)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	f7fd fb10 	bl	8002114 <_sbrk>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_sbrk_r+0x1a>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_sbrk_r+0x1a>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	2000058c 	.word	0x2000058c

08004b04 <memcpy>:
 8004b04:	440a      	add	r2, r1
 8004b06:	4291      	cmp	r1, r2
 8004b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b0c:	d100      	bne.n	8004b10 <memcpy+0xc>
 8004b0e:	4770      	bx	lr
 8004b10:	b510      	push	{r4, lr}
 8004b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	d1f9      	bne.n	8004b12 <memcpy+0xe>
 8004b1e:	bd10      	pop	{r4, pc}

08004b20 <_realloc_r>:
 8004b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b24:	4607      	mov	r7, r0
 8004b26:	4614      	mov	r4, r2
 8004b28:	460d      	mov	r5, r1
 8004b2a:	b921      	cbnz	r1, 8004b36 <_realloc_r+0x16>
 8004b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b30:	4611      	mov	r1, r2
 8004b32:	f7ff bc4d 	b.w	80043d0 <_malloc_r>
 8004b36:	b92a      	cbnz	r2, 8004b44 <_realloc_r+0x24>
 8004b38:	f7ff fbde 	bl	80042f8 <_free_r>
 8004b3c:	4625      	mov	r5, r4
 8004b3e:	4628      	mov	r0, r5
 8004b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b44:	f000 f81a 	bl	8004b7c <_malloc_usable_size_r>
 8004b48:	4284      	cmp	r4, r0
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	d802      	bhi.n	8004b54 <_realloc_r+0x34>
 8004b4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b52:	d8f4      	bhi.n	8004b3e <_realloc_r+0x1e>
 8004b54:	4621      	mov	r1, r4
 8004b56:	4638      	mov	r0, r7
 8004b58:	f7ff fc3a 	bl	80043d0 <_malloc_r>
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	b908      	cbnz	r0, 8004b64 <_realloc_r+0x44>
 8004b60:	4645      	mov	r5, r8
 8004b62:	e7ec      	b.n	8004b3e <_realloc_r+0x1e>
 8004b64:	42b4      	cmp	r4, r6
 8004b66:	4622      	mov	r2, r4
 8004b68:	4629      	mov	r1, r5
 8004b6a:	bf28      	it	cs
 8004b6c:	4632      	movcs	r2, r6
 8004b6e:	f7ff ffc9 	bl	8004b04 <memcpy>
 8004b72:	4629      	mov	r1, r5
 8004b74:	4638      	mov	r0, r7
 8004b76:	f7ff fbbf 	bl	80042f8 <_free_r>
 8004b7a:	e7f1      	b.n	8004b60 <_realloc_r+0x40>

08004b7c <_malloc_usable_size_r>:
 8004b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b80:	1f18      	subs	r0, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bfbc      	itt	lt
 8004b86:	580b      	ldrlt	r3, [r1, r0]
 8004b88:	18c0      	addlt	r0, r0, r3
 8004b8a:	4770      	bx	lr

08004b8c <sqrtf>:
 8004b8c:	b508      	push	{r3, lr}
 8004b8e:	ed2d 8b02 	vpush	{d8}
 8004b92:	eeb0 8a40 	vmov.f32	s16, s0
 8004b96:	f000 f8f2 	bl	8004d7e <__ieee754_sqrtf>
 8004b9a:	eeb4 8a48 	vcmp.f32	s16, s16
 8004b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba2:	d60c      	bvs.n	8004bbe <sqrtf+0x32>
 8004ba4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8004bc4 <sqrtf+0x38>
 8004ba8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	d505      	bpl.n	8004bbe <sqrtf+0x32>
 8004bb2:	f7ff fb75 	bl	80042a0 <__errno>
 8004bb6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004bba:	2321      	movs	r3, #33	@ 0x21
 8004bbc:	6003      	str	r3, [r0, #0]
 8004bbe:	ecbd 8b02 	vpop	{d8}
 8004bc2:	bd08      	pop	{r3, pc}
 8004bc4:	00000000 	.word	0x00000000

08004bc8 <atanf>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	ee10 5a10 	vmov	r5, s0
 8004bce:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8004bd2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8004bd6:	eef0 7a40 	vmov.f32	s15, s0
 8004bda:	d310      	bcc.n	8004bfe <atanf+0x36>
 8004bdc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8004be0:	d904      	bls.n	8004bec <atanf+0x24>
 8004be2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8004be6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8004d24 <atanf+0x15c>
 8004bf0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004d28 <atanf+0x160>
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	bfc8      	it	gt
 8004bf8:	eef0 7a47 	vmovgt.f32	s15, s14
 8004bfc:	e7f3      	b.n	8004be6 <atanf+0x1e>
 8004bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8004d2c <atanf+0x164>)
 8004c00:	429c      	cmp	r4, r3
 8004c02:	d810      	bhi.n	8004c26 <atanf+0x5e>
 8004c04:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8004c08:	d20a      	bcs.n	8004c20 <atanf+0x58>
 8004c0a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8004d30 <atanf+0x168>
 8004c0e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8004c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c16:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1e:	dce2      	bgt.n	8004be6 <atanf+0x1e>
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	e013      	b.n	8004c4e <atanf+0x86>
 8004c26:	f000 f8a3 	bl	8004d70 <fabsf>
 8004c2a:	4b42      	ldr	r3, [pc, #264]	@ (8004d34 <atanf+0x16c>)
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	d84f      	bhi.n	8004cd0 <atanf+0x108>
 8004c30:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8004c34:	429c      	cmp	r4, r3
 8004c36:	d841      	bhi.n	8004cbc <atanf+0xf4>
 8004c38:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8004c3c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004c40:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004c44:	2300      	movs	r3, #0
 8004c46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004c4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8004c54:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004d38 <atanf+0x170>
 8004c58:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8004d3c <atanf+0x174>
 8004c5c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8004d40 <atanf+0x178>
 8004c60:	ee66 6a06 	vmul.f32	s13, s12, s12
 8004c64:	eee6 5a87 	vfma.f32	s11, s13, s14
 8004c68:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004d44 <atanf+0x17c>
 8004c6c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004c70:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8004d48 <atanf+0x180>
 8004c74:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004c78:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004d4c <atanf+0x184>
 8004c7c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004c80:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8004d50 <atanf+0x188>
 8004c84:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004c88:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004d54 <atanf+0x18c>
 8004c8c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8004c90:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004d58 <atanf+0x190>
 8004c94:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004c98:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8004d5c <atanf+0x194>
 8004c9c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8004ca0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004d60 <atanf+0x198>
 8004ca4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004ca8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004cac:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004cb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cb4:	d121      	bne.n	8004cfa <atanf+0x132>
 8004cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cba:	e794      	b.n	8004be6 <atanf+0x1e>
 8004cbc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004cc0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004cc4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004cc8:	2301      	movs	r3, #1
 8004cca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004cce:	e7be      	b.n	8004c4e <atanf+0x86>
 8004cd0:	4b24      	ldr	r3, [pc, #144]	@ (8004d64 <atanf+0x19c>)
 8004cd2:	429c      	cmp	r4, r3
 8004cd4:	d80b      	bhi.n	8004cee <atanf+0x126>
 8004cd6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8004cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cde:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cec:	e7af      	b.n	8004c4e <atanf+0x86>
 8004cee:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004cf2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e7a9      	b.n	8004c4e <atanf+0x86>
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004d68 <atanf+0x1a0>)
 8004cfc:	491b      	ldr	r1, [pc, #108]	@ (8004d6c <atanf+0x1a4>)
 8004cfe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004d02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004d06:	edd3 6a00 	vldr	s13, [r3]
 8004d0a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d14:	edd2 7a00 	vldr	s15, [r2]
 8004d18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d1c:	bfb8      	it	lt
 8004d1e:	eef1 7a67 	vneglt.f32	s15, s15
 8004d22:	e760      	b.n	8004be6 <atanf+0x1e>
 8004d24:	bfc90fdb 	.word	0xbfc90fdb
 8004d28:	3fc90fdb 	.word	0x3fc90fdb
 8004d2c:	3edfffff 	.word	0x3edfffff
 8004d30:	7149f2ca 	.word	0x7149f2ca
 8004d34:	3f97ffff 	.word	0x3f97ffff
 8004d38:	3c8569d7 	.word	0x3c8569d7
 8004d3c:	3d4bda59 	.word	0x3d4bda59
 8004d40:	bd6ef16b 	.word	0xbd6ef16b
 8004d44:	3d886b35 	.word	0x3d886b35
 8004d48:	3dba2e6e 	.word	0x3dba2e6e
 8004d4c:	3e124925 	.word	0x3e124925
 8004d50:	3eaaaaab 	.word	0x3eaaaaab
 8004d54:	bd15a221 	.word	0xbd15a221
 8004d58:	bd9d8795 	.word	0xbd9d8795
 8004d5c:	bde38e38 	.word	0xbde38e38
 8004d60:	be4ccccd 	.word	0xbe4ccccd
 8004d64:	401bffff 	.word	0x401bffff
 8004d68:	08004e80 	.word	0x08004e80
 8004d6c:	08004e70 	.word	0x08004e70

08004d70 <fabsf>:
 8004d70:	ee10 3a10 	vmov	r3, s0
 8004d74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d78:	ee00 3a10 	vmov	s0, r3
 8004d7c:	4770      	bx	lr

08004d7e <__ieee754_sqrtf>:
 8004d7e:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004d82:	4770      	bx	lr

08004d84 <_init>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr

08004d90 <_fini>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr
